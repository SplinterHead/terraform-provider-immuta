{
  "swagger": "2.0",
  "host": "dev-instacart.hosted.immutacloud.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "info": {
    "title": "API documentation",
    "version": "v1"
  },
  "tags": [],
  "paths": {
    "/activity": {
      "get": {
        "summary": "Get activity feed for current user",
        "operationId": "getActivity",
        "parameters": [
          {
            "type": "boolean",
            "description": "If true, excludes activities that were initiated by the calling user.",
            "name": "excludeMine",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, excludes DataSource access requests from the returned activities.",
            "name": "nonRequestActivity",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, excludes activities that are marked as 'read'.",
            "default": false,
            "name": "new",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The number of records to skip for this query.",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of records to return in this query.",
            "default": 5,
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The type of object to get activity for (ie datasource, script).",
            "name": "modelType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The id for the model (ie, the data source id).",
            "name": "modelId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The field to use for sorting.",
            "enum": [
              "id"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The sort order to use.",
            "default": "desc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If set, will use text to search through notification types and return all matched types",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If set, will only returns activities of this type",
            "name": "notificationType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If set, will only returns activities from users with given permission if current user has it as well",
            "name": "permission",
            "in": "query"
          }
        ],
        "tags": [
          "activity"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model2"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/audit": {
      "get": {
        "summary": "Search for audit records",
        "operationId": "getAudit",
        "parameters": [
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "dataSourceId",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "profileId",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "recordType",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "outcome",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "name": "minDate",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "name": "maxDate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "blobId",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "purpose",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 50,
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "dateTime",
            "enum": [
              "dateTime"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "tags": [
          "audit"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Audit%20Search%20Results"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/connectionStrings": {
      "get": {
        "summary": "Searches across all connection strings in the handler table",
        "operationId": "getConnectionstrings",
        "parameters": [
          {
            "type": "string",
            "description": "A string used to filter returned connection strings. The query is executed with a wildcard prefix and suffix.",
            "name": "searchText",
            "in": "query"
          }
        ],
        "tags": [
          "connectionStrings"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model8"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource": {
      "get": {
        "summary": "Search for data sources",
        "operationId": "getDatasource",
        "parameters": [
          {
            "type": "array",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "blobHandlerType",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "pending",
                "owner",
                "subscribed",
                "not_subscribed",
                "expert",
                "ingest"
              ]
            },
            "collectionFormat": "multi",
            "name": "subscription",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "status",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "tag",
            "in": "query"
          },
          {
            "type": "string",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "column",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "connectionString",
            "in": "query"
          },
          {
            "type": "string",
            "name": "schema",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "nameOnly",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "idOnly",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "dataSourceIds",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "id",
                "name",
                "columnEvolutionEnabled"
              ]
            },
            "collectionFormat": "multi",
            "name": "selectFields",
            "in": "query"
          },
          {
            "type": "integer",
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "createdAt",
              "name",
              "blobHandlerType",
              "subscriptionStatus",
              "recordCount",
              "status",
              "policy",
              "editable"
            ],
            "x-alternatives": [
              {
                "type": "string",
                "enum": [
                  "createdAt",
                  "name",
                  "blobHandlerType",
                  "subscriptionStatus",
                  "recordCount",
                  "status",
                  "policy",
                  "editable"
                ]
              },
              {
                "type": "string"
              }
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "getHandlerTypeFacet",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "getEditableFacet",
            "in": "query"
          },
          {
            "type": "array",
            "description": "Filter out any data sources that belong to the specified projects",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "excludedProjects",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "ephemeral",
            "in": "query"
          },
          {
            "type": "string",
            "name": "clusterName",
            "in": "query"
          },
          {
            "type": "integer",
            "enum": [
              0,
              1,
              4,
              5,
              6
            ],
            "name": "mode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by data sources actively applying this global policy name",
            "name": "globalPolicy",
            "in": "query"
          },
          {
            "type": "string",
            "name": "hostname",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "True, if you want to return whether the data source has any policy conflicts",
            "default": false,
            "name": "determinePolicyConflicts",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model11"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/frameworks": {
      "get": {
        "summary": "Get all frameworks",
        "operationId": "getFrameworks",
        "parameters": [
          {
            "type": "boolean",
            "description": "Return active or inactive frameworks. If undefined returns all.",
            "name": "active",
            "in": "query"
          }
        ],
        "tags": [
          "frameworks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model18"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create framework",
        "operationId": "postFrameworks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model155"
            }
          }
        ],
        "tags": [
          "frameworks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "Successful"
          },
          "400": {
            "description": "Framework structured incorrectly or failed validation."
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "summary": "Searches across all organizations",
        "operationId": "getOrganizations",
        "parameters": [
          {
            "type": "string",
            "description": "A string used to filter returned organizations. The query is executed with a wildcard prefix and suffix.",
            "name": "searchText",
            "in": "query"
          }
        ],
        "tags": [
          "organizations"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model8"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project": {
      "get": {
        "summary": "Searches for projects",
        "operationId": "getProject",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query",
            "required": false
          },
          {
            "type": "integer",
            "default": 10,
            "name": "size",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "enum": [
              "name",
              "status",
              "updatedAt"
            ],
            "x-alternatives": [
              {
                "type": "string",
                "enum": [
                  "name",
                  "status",
                  "updatedAt"
                ]
              },
              {
                "type": "string"
              }
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "asc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "owner",
                "not_subscribed",
                "pending",
                "subscribed",
                "expert"
              ]
            },
            "collectionFormat": "multi",
            "name": "subscription",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "open",
              "closed"
            ],
            "name": "status",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "tag",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "name": "nameOnly",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "name": "isEqualized",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "name": "snowflake",
            "in": "query",
            "required": false
          },
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "query",
            "required": false
          },
          {
            "type": "integer",
            "enum": [
              0,
              1,
              4,
              5,
              6
            ],
            "name": "mode",
            "in": "query"
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model30"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create the project",
        "operationId": "postProject",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model158"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model160"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/s3p": {
      "get": {
        "summary": "Returns constant bucket that all datasources are grouped under",
        "operationId": "getS3p",
        "tags": [
          "s3p"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/schemas": {
      "get": {
        "summary": "Searches across all schemas in the handler table",
        "operationId": "getSchemas",
        "parameters": [
          {
            "type": "string",
            "description": "A string used to filter returned schemas. The query is executed with a wildcard prefix and suffix.",
            "name": "searchText",
            "in": "query"
          }
        ],
        "tags": [
          "schemas"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model8"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/searchFilter": {
      "get": {
        "summary": "Retrieves all saved search filters",
        "operationId": "getSearchfilter",
        "parameters": [
          {
            "type": "string",
            "description": "A string used to filter returned saved filters. The query is executed with a wildcard prefix and suffix.",
            "name": "searchText",
            "in": "query"
          }
        ],
        "tags": [
          "searchFilter"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model33"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Saves a new search filter",
        "operationId": "postSearchfilter",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model31"
            }
          }
        ],
        "tags": [
          "searchFilter"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model31"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/tag": {
      "get": {
        "summary": "Searches across all tags",
        "operationId": "getTag",
        "parameters": [
          {
            "type": "string",
            "description": "A string used to filter returned tags. The query is executed with a wildcard prefix and suffix.",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, the search will be more forgiving when tags with escaped periods are involved",
            "name": "fuzzySearch",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter tags by the source that created them",
            "name": "source",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Only return tags that do NOT have this source",
            "name": "excludedSource",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Include all system tags even if they have been deleted",
            "name": "includeAllSystemTags",
            "in": "query"
          },
          {
            "type": "array",
            "description": "A list of tag names whose hierarchies should be excluded",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "excludedHierarchies",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The maximum number of search results that will be returned",
            "minimum": 1,
            "name": "limit",
            "in": "query"
          }
        ],
        "tags": [
          "tag"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model35"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create a new tag",
        "operationId": "postTag",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model163"
            }
          }
        ],
        "tags": [
          "tag"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model164"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "summary": "Returns a list of all webhooks the user has access to",
        "operationId": "getWebhooks",
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model37"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create a new webhook",
        "operationId": "postWebhooks",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model166"
            }
          }
        ],
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model168"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/activity/hasUnread": {
      "get": {
        "summary": "Get whether the current user has unread activities",
        "operationId": "getActivityHasunread",
        "tags": [
          "activity"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model38"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/admin/license": {
      "get": {
        "summary": "Get a list of all license keys",
        "operationId": "getAdminLicense",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model40"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Add an immuta license key to increase the number of seats",
        "operationId": "postAdminLicense",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model171"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/audit/{recordId}": {
      "get": {
        "summary": "Retrieve a specific audit record",
        "operationId": "getAuditRecordid",
        "parameters": [
          {
            "type": "string",
            "name": "recordId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "audit"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AuditRecord"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/group": {
      "get": {
        "summary": "Gets the list of groups from all configured iams",
        "operationId": "getBimGroup",
        "parameters": [
          {
            "type": "string",
            "description": "A partial name to match against group names",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "userId",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "name": "iamid",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 25,
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "name",
              "iamid",
              "createdAt"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true will only return distinct group names",
            "default": false,
            "name": "nameOnly",
            "in": "query"
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model43"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create a new group",
        "operationId": "postBimGroup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model175"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model41"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam": {
      "get": {
        "summary": "Gets a listing of configured IAM services",
        "operationId": "getBimIam",
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model45"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/user": {
      "get": {
        "summary": "Administrative search over the aggregated view of all users",
        "operationId": "getBimUser",
        "parameters": [
          {
            "type": "integer",
            "description": "The max number of matches to return",
            "default": 25,
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A partial name to match against user names",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A partial email address to match against user email addresses",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A partial user ID to match against user IDs",
            "name": "userid",
            "in": "query"
          },
          {
            "type": "array",
            "description": "Optionally provide the IAM to filter the users",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "iamid",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Optionally exclude accounts automatically created for handlers that periodically crawl and ingest",
            "name": "excludeSystemGenerated",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Optionally exclude Admin and Governor accounts",
            "name": "excludeAdminAndGovernor",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Optionally exclude users for any IAMs that are no longer configured",
            "default": true,
            "name": "excludeDeletedIams",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Optionally exclude users from the Immuta internal identity manager",
            "default": false,
            "name": "excludeBIM",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Optionally include disabled users.",
            "default": false,
            "name": "includeDisabled",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "description": "The field to sort results on. Defaults to user name",
            "enum": [
              "name",
              "createdAt",
              "iamid",
              "email",
              "username",
              "lastLogin"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order that the results will be sorted in",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset to start returning values",
            "default": 0,
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A permission to filter the users by",
            "name": "permission",
            "in": "query"
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model48"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/blobHandlerTypes": {
      "get": {
        "summary": "Retrieves all blob handlers the current user is allowed to create",
        "operationId": "getDatasourceBlobhandlertypes",
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/byPurposes": {
      "get": {
        "summary": "get datasources that match a set of purposes",
        "operationId": "getDatasourceBypurposes",
        "parameters": [
          {
            "type": "array",
            "minItems": 1,
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "purposes",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "description": "Filter out any data sources that belong to the specified projects",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "excludedProjects",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/featureStore": {
      "get": {
        "summary": "Return the user's connection parameters for the feature store as JSON",
        "operationId": "getDatasourceFeaturestore",
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create a SQL account",
        "operationId": "postDatasourceFeaturestore",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model178"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}": {
      "get": {
        "summary": "Get datasource based on the id",
        "operationId": "getDatasourceDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Deprecated",
            "name": "updateStats",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, will return subscriber count",
            "default": true,
            "name": "includeSubscribers",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete a datasource. Will perform a soft delete on the first call, hard delete the second time",
        "operationId": "deleteDatasourceDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model133"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update a datasource",
        "operationId": "putDatasourceDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model346"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dictionary/columns": {
      "get": {
        "summary": "Searches across all dictionary columns",
        "operationId": "getDictionaryColumns",
        "parameters": [
          {
            "type": "string",
            "description": "A string used to filter returned columns. The query is executed with a wildcard prefix and suffix.",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The maximum number of search results that will be returned",
            "default": 10,
            "minimum": 1,
            "name": "limit",
            "in": "query"
          }
        ],
        "tags": [
          "dictionary"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model49"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dictionary/{dataSourceId}": {
      "get": {
        "summary": "Get the dictionary for the specified data source",
        "operationId": "getDictionaryDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dictionary"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model55"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete the dictionary for the specified data source",
        "operationId": "deleteDictionaryDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dictionary"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model134"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create the dictionary for the specified data source",
        "operationId": "postDictionaryDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model204"
            }
          }
        ],
        "tags": [
          "dictionary"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model55"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update the dictionary for the specified data source",
        "operationId": "putDictionaryDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model204"
            }
          }
        ],
        "tags": [
          "dictionary"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model55"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/fingerprint/status": {
      "get": {
        "summary": "Get the status of the fingerprint service",
        "operationId": "getFingerprintStatus",
        "tags": [
          "fingerprint"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/frameworks/{frameworkId}": {
      "get": {
        "summary": "Get framework based on the id",
        "operationId": "getFrameworksFrameworkid",
        "parameters": [
          {
            "type": "string",
            "x-format": {
              "guid": true
            },
            "name": "frameworkId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "frameworks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "Successful"
          },
          "404": {
            "description": "Framework could not be found"
          }
        }
      },
      "delete": {
        "summary": "Delete a framework",
        "operationId": "deleteFrameworksFrameworkid",
        "parameters": [
          {
            "type": "string",
            "x-format": {
              "guid": true
            },
            "name": "frameworkId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "frameworks"
        ],
        "responses": {
          "204": {
            "description": "Framework deleted"
          },
          "404": {
            "description": "Framework could not be found"
          }
        }
      },
      "put": {
        "summary": "Update a framework",
        "operationId": "putFrameworksFrameworkid",
        "parameters": [
          {
            "type": "string",
            "x-format": {
              "guid": true
            },
            "name": "frameworkId",
            "in": "path",
            "required": true
          },
          {
            "x-alternatives": [
              {
                "$ref": "#/x-alt-definitions/Model38"
              },
              {
                "$ref": "#/x-alt-definitions/Model44"
              }
            ],
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model350"
            }
          }
        ],
        "tags": [
          "frameworks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "Successful"
          },
          "404": {
            "description": "Framework could not be found"
          }
        }
      }
    },
    "/governance/purpose": {
      "get": {
        "summary": "Search for purposes",
        "operationId": "getGovernancePurpose",
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query",
            "required": false
          },
          {
            "type": "integer",
            "default": 50,
            "name": "size",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "default": false,
            "name": "noLimit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "name",
            "enum": [
              "name",
              "updatedAt",
              "createdAt"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "asc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "string",
            "x-convert": {
              "trim": true
            },
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Restrict results to provided root or subpurposes of root",
            "name": "root",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "strictSearch",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, return count of projects with each purpose",
            "default": false,
            "name": "getAffectedCount",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "includeDeleted",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "governance"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model57"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create or update a purpose hierarchy",
        "operationId": "postGovernancePurpose",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model21"
            }
          }
        ],
        "tags": [
          "governance"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model21"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/jobs/search": {
      "get": {
        "summary": "Search jobs based on user permissions and ownership",
        "operationId": "getJobsSearch",
        "parameters": [
          {
            "type": "string",
            "x-alternatives": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "collectionFormat": "multi",
                "name": "jobType"
              }
            ],
            "name": "jobType",
            "in": "query"
          },
          {
            "type": "string",
            "x-alternatives": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "collectionFormat": "multi",
                "name": "state"
              }
            ],
            "name": "state",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "name": "endDate",
            "in": "query"
          },
          {
            "type": "string",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "minimum": 1,
            "name": "size",
            "in": "query"
          }
        ],
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model58"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/jobs/summary": {
      "get": {
        "summary": "Retrieve a summary of jobs based on user permissions and ownership",
        "operationId": "getJobsSummary",
        "parameters": [
          {
            "type": "string",
            "x-alternatives": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "collectionFormat": "multi",
                "name": "jobType"
              }
            ],
            "name": "jobType",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "name": "endDate",
            "in": "query"
          }
        ],
        "tags": [
          "jobs"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/policy/global": {
      "get": {
        "summary": "Get global policies with a given entityType",
        "operationId": "getPolicyGlobal",
        "parameters": [
          {
            "type": "integer",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "createdAt",
            "enum": [
              "createdAt",
              "name"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "string",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "subscription",
              "data"
            ],
            "name": "type",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "nameOnly",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When true/false/omitted, return templates-only/non-templates-only/either",
            "name": "templates",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "When true, omits staged policies",
            "name": "ignoreStaged",
            "in": "query"
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model59"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create a global policy with a given entityType",
        "operationId": "postPolicyGlobal",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model214"
            }
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model149"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}": {
      "get": {
        "summary": "Get the project with the given id",
        "operationId": "getProjectProjectid",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "name": "checkForSqlAccount",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model61"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete the project with the given id",
        "operationId": "deleteProjectProjectid",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update the project with the given id",
        "operationId": "putProjectProjectid",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "deleteDataSources",
            "in": "query",
            "required": false
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model351"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model353"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/s3p/{bucket}": {
      "get": {
        "summary": "Returns the contents of a given bucket (datasources or datasource blobs)",
        "operationId": "getS3pBucket",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the bucket, should match the bucket name in configuration",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The prefix to start a search under",
            "name": "prefix",
            "in": "query"
          },
          {
            "type": "number",
            "description": "Max number of content objects to return",
            "name": "max-keys",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The terminating character for a search",
            "name": "delimiter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Only prefixes after this marker will be returned",
            "name": "marker",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If provided, will instead return the bucket location",
            "name": "location",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Encoding type for content keys",
            "name": "encoding-type",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "If set to 2, will use v2 of the API response",
            "name": "list-type",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, will return owner field in V2 response",
            "default": false,
            "name": "fetch-owner",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Only prefixes after this marker will be returned. V2 version of marker.",
            "name": "start-after",
            "in": "query"
          }
        ],
        "tags": [
          "s3p"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/sdd/classifier": {
      "get": {
        "summary": "List/search classifiers",
        "operationId": "getSddClassifier",
        "parameters": [
          {
            "type": "string",
            "default": "name",
            "enum": [
              "id",
              "name",
              "displayName",
              "type",
              "createdAt",
              "updatedAt"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "asc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 25,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "regex",
                "columnNameRegex",
                "dictionary",
                "remoteDictionary",
                "builtIn"
              ]
            },
            "collectionFormat": "multi",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Partial, case-insensitive search on name",
            "name": "searchText",
            "in": "query"
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model65"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create a classifier",
        "operationId": "postSddClassifier",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model240"
            }
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model63"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/sdd/template": {
      "get": {
        "summary": "List/search templates",
        "operationId": "getSddTemplate",
        "parameters": [
          {
            "type": "string",
            "default": "name",
            "enum": [
              "id",
              "name",
              "displayName",
              "createdAt",
              "updatedAt"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "asc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 25,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string",
              "pattern": "^[A-Z_0-9]+$"
            },
            "collectionFormat": "multi",
            "name": "classifiers",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Partial, case-insensitive search on template name",
            "name": "searchText",
            "in": "query"
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model71"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Create a template",
        "operationId": "postSddTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model243"
            }
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model69"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/subscription/getPendingRequestsForUser": {
      "get": {
        "summary": "Get pending access requests the calling user can approve",
        "operationId": "getSubscriptionGetpendingrequestsforuser",
        "parameters": [
          {
            "type": "boolean",
            "description": "If true, group request results by user/group",
            "name": "groupByEntity",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Match against profile id",
            "name": "profileId",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Match against group id",
            "name": "groupId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A partial name to match against user or group names",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A partial email address to match against user or group email addresses",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A partial name to match against model names",
            "name": "modelName",
            "in": "query"
          },
          {
            "type": "array",
            "description": "Model types to include",
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "datasource",
                "project"
              ]
            },
            "collectionFormat": "multi",
            "name": "modelTypes",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The max number of matches to return",
            "default": 15,
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The field to sort results on. Defaults to name",
            "enum": [
              "name",
              "email"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order that the results will be sorted in",
            "default": "asc",
            "enum": [
              "asc",
              "desc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset to start returning values",
            "default": 0,
            "minimum": 0,
            "name": "offset",
            "in": "query"
          }
        ],
        "tags": [
          "subscription"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model77"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/webhooks/actions": {
      "get": {
        "summary": "Returns a list of all actions that a webhook can be created for",
        "operationId": "getWebhooksActions",
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model78"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/webhooks/history": {
      "get": {
        "summary": "Returns the history of webhook requests",
        "operationId": "getWebhooksHistory",
        "parameters": [
          {
            "type": "integer",
            "description": "The number of records to skip for this query.",
            "default": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of records to return in this query.",
            "default": 20,
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The field to use for sorting.",
            "default": "createdAt",
            "enum": [
              "createdAt"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The sort order to use.",
            "default": "desc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If set, will only returns activities of this type",
            "enum": [
              "modelCreated",
              "modelDeleted",
              "modelCopied",
              "dataSourceUpdated",
              "dataSourceExpired",
              "dataSourceExpiring",
              "healthCheckFailed",
              "healthCheckResolved",
              "modelUserAdded",
              "modelUserDeleted",
              "modelUserJoined",
              "modelAccessRequested",
              "modelAccessApproved",
              "modelAccessRevoked",
              "modelAccessUpdated",
              "modelAccessDenied",
              "modelTagAdded",
              "modelTagRemoved",
              "projectUpdated",
              "projectEqualizationToggled",
              "projectEqualizationMemberNotInCompliance",
              "projectDisabled",
              "addedToProject",
              "removedFromProject",
              "deletedDatasourceRemovedFromProject",
              "expiredDatasourceRemovedFromProject",
              "updatedModelInProject",
              "nativeWorkspaceStateChanged",
              "policyUpdated",
              "modelCommentCreated",
              "modelCommentReply",
              "modelCommentResolved",
              "queryCreated",
              "queryCanceled",
              "queryUpdated",
              "firstQuery",
              "userCreated",
              "userDeleted",
              "userEnabled",
              "userCloned",
              "userDisabled",
              "userMigrated",
              "groupUserAdded",
              "groupUserDeleted",
              "userUpdated",
              "attributeUpdated",
              "attributeAdded",
              "attributeRemoved",
              "permissionsUpdated",
              "switchedCurrentProject",
              "usernameUpdated",
              "acknowledgedAccess",
              "purposeCreated",
              "purposeUpdated",
              "purposeDeleted",
              "tagCreated",
              "tagUpdated",
              "tagDeleted",
              "governanceSettingsUpdated",
              "apiKeyRevoked",
              "conflictingGlobalPolicies",
              "globalPolicyCreated",
              "globalPolicyUpdated",
              "globalPolicyDeleted",
              "globalPolicyApproved",
              "globalPolicyChangeRequested",
              "globalPolicyApprovalRescinded",
              "globalPolicyDisabled",
              "bulkJobStatus",
              "bulkCreateDatasource",
              "taskValidated",
              "taskDeleted",
              "certificationRequired",
              "policyCertificationExpired",
              "policyAdjustmentExpired",
              "policyAdjustmentCreated",
              "nativeViewUpdated",
              "frameworkCreated",
              "frameworkUpdated",
              "frameworkDeleted"
            ],
            "name": "notificationType",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "description": "Whether or not global records should be included",
            "default": false,
            "name": "includeGlobal",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether or not personal webhooks should be returned for the given user",
            "default": true,
            "name": "includeUser",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If set, will only retrieve records that were successful or failed",
            "enum": [
              "success",
              "failure"
            ],
            "name": "successOrFailure",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model81"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "summary": "Returns the entry for a specific webhook",
        "operationId": "getWebhooksId",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model82"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete a webhook by id",
        "operationId": "deleteWebhooksId",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model135"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/admin/license/licenseStatus": {
      "get": {
        "summary": "Get the status of license seat capacity and features",
        "operationId": "getAdminLicenseLicensestatus",
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model83"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/audit/apikey/activity": {
      "get": {
        "summary": "Queries for the recent activity using the api key",
        "operationId": "getAuditApikeyActivity",
        "parameters": [
          {
            "type": "integer",
            "name": "keyid",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of records to limit the response to",
            "default": 1,
            "minimum": 1,
            "name": "count",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "audit"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/ApiKey%20Activity%20Result"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/group/{groupId}": {
      "get": {
        "summary": "Gets the specified group",
        "operationId": "getBimGroupGroupid",
        "parameters": [
          {
            "type": "integer",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model41"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete the specified group",
        "operationId": "deleteBimGroupGroupid",
        "parameters": [
          {
            "type": "integer",
            "name": "groupId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update the specified group",
        "operationId": "putBimGroupGroupid",
        "parameters": [
          {
            "type": "integer",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model357"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model41"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/featureStore/connection": {
      "get": {
        "summary": "Return the users connection string for the feature store",
        "operationId": "getDatasourceFeaturestoreConnection",
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model84"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/name/{dataSourceName}": {
      "get": {
        "summary": "Get datasource based on the name",
        "operationId": "getDatasourceNameDatasourcename",
        "parameters": [
          {
            "type": "string",
            "name": "dataSourceName",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/rpc/mine": {
      "get": {
        "summary": "Retrieves all the data sources the current user has access to",
        "operationId": "getDatasourceRpcMine",
        "parameters": [
          {
            "type": "string",
            "name": "database",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "table",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "name": "handler",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/sqlTableName/{shortName}": {
      "get": {
        "summary": "Get datasource based on the short name",
        "operationId": "getDatasourceSqltablenameShortname",
        "parameters": [
          {
            "type": "string",
            "name": "shortName",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/tasks/pending": {
      "get": {
        "summary": "get all pending tasks for this user and pending tasks this user has created",
        "operationId": "getDatasourceTasksPending",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, will filter results using the specified string.",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "schemaEvolution",
              "dataSource"
            ],
            "name": "searchModel",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of results to return",
            "name": "size",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "description": "The schema evolution connection string to filter by",
            "name": "schemaEvolutionConnectionString",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "description": "If set, will only return the number of tasks, grouped by schema evolution.",
            "default": false,
            "name": "countBySchemaEvolution",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If set, will only return the number of tasks, grouped by data source.",
            "default": false,
            "name": "countByDataSource",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "countOnly",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, will return the results as an array of { dataSourceId: <id>, rows: <json> }",
            "default": false,
            "name": "groupByDataSource",
            "in": "query"
          },
          {
            "type": "array",
            "description": "The type of the tasks",
            "minItems": 1,
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "unmask",
                "queryDebug",
                "dataSourceCreated",
                "columnAdded",
                "columnDeleted",
                "columnTypeChanged"
              ]
            },
            "collectionFormat": "multi",
            "name": "types",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/tasks/{taskId}": {
      "get": {
        "summary": "Handles the given task and marks it as complete",
        "operationId": "getDatasourceTasksTaskid",
        "parameters": [
          {
            "type": "integer",
            "name": "taskId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Deletes the specified task",
        "operationId": "deleteDatasourceTasksTaskid",
        "parameters": [
          {
            "type": "integer",
            "name": "taskId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/tasks": {
      "get": {
        "summary": "Returns all tasks the user has made/can approve or deny for this datasource",
        "operationId": "getDatasourceDatasourceidTasks",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "description": "The state of the tasks",
            "minItems": 1,
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "pending",
                "completed"
              ]
            },
            "collectionFormat": "multi",
            "name": "states",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Only return tasks where the target user has this profile id",
            "name": "targetProfileId",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Only return tasks where the requesting user has this profile id",
            "name": "requestingUserProfileId",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Returns tasks where either the target or requesting user has this profile id",
            "name": "profileId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A string used to filter returned users. The query is executed with a wildcard prefix and suffix",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A string used to determine how results should be filtered using searchText.",
            "name": "searchModel",
            "in": "query"
          },
          {
            "type": "array",
            "description": "The type of the tasks",
            "minItems": 1,
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "unmask",
                "queryDebug",
                "dataSourceCreated",
                "columnAdded",
                "columnDeleted",
                "columnTypeChanged"
              ]
            },
            "collectionFormat": "multi",
            "name": "types",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of results to return",
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of results to skip (for paging)",
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The field on which to sort the result set",
            "enum": [
              "createdAt",
              "requestingUserName",
              "requestingUserEmail",
              "state",
              "type"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order in which to sort the results",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If set, will only return the number of tasks",
            "name": "countOnly",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/visibilityReport": {
      "get": {
        "summary": "Retrieves a summary of total records, total visibilities, and visibilities the current user has access to",
        "operationId": "getDatasourceDatasourceidVisibilityreport",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "extendedAttributes",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model85"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/access": {
      "get": {
        "summary": "Get all users with the provided access level for this DataSource",
        "operationId": "getDatasourceDatasourceidAccess",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "description": "The status levels to include when querying for user access",
            "minItems": 1,
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "subscribed",
                "expert",
                "owner",
                "ingest"
              ]
            },
            "collectionFormat": "multi",
            "name": "states",
            "in": "query"
          },
          {
            "type": "array",
            "description": "The subscription types to include when querying for user access",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "user",
                "group",
                "policy"
              ]
            },
            "collectionFormat": "multi",
            "name": "memberTypes",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Denotes whether the returned access objects should be approved",
            "name": "approved",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A string used to filter returned users. The query is executed with a wildcard prefix and suffix",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of results to return",
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "The number of results to skip (for paging)",
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The field on which to sort the result set",
            "enum": [
              "name",
              "state",
              "email",
              "expiration",
              "type"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The order in which to sort the results",
            "default": "desc",
            "enum": [
              "asc",
              "desc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true will return individual members of any group subscribed",
            "name": "expandGroups",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, will not return system generated accounts",
            "name": "ignoreSystemGenerated",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, will only return users who have the specified level of access across ALL data sources within the same schema evolution group as this one.",
            "name": "filterBySchemaEvolution",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Add a user to a specific datasource",
        "operationId": "postDatasourceDatasourceidAccess",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model276"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/tags": {
      "get": {
        "summary": "Get the tags for a datasource",
        "operationId": "getDatasourceDatasourceidTags",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Filter the tags just for this blob",
            "name": "blobId",
            "in": "query"
          },
          {
            "type": "integer",
            "minimum": 1,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Only display blob tags associated with a dataSource",
            "name": "blobTagsOnly",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/test": {
      "get": {
        "summary": "Test a datasource",
        "operationId": "getDatasourceDatasourceidTest",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/queries": {
      "get": {
        "summary": "Search for queries associated with the provided Data Source ID.",
        "operationId": "getDatasourceDatasourceidQueries",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "mine",
            "in": "query"
          },
          {
            "type": "integer",
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "name",
              "timesrun",
              "lastrun",
              "profile.name"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/comments": {
      "get": {
        "summary": "Get all of the comments for the data source",
        "operationId": "getDatasourceDatasourceidComments",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "description": "The columns for which to retrieve comments",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "columns",
            "in": "query"
          },
          {
            "type": "array",
            "description": "The queries for which to retrieve comments",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "queries",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If set, will retrieve only comments with the provided value for resolved",
            "name": "resolved",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "createdAt",
              "totalreplies",
              "lastreply",
              "body",
              "profile.name"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Add a comment to the data source",
        "operationId": "postDatasourceDatasourceidComments",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model272"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model273"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/activities": {
      "get": {
        "summary": "Get all of the recent policy activities for a given data source",
        "operationId": "getDatasourceDatasourceidActivities",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "x-alternatives": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 15,
            "name": "size",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model89"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/contacts": {
      "get": {
        "summary": "Gets the profiles for the datasource owners and experts",
        "operationId": "getDatasourceDatasourceidContacts",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/databricks/handler/{handlerId}": {
      "get": {
        "summary": "Returns the handler metadata associated with the provided handler ID.",
        "operationId": "getDatabricksHandlerHandlerid",
        "parameters": [
          {
            "type": "integer",
            "name": "handlerId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Whether or not to skip the handler cache when retrieving the handler data",
            "name": "skipCache",
            "in": "query"
          }
        ],
        "tags": [
          "databricks"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Updates the handler metadata associated with the provided handler ID. This endpoint does not perform partial updates, but will allow the dictionary to be omitted. In this case it uses the current dictionary.",
        "operationId": "putDatabricksHandlerHandlerid",
        "parameters": [
          {
            "type": "integer",
            "name": "handlerId",
            "in": "path",
            "required": true
          },
          {
            "x-alternatives": [
              {
                "$ref": "#/x-alt-definitions/Model57"
              },
              {
                "$ref": "#/x-alt-definitions/Model58"
              }
            ],
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model365"
            }
          }
        ],
        "tags": [
          "databricks"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/frameworks/{frameworkId}/versions": {
      "get": {
        "summary": "Get all versions for a specified framework",
        "operationId": "getFrameworksFrameworkidVersions",
        "parameters": [
          {
            "type": "string",
            "x-format": {
              "guid": true
            },
            "name": "frameworkId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "frameworks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model91"
            },
            "description": "Successful"
          },
          "404": {
            "description": "Framework could not be found"
          }
        }
      }
    },
    "/governance/purpose/{purposeId}": {
      "get": {
        "summary": "Get a purpose by id",
        "operationId": "getGovernancePurposePurposeid",
        "parameters": [
          {
            "type": "integer",
            "name": "purposeId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "name": "includeSubpurposes",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "governance"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model21"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete the purpose with the given id and its associated sub-purposes",
        "operationId": "deleteGovernancePurposePurposeid",
        "parameters": [
          {
            "type": "integer",
            "name": "purposeId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "governance"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model140"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update a purpose",
        "operationId": "putGovernancePurposePurposeid",
        "parameters": [
          {
            "type": "integer",
            "name": "purposeId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model366"
            }
          }
        ],
        "tags": [
          "governance"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model21"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/governance/reports/{entityType}": {
      "get": {
        "summary": "Get metadata for all governance reports with a given entityType",
        "operationId": "getGovernanceReportsEntitytype",
        "parameters": [
          {
            "type": "string",
            "name": "entityType",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "governance"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model92"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/hdfs/workspace/checkDirectory": {
      "get": {
        "summary": "Check availability of HDFS backed handlers in the workspace directory",
        "operationId": "getHdfsWorkspaceCheckdirectory",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the workspace to search",
            "name": "workspaceId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Path to check in the workspace",
            "name": "path",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "hdfs"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/hdfs/workspace/search": {
      "get": {
        "summary": "Get list of directories in a workspace",
        "operationId": "getHdfsWorkspaceSearch",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the workspace to search",
            "name": "workspaceId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Path to search in the workspace",
            "name": "path",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "name": "searchText",
            "in": "query",
            "required": false
          },
          {
            "type": "integer",
            "name": "limit",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "hdfs"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/hdfs/workspace/{workspaceId}": {
      "get": {
        "summary": "Get a workspace",
        "operationId": "getHdfsWorkspaceWorkspaceid",
        "parameters": [
          {
            "type": "integer",
            "name": "workspaceId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "hdfs"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/policy/dataSourcePolicies/{dataSourceId}": {
      "get": {
        "summary": "Gets the policy information by the data source id",
        "operationId": "getPolicyDatasourcepoliciesDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "If false, filter out any custom DSL rules",
            "default": false,
            "name": "retrieveAll",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If true, filter out any policy actions driven by a global policy",
            "default": false,
            "name": "excludeGlobal",
            "in": "query"
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/policy/diff/{dataSourceId}": {
      "get": {
        "summary": "Gets the differences between two policy handler versions",
        "operationId": "getPolicyDiffDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "previousHandlerId",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "currentHandlerId",
            "in": "query"
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/policy/global/{policyId}": {
      "get": {
        "summary": "Get global policy with the given id",
        "operationId": "getPolicyGlobalPolicyid",
        "parameters": [
          {
            "type": "integer",
            "name": "policyId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete a global policy with a given id",
        "operationId": "deletePolicyGlobalPolicyid",
        "parameters": [
          {
            "type": "integer",
            "name": "policyId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model149"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update a global policy with a given id",
        "operationId": "putPolicyGlobalPolicyid",
        "parameters": [
          {
            "type": "integer",
            "name": "policyId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model374"
            }
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model149"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/policy/handler/{dataSourceId}": {
      "get": {
        "summary": "Gets the policy handler metadata",
        "operationId": "getPolicyHandlerDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model94"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Creates a new policy handler for a data source, or updates existing policy handler",
        "operationId": "postPolicyHandlerDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model293"
            }
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model294"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Creates a new policy handler for a data source, or updates existing policy handler",
        "operationId": "putPolicyHandlerDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model293"
            }
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model294"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/checkEqualizationState": {
      "get": {
        "summary": "Get current state of an equalized project",
        "operationId": "getProjectProjectidCheckequalizationstate",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model95"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/dataSources": {
      "get": {
        "summary": "Get all of the data sources for a given project",
        "operationId": "getProjectProjectidDatasources",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query",
            "required": false
          },
          {
            "type": "integer",
            "default": 15,
            "name": "size",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "default": "dataSourceName",
            "enum": [
              "dataSourceName",
              "addedBy",
              "addedOn"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "asc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "string",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If provided, filters by unsubscribed (true, includes data sources with a pending subscription) or subscribed (false) status",
            "name": "unsubscribed",
            "in": "query",
            "required": false
          },
          {
            "type": "array",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "pending",
                "owner",
                "subscribed",
                "not_subscribed",
                "expert"
              ]
            },
            "collectionFormat": "multi",
            "name": "subscription",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "name": "idOnly",
            "in": "query"
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model98"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Removes supplied data sources from the project",
        "operationId": "deleteProjectProjectidDatasources",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "description": "The ids of the data sources to remove from the project",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "ids",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model152"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Adds data sources to a project",
        "operationId": "postProjectProjectidDatasources",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model299"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model304"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/members": {
      "get": {
        "summary": "Get all of the members for a given project",
        "operationId": "getProjectProjectidMembers",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "description": "The status levels to include when querying for user access",
            "minItems": 1,
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "subscribed",
                "expert",
                "owner",
                "ingest"
              ]
            },
            "collectionFormat": "multi",
            "name": "states",
            "in": "query"
          },
          {
            "type": "array",
            "description": "The subscription types to include when querying for user access",
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "string",
              "enum": [
                "user",
                "group",
                "policy"
              ]
            },
            "collectionFormat": "multi",
            "name": "memberTypes",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "name": "offset",
            "in": "query",
            "required": false
          },
          {
            "type": "integer",
            "default": 15,
            "name": "size",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "default": "name",
            "enum": [
              "name",
              "email",
              "state",
              "expiration",
              "type"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "asc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "string",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "approved",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "name": "checkDataSources",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "name": "expandGroups",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model104"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Add a member to the project",
        "operationId": "postProjectProjectidMembers",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model296"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model297"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/activity": {
      "get": {
        "summary": "Get all of the recent activity for a given project",
        "operationId": "getProjectProjectidActivity",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "x-alternatives": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 15,
            "name": "size",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model106"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/comments": {
      "get": {
        "summary": "Get all of the comments for a given project",
        "operationId": "getProjectProjectidComments",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "description": "The project-datasource ids to retrieve comments for",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "dataSources",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "name": "resolved",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "default": "createdAt",
            "enum": [
              "createdAt",
              "lastreply",
              "totalreplies",
              "body",
              "profile.name"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model109"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Add a comment to the project",
        "operationId": "postProjectProjectidComments",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model307"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model116"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/sdd/classifier/{classifierName}": {
      "get": {
        "summary": "Get a classifier",
        "operationId": "getSddClassifierClassifiername",
        "parameters": [
          {
            "type": "string",
            "name": "classifierName",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model63"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete a classifier",
        "operationId": "deleteSddClassifierClassifiername",
        "parameters": [
          {
            "type": "string",
            "name": "classifierName",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model63"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update a classifier. Partial updates are not supported.",
        "operationId": "putSddClassifierClassifiername",
        "parameters": [
          {
            "type": "string",
            "name": "classifierName",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model240"
            }
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model63"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/sdd/template/global": {
      "get": {
        "summary": "Get the current global SDD template",
        "operationId": "getSddTemplateGlobal",
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model69"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/sdd/template/{templateName}": {
      "get": {
        "summary": "Get a template",
        "operationId": "getSddTemplateTemplatename",
        "parameters": [
          {
            "type": "string",
            "name": "templateName",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model69"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete a template",
        "operationId": "deleteSddTemplateTemplatename",
        "parameters": [
          {
            "type": "string",
            "name": "templateName",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model69"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update a template.",
        "operationId": "putSddTemplateTemplatename",
        "parameters": [
          {
            "type": "string",
            "name": "templateName",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model378"
            }
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model69"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/snowflake/handler/{handlerId}": {
      "get": {
        "summary": "Returns the handler metadata associated with the provided handler ID.",
        "operationId": "getSnowflakeHandlerHandlerid",
        "parameters": [
          {
            "type": "integer",
            "name": "handlerId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Whether or not to skip the handler cache when retrieving the handler data",
            "name": "skipCache",
            "in": "query"
          }
        ],
        "tags": [
          "snowflake"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Updates the handler metadata associated with the provided handler ID. This endpoint does not perform partial updates, but will allow the dictionary to be omitted. In this case it uses the current dictionary.",
        "operationId": "putSnowflakeHandlerHandlerid",
        "parameters": [
          {
            "type": "integer",
            "name": "handlerId",
            "in": "path",
            "required": true
          },
          {
            "x-alternatives": [
              {
                "$ref": "#/x-alt-definitions/Model67"
              },
              {
                "$ref": "#/x-alt-definitions/Model68"
              }
            ],
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model382"
            }
          }
        ],
        "tags": [
          "snowflake"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/group/{groupId}/user": {
      "get": {
        "summary": "Get group users",
        "operationId": "getBimGroupGroupidUser",
        "parameters": [
          {
            "type": "integer",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "asc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model112"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Add a new user to a group",
        "operationId": "postBimGroupGroupidUser",
        "parameters": [
          {
            "type": "integer",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model314"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/rpc/user/current": {
      "get": {
        "summary": "Gets the currently logged in user's information",
        "operationId": "getBimRpcUserCurrent",
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model46"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/blob/{blobId*}": {
      "get": {
        "summary": "Retrieve a blob",
        "operationId": "getDatasourceDatasourceidBlobBlobid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "blobId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete a blob",
        "operationId": "deleteDatasourceDatasourceidBlobBlobid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "blobId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/comments/{commentId}": {
      "get": {
        "summary": "Get a comment by id for the data source",
        "operationId": "getDatasourceDatasourceidCommentsCommentid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "commentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete a data source comment (and potentially the comment replies)",
        "operationId": "deleteDatasourceDatasourceidCommentsCommentid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "commentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/lineage/{type}": {
      "get": {
        "summary": "Get parent and child relationship records for derived data sources using a specified dataSourceId",
        "operationId": "getDatasourceDatasourceidLineageType",
        "parameters": [
          {
            "type": "string",
            "description": "Indicates what type of lineage records to return",
            "enum": [
              "parents",
              "children",
              "all"
            ],
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Target data source ID",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model115"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/comments/count": {
      "get": {
        "summary": "Count the comments for a data source",
        "operationId": "getDatasourceDatasourceidCommentsCount",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Whether to retrieve comments for columns",
            "name": "columns",
            "in": "query"
          },
          {
            "type": "array",
            "description": "The queries for which to retrieve comments",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "queries",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "If set, will retrieve only comments with the provided value for resolved",
            "name": "resolved",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/{columnName}/unmaskUsers": {
      "get": {
        "summary": "Returns the users who can unmask the given column",
        "operationId": "getDatasourceDatasourceidColumnnameUnmaskusers",
        "parameters": [
          {
            "type": "number",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "columnName",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/governance/reports/{entityType}/{reportType}": {
      "get": {
        "summary": "Generate a report for all entities of a specific type.",
        "operationId": "getGovernanceReportsEntitytypeReporttype",
        "parameters": [
          {
            "type": "string",
            "description": "The type of entity (ex. user, group, etc)",
            "name": "entityType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The type of report to generate",
            "name": "reportType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-format": {
              "isoDate": true
            },
            "name": "startDate",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "x-format": {
              "isoDate": true
            },
            "name": "endDate",
            "in": "query",
            "required": false
          },
          {
            "type": "number",
            "name": "size",
            "in": "query",
            "required": false
          },
          {
            "type": "number",
            "name": "offset",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "name": "sortField",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "name": "sortOrder",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "name": "export",
            "in": "query",
            "required": false
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string",
              "x-type": "object",
              "x-properties": {
                "attribute": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            },
            "collectionFormat": "multi",
            "name": "attributes",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "groups",
            "in": "query"
          }
        ],
        "tags": [
          "governance"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/policy/global/appliedTo/{policyId}": {
      "get": {
        "summary": "Get the number of data sources a policy is currently applied to",
        "operationId": "getPolicyGlobalAppliedtoPolicyid",
        "parameters": [
          {
            "type": "integer",
            "name": "policyId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/comments/{commentId}": {
      "get": {
        "summary": "Get a comment by id for a given project",
        "operationId": "getProjectProjectidCommentsCommentid",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "commentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model116"
            },
            "description": "Successful"
          }
        }
      },
      "delete": {
        "summary": "Delete a project comment (and potentially the comment replies)",
        "operationId": "deleteProjectProjectidCommentsCommentid",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "commentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/comments/count": {
      "get": {
        "summary": "Count the comments for a project",
        "operationId": "getProjectProjectidCommentsCount",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "description": "return counts for all the data source ids provided",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "dataSources",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "name": "resolved",
            "in": "query",
            "required": false
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model118"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/s3p/{bucket}/{dataSource}/{key*}": {
      "get": {
        "summary": "Returns a specific blob",
        "operationId": "getS3pBucketDatasourceKey",
        "parameters": [
          {
            "type": "string",
            "description": "Name of the bucket, should match the bucket name in configuration",
            "name": "bucket",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Immuta S3 Folder to search in",
            "name": "dataSource",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Key path to search for the specified file",
            "name": "key",
            "in": "path"
          }
        ],
        "tags": [
          "s3p"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/subscription/requestInfo/{modelType}/{modelId}": {
      "get": {
        "summary": "Retrieve pending request information for specified model and requesting user (or specified entity)",
        "operationId": "getSubscriptionRequestinfoModeltypeModelid",
        "parameters": [
          {
            "type": "string",
            "enum": [
              "datasource",
              "project"
            ],
            "name": "modelType",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "modelId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "profileId",
            "in": "query"
          },
          {
            "type": "integer",
            "name": "groupId",
            "in": "query"
          }
        ],
        "tags": [
          "subscription"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/audit/queries/dataSource/{dataSourceId}/mine": {
      "get": {
        "summary": "Returns the list of the current user's distinct queries for the specified Data Source.",
        "operationId": "getAuditQueriesDatasourceDatasourceidMine",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "default": "lastrun",
            "enum": [
              "timesrun",
              "lastrun",
              "query.name"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "default": "desc",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          }
        ],
        "tags": [
          "audit"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/User%20Queries"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/authenticate": {
      "get": {
        "summary": "Used to authenticate a user from a 3rd-Party Identity provider",
        "operationId": "getBimIamIamidUserAuthenticate",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Authenticates a user using their username and password and proxying it to the specified IAM service",
        "operationId": "postBimIamIamidUserAuthenticate",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model324"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model325"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{id}": {
      "get": {
        "summary": "Gets the specified user's aggregated view",
        "operationId": "getBimIamIamidUserId",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "params",
            "in": "query",
            "x-type": "object",
            "x-properties": {
              "iamid": {
                "type": "string"
              },
              "id": {
                "type": "string",
                "x-alternatives": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model46"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/comments/{parentId}/replies": {
      "get": {
        "summary": "Get all of the replies for a given comment",
        "operationId": "getDatasourceDatasourceidCommentsParentidReplies",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "parentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/queries/{queryId}/data": {
      "get": {
        "summary": "Retrieve sample data using the SQL statement from the provided saved query.",
        "operationId": "getDatasourceDatasourceidQueriesQueryidData",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "queryId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/users/{profileId}/policyInfo": {
      "get": {
        "summary": "Retrieves the visibilities, masking information and filters that the passed in user has access to in this data source.",
        "operationId": "getDatasourceDatasourceidUsersProfileidPolicyinfo",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "profileId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "If provided, use this project when evaluating the user's visibilities",
            "name": "projectId",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model126"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/users/{profileId}/visibilityReport": {
      "get": {
        "summary": "Retrieves a summary of total records, total visibilities, and visibilities a given user has access to",
        "operationId": "getDatasourceDatasourceidUsersProfileidVisibilityreport",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "profileId",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Pass true if this query is just to get info for the UI. Immuta will skip running some queries for ephemeral data sources if that is the case",
            "name": "informationOnly",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Pass true if this query is just to get info for the dictionary page. Immuta will return masking policies for nested columns.",
            "name": "includeNestedColumns",
            "in": "query"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/governance/reports/{entityType}/{entityId}/{reportType}": {
      "get": {
        "summary": "Generate a report for a specific entity",
        "operationId": "getGovernanceReportsEntitytypeEntityidReporttype",
        "parameters": [
          {
            "type": "string",
            "description": "The type of entity (ex. user, group, etc)",
            "name": "entityType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The id (or ids) of the entity to use when generating the report",
            "name": "entityId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The type of report to generate",
            "name": "reportType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-format": {
              "isoDate": true
            },
            "name": "startDate",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "x-format": {
              "isoDate": true
            },
            "name": "endDate",
            "in": "query",
            "required": false
          },
          {
            "type": "number",
            "name": "size",
            "in": "query",
            "required": false
          },
          {
            "type": "number",
            "name": "offset",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "name": "sortField",
            "in": "query",
            "required": false
          },
          {
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "name": "sortOrder",
            "in": "query",
            "required": false
          },
          {
            "type": "boolean",
            "name": "export",
            "in": "query",
            "required": false
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string",
              "x-type": "object",
              "x-properties": {
                "attribute": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              }
            },
            "collectionFormat": "multi",
            "name": "attributes",
            "in": "query"
          },
          {
            "type": "array",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "groups",
            "in": "query"
          }
        ],
        "tags": [
          "governance"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/comments/{parentId}/replies": {
      "get": {
        "summary": "Get all of the replies for a given comment",
        "operationId": "getProjectProjectidCommentsParentidReplies",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "parentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model127"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{userid}/apikeys": {
      "get": {
        "summary": "Get metadata for all of the user's API Keys",
        "operationId": "getBimIamIamidUserUseridApikeys",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model130"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{userid}/profile": {
      "get": {
        "summary": "Gets the specified user's profile",
        "operationId": "getBimIamIamidUserUseridProfile",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/profile"
            },
            "description": "Successful"
          }
        }
      },
      "post": {
        "summary": "Update's a specified user's profile",
        "operationId": "postBimIamIamidUserUseridProfile",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model335"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/profile"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update's a specified user's profile",
        "operationId": "putBimIamIamidUserUseridProfile",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model335"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/profile"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{userid}/groups": {
      "get": {
        "summary": "Gets the specified user's list of groups",
        "operationId": "getBimIamIamidUserUseridGroups",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model132"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/queries/debug/{auditrecordId}/{projectId}": {
      "get": {
        "summary": "Returns debug info about the query, can only be run as owner",
        "operationId": "getDatasourceDatasourceidQueriesDebugAuditrecordidProjectid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "auditrecordId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "projectId",
            "in": "path"
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/searchFilter/{searchFilterName}": {
      "delete": {
        "summary": "Deletes a search filter by name",
        "operationId": "deleteSearchfilterSearchfiltername",
        "parameters": [
          {
            "type": "string",
            "name": "searchFilterName",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "searchFilter"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model31"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/tag/{tag}": {
      "delete": {
        "summary": "Delete a tag",
        "operationId": "deleteTagTag",
        "parameters": [
          {
            "type": "string",
            "name": "tag",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "True if you want to delete the entire hierarchy",
            "name": "deleteHierarchy",
            "in": "query"
          }
        ],
        "tags": [
          "tag"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/admin/license/{licenseId}": {
      "delete": {
        "summary": "Deletes a license key",
        "operationId": "deleteAdminLicenseLicenseid",
        "parameters": [
          {
            "type": "integer",
            "name": "licenseId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "admin"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model138"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/apikey/{keyid}": {
      "delete": {
        "summary": "Delete an API key, all auth tokens issued using that API key, and generate a new API key.",
        "operationId": "deleteBimApikeyKeyid",
        "parameters": [
          {
            "type": "integer",
            "name": "keyid",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model139"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/unsubscribe": {
      "delete": {
        "summary": "Unsubscribe from a datasource",
        "operationId": "deleteDatasourceDatasourceidUnsubscribe",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/unsubscribe": {
      "delete": {
        "summary": "Unsubscribe from a project",
        "operationId": "deleteProjectProjectidUnsubscribe",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/featureStore/account/{sqlUsername}": {
      "delete": {
        "summary": "Delete a SQL account",
        "operationId": "deleteDatasourceFeaturestoreAccountSqlusername",
        "parameters": [
          {
            "type": "string",
            "name": "sqlUsername",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/tag/{modelType}/{modelId}/{tag}": {
      "delete": {
        "summary": "Delete tags from a particular model",
        "operationId": "deleteTagModeltypeModelidTag",
        "parameters": [
          {
            "type": "string",
            "enum": [
              "project",
              "datasource",
              "schema-evolution",
              "query",
              "column",
              "blob",
              "project-datasource",
              "global-policy",
              "global-policy-approval-request",
              "tag",
              "bulk-job",
              "fingerprint",
              "policy",
              "governance",
              "purpose",
              "user",
              "group",
              "framework"
            ],
            "name": "modelType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "modelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "tag",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "tag"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/group/{groupId}/user/{groupuserid}": {
      "delete": {
        "summary": "Remove a user from a group",
        "operationId": "deleteBimGroupGroupidUserGroupuserid",
        "parameters": [
          {
            "type": "integer",
            "name": "groupId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "groupuserid",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{userid}": {
      "delete": {
        "summary": "Deletes the specified BIM user",
        "operationId": "deleteBimIamIamidUserUserid",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Updates the specified user's aggregated view",
        "operationId": "putBimIamIamidUserUserid",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/featureStore/accounts/{targetProfileId}/{targetUserId}": {
      "delete": {
        "summary": "Delete all SQL accounts for user",
        "operationId": "deleteDatasourceFeaturestoreAccountsTargetprofileidTargetuserid",
        "parameters": [
          {
            "type": "integer",
            "name": "targetProfileId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "targetUserId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{userid}/permissions/{permission}": {
      "delete": {
        "summary": "Removes the specified user's permission",
        "operationId": "deleteBimIamIamidUserUseridPermissionsPermission",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "permission",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/{modelType}/{modelId}/authorizations/{key}/{value}": {
      "delete": {
        "summary": "Adds or removes an authorization key or key-value pair for the specified group or user",
        "operationId": "deleteBimIamIamidModeltypeModelidAuthorizationsKeyValue",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "modelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "enum": [
              "group",
              "user"
            ],
            "name": "modelType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "value",
            "in": "path"
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model153",
              "x-alternatives": [
                {
                  "$ref": "#/x-alt-definitions/Model8"
                },
                {
                  "$ref": "#/x-alt-definitions/Model9"
                }
              ]
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Adds or removes an authorization key or key-value pair for the specified group or user",
        "operationId": "putBimIamIamidModeltypeModelidAuthorizationsKeyValue",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "modelId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "enum": [
              "group",
              "user"
            ],
            "name": "modelType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "value",
            "in": "path"
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model153",
              "x-alternatives": [
                {
                  "$ref": "#/x-alt-definitions/Model8"
                },
                {
                  "$ref": "#/x-alt-definitions/Model9"
                }
              ]
            },
            "description": "Successful"
          }
        }
      }
    },
    "/audit/createRecord": {
      "post": {
        "summary": "Creates a new audit record",
        "operationId": "postAuditCreaterecord",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model172"
            }
          }
        ],
        "tags": [
          "audit"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/apikey": {
      "post": {
        "summary": "Authenticate the user and create their api key",
        "operationId": "postBimApikey",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model173"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model174"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/syncUsers": {
      "post": {
        "summary": "Syncs Users for external IAM",
        "operationId": "postBimSyncusers",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model176"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/token": {
      "post": {
        "summary": "Gets information for a given token should it exist",
        "operationId": "postBimToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model177"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/subscribe": {
      "post": {
        "summary": "Subscribe to a datasource",
        "operationId": "postDatasourceSubscribe",
        "parameters": [
          {
            "type": "array",
            "minItems": 1,
            "x-constraint": {
              "unique": true,
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "dataSourceId",
            "in": "query"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model182"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/databricks/handler": {
      "post": {
        "summary": "Saves the provided connection information as a data source for user querying.",
        "operationId": "postDatabricksHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model199"
            }
          }
        ],
        "tags": [
          "databricks"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/jobs/statuses": {
      "post": {
        "summary": "Get the status and output of the provided jobs",
        "operationId": "postJobsStatuses",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model205"
            }
          }
        ],
        "tags": [
          "jobs"
        ],
        "responses": {
          "200": {
            "description": "Response schema for POST /jobs/statuses",
            "schema": {
              "$ref": "#/definitions/Model206"
            }
          }
        }
      }
    },
    "/policy/search": {
      "post": {
        "summary": "Search all policies",
        "operationId": "postPolicySearch",
        "parameters": [
          {
            "type": "string",
            "enum": [
              "data",
              "subscription"
            ],
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "global",
              "local"
            ],
            "name": "scope",
            "in": "query"
          },
          {
            "type": "integer",
            "minimum": 1,
            "name": "size",
            "in": "query"
          },
          {
            "type": "integer",
            "minimum": 0,
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "name",
              "createdBy",
              "createdAt",
              "state",
              "isNotApplied",
              "scope"
            ],
            "name": "sortField",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "name": "sortOrder",
            "in": "query"
          },
          {
            "type": "string",
            "name": "searchText",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "countOnly",
            "in": "query"
          },
          {
            "type": "string",
            "enum": [
              "similarPolicies",
              "impactedUsers",
              "impactedDataSources"
            ],
            "name": "mode",
            "in": "query"
          },
          {
            "type": "array",
            "description": "Global policy IDs to include",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "globalPolicyIds",
            "in": "query"
          },
          {
            "type": "array",
            "description": "Global policy IDs to exclude",
            "x-constraint": {
              "single": true
            },
            "items": {
              "type": "integer"
            },
            "collectionFormat": "multi",
            "name": "excludedPolicies",
            "in": "query"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model218"
            }
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model229"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/policy/testPolicy": {
      "post": {
        "summary": "Given a user's attributes and data visibilities, determines what visibilities the user has access to and what fields should be masked",
        "operationId": "postPolicyTestpolicy",
        "parameters": [
          {
            "type": "string",
            "description": "The IAM the user authenticated with and thus the IAM providing the profile and authorizations",
            "name": "x-profile-iamid",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "The API key required to communicate with this handler",
            "name": "x-access-key",
            "in": "header"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model235"
            }
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model239"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/sdd/run": {
      "post": {
        "summary": "Run Sensitive Data Discovery on the provided datasources",
        "operationId": "postSddRun",
        "parameters": [
          {
            "x-alternatives": [
              {
                "$ref": "#/x-alt-definitions/Model20"
              },
              {
                "$ref": "#/x-alt-definitions/Model21"
              }
            ],
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model241"
            }
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model242",
              "x-alternatives": [
                {
                  "$ref": "#/x-alt-definitions/Model22"
                },
                {
                  "$ref": "#/x-alt-definitions/Model23"
                }
              ]
            },
            "description": "Successful"
          }
        }
      }
    },
    "/snowflake/handler": {
      "post": {
        "summary": "Saves the provided connection information as a data source for user querying.",
        "operationId": "postSnowflakeHandler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model252"
            }
          }
        ],
        "tags": [
          "snowflake"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/subscription/approve": {
      "post": {
        "summary": "Approve specified access requests",
        "operationId": "postSubscriptionApprove",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model254"
            }
          }
        ],
        "tags": [
          "subscription"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model258"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/subscription/deny": {
      "post": {
        "summary": "Deny specified access requests",
        "operationId": "postSubscriptionDeny",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model261"
            }
          }
        ],
        "tags": [
          "subscription"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model262"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/tag/refresh": {
      "post": {
        "summary": "Refresh external tags",
        "operationId": "postTagRefresh",
        "tags": [
          "tag"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/apikey/authenticate": {
      "post": {
        "summary": "Authenticate a user using an API key",
        "operationId": "postBimApikeyAuthenticate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model263"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model264"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/apikey/impersonate": {
      "post": {
        "summary": "Impersonate another user using an API key",
        "operationId": "postBimApikeyImpersonate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model265"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model266"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/featureStore/temporary": {
      "post": {
        "summary": "Create a temporary SQL account",
        "operationId": "postDatasourceFeaturestoreTemporary",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model267"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model268"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/tasks/approve": {
      "post": {
        "summary": "Approve the specified requests",
        "operationId": "postDatasourceTasksApprove",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model269"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/reverseMask": {
      "post": {
        "summary": "Makes a request for values to be unmasked",
        "operationId": "postDatasourceDatasourceidReversemask",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model271"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/blobs": {
      "post": {
        "summary": "Save blob metadata to Immuta",
        "operationId": "postDatasourceDatasourceidBlobs",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model280"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/frameworks/{frameworkId}/clone": {
      "post": {
        "summary": "Clone a framework",
        "operationId": "postFrameworksFrameworkidClone",
        "parameters": [
          {
            "type": "string",
            "x-format": {
              "guid": true
            },
            "name": "frameworkId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "frameworks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model17"
            },
            "description": "Successful"
          },
          "404": {
            "description": "Framework could not be found"
          }
        }
      }
    },
    "/iam/{iamId}/sync": {
      "post": {
        "operationId": "postIamIamidSync",
        "parameters": [
          {
            "type": "string",
            "name": "iamId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model287"
            }
          }
        ],
        "tags": [
          "iam"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/lineage/ingest/snowflake": {
      "post": {
        "summary": "Ingest lineage records from Snowflake",
        "operationId": "postLineageIngestSnowflake",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model288"
            }
          }
        ],
        "tags": [
          "lineage"
        ],
        "responses": {
          "200": {
            "description": "An ingest job already exists and has not finished.",
            "schema": {
              "type": "string"
            }
          },
          "202": {
            "schema": {
              "$ref": "#/definitions/Model289"
            },
            "description": "An ingest job was successfully created."
          }
        }
      }
    },
    "/policy/global/applyPolicy": {
      "post": {
        "summary": "Apply a global policy to a data source",
        "operationId": "postPolicyGlobalApplypolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model290"
            }
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/current/{projectId}": {
      "post": {
        "summary": "Set the current project id the current user is acting under",
        "operationId": "postProjectCurrentProjectid",
        "parameters": [
          {
            "type": "integer",
            "minimum": 1,
            "x-alternatives": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "string",
                "enum": [
                  "null"
                ]
              }
            ],
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/checkEqualizedAuths": {
      "post": {
        "summary": "Check that all members meet the provided (or current) equalized entitlements",
        "operationId": "postProjectProjectidCheckequalizedauths",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model305"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model306"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/subscription/approve/bulk": {
      "post": {
        "summary": "Bulk approve access requests. If requestIds are provided, jobs will only be created for those ids. Otherwise, entity id/type will be used to find and create jobs for all approval requests.",
        "operationId": "postSubscriptionApproveBulk",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model308"
            }
          }
        ],
        "tags": [
          "subscription"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/subscription/deny/bulk": {
      "post": {
        "summary": "Bulk deny access requests. If requestIds are provided, jobs will only be created for those ids. Otherwise, entity id/type will be used to find and create jobs for all denial requests.",
        "operationId": "postSubscriptionDenyBulk",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model310"
            }
          }
        ],
        "tags": [
          "subscription"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/tag/{modelType}/{modelId}": {
      "post": {
        "summary": "Add tags to a particular model",
        "operationId": "postTagModeltypeModelid",
        "parameters": [
          {
            "type": "string",
            "enum": [
              "project",
              "datasource",
              "schema-evolution",
              "query",
              "column",
              "blob",
              "project-datasource",
              "global-policy",
              "global-policy-approval-request",
              "tag",
              "bulk-job",
              "fingerprint",
              "policy",
              "governance",
              "purpose",
              "user",
              "group",
              "framework"
            ],
            "name": "modelType",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "modelId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model312"
            }
          }
        ],
        "tags": [
          "tag"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model313"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/bim/user": {
      "post": {
        "summary": "Creates a new BIM user",
        "operationId": "postBimIamBimUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model316"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/queries/debug": {
      "post": {
        "summary": "Makes a request for an owner of the datasource to receive debug info about the query",
        "operationId": "postDatasourceDatasourceidQueriesDebug",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model317"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/policy/handler/{dataSourceId}/user": {
      "post": {
        "summary": "Given a user's attributes and data visibilities, determines what visibilities the user has access to and what fields should be masked",
        "operationId": "postPolicyHandlerDatasourceidUser",
        "parameters": [
          {
            "type": "string",
            "description": "The IAM the user authenticated with and thus the IAM providing the profile and authorizations",
            "name": "x-profile-iamid",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "The API key required to communicate with this handler",
            "name": "x-access-key",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model320"
            }
          }
        ],
        "tags": [
          "policy"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model321"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/sdd/template/{templateName}/clone": {
      "post": {
        "summary": "Clone a template",
        "operationId": "postSddTemplateTemplatenameClone",
        "parameters": [
          {
            "type": "string",
            "name": "templateName",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model322"
            }
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model69"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/webhooks/history/retry/{id}": {
      "post": {
        "summary": "Retry a webhook request",
        "operationId": "postWebhooksHistoryRetryId",
        "parameters": [
          {
            "type": "integer",
            "description": "Id of history record to retry",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "webhooks"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model323"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/comments/{commentId}/resolve": {
      "post": {
        "summary": "Resolve a comment for a data source",
        "operationId": "postDatasourceDatasourceidCommentsCommentidResolve",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "commentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/comments/{parentId}/reply": {
      "post": {
        "summary": "Reply to a data source comment",
        "operationId": "postDatasourceDatasourceidCommentsParentidReply",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "parentId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model326"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model327"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/comments/{parentId}/reply": {
      "post": {
        "summary": "Reply to a project comment",
        "operationId": "postProjectProjectidCommentsParentidReply",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "parentId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model328"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model329"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/members/{subscriptionId}/acknowledge": {
      "post": {
        "summary": "Acknowledge all the restrictions on this project",
        "operationId": "postProjectProjectidMembersSubscriptionidAcknowledge",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model330"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model332"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/comments/{commentId}/resolve": {
      "post": {
        "summary": "Resolve a comment for a project",
        "operationId": "postProjectProjectidCommentsCommentidResolve",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "commentId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/bim/user/{userid}/clone": {
      "post": {
        "summary": "Clones the provided user to create multiple additional user accounts.",
        "operationId": "postBimIamBimUserUseridClone",
        "parameters": [
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model333"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/authenticate/callback": {
      "post": {
        "summary": "Validate user authentication after callback by external SAML Provider.",
        "operationId": "postBimIamIamidUserAuthenticateCallback",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model334"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{userid}/authorizations": {
      "post": {
        "summary": "Update's the specified user's authorizations",
        "operationId": "postBimIamIamidUserUseridAuthorizations",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "name": "string",
            "in": "body"
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model336"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update's the specified user's authorizations",
        "operationId": "putBimIamIamidUserUseridAuthorizations",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "name": "string",
            "in": "body"
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model336"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/group/{groupid}/authorizations": {
      "post": {
        "summary": "Update's the specified group's authorizations",
        "operationId": "postBimIamIamidGroupGroupidAuthorizations",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "groupid",
            "in": "path",
            "required": true
          },
          {
            "name": "string",
            "in": "body"
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model153",
              "x-alternatives": [
                {
                  "$ref": "#/x-alt-definitions/Model8"
                },
                {
                  "$ref": "#/x-alt-definitions/Model9"
                }
              ]
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update's the specified group's authorizations",
        "operationId": "putBimIamIamidGroupGroupidAuthorizations",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "groupid",
            "in": "path",
            "required": true
          },
          {
            "name": "string",
            "in": "body"
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model153",
              "x-alternatives": [
                {
                  "$ref": "#/x-alt-definitions/Model8"
                },
                {
                  "$ref": "#/x-alt-definitions/Model9"
                }
              ]
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{userid}/permissions": {
      "post": {
        "summary": "Update's the specified user's permissions",
        "operationId": "postBimIamIamidUserUseridPermissions",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model337"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      },
      "put": {
        "summary": "Update's the specified user's permissions",
        "operationId": "putBimIamIamidUserUseridPermissions",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model390"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/detectRemoteChanges": {
      "put": {
        "summary": "Trigger the schema detection job for the specified detection group, or all groups if no id is given",
        "operationId": "putDatasourceDetectremotechanges",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model340"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model343",
              "x-alternatives": [
                {
                  "$ref": "#/x-alt-definitions/Model32"
                },
                {
                  "$ref": "#/x-alt-definitions/Model33"
                }
              ]
            },
            "description": "Successful"
          }
        }
      }
    },
    "/databricks/bulk": {
      "put": {
        "summary": "Updates the handler metadata associated with the provided connection string.",
        "operationId": "putDatabricksBulk",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model349"
            }
          }
        ],
        "tags": [
          "databricks"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/snowflake/bulk": {
      "put": {
        "summary": "Updates the handler metadata associated with the provided connection string.",
        "operationId": "putSnowflakeBulk",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model356"
            }
          }
        ],
        "tags": [
          "snowflake"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/bulk/{type}": {
      "put": {
        "summary": "Update data sources",
        "operationId": "putDatasourceBulkType",
        "parameters": [
          {
            "type": "string",
            "name": "type",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model359"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/featureStore/password": {
      "put": {
        "summary": "Modify SQL account password",
        "operationId": "putDatasourceFeaturestorePassword",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model360"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/overrideHost": {
      "put": {
        "summary": "Apply a hostname override to the data source",
        "operationId": "putDatasourceDatasourceidOverridehost",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model361"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/sdd/template/apply": {
      "put": {
        "summary": "Apply an SDD template to a set of data sources",
        "operationId": "putSddTemplateApply",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model376"
            }
          }
        ],
        "tags": [
          "sdd"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model377"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/access/{id}": {
      "put": {
        "summary": "Change user status for a specific datasource",
        "operationId": "putDatasourceDatasourceidAccessId",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model383"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/dataSource/{dataSourceId}/queries/{queryId}": {
      "put": {
        "summary": "Update the query object for the provided query ID.",
        "operationId": "putDatasourceDatasourceidQueriesQueryid",
        "parameters": [
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "queryId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model384"
            }
          }
        ],
        "tags": [
          "dataSource"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/databricks/handler/{handlerId}/triggerHighCardinalityJob": {
      "put": {
        "summary": "Recalculates the high cardinality column for the provided handler ID.",
        "operationId": "putDatabricksHandlerHandleridTriggerhighcardinalityjob",
        "parameters": [
          {
            "type": "integer",
            "name": "handlerId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "databricks"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/members/{subscriptionId}": {
      "put": {
        "summary": "Update a member of the project",
        "operationId": "putProjectProjectidMembersSubscriptionid",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model385"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model386"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/project/{projectId}/dataSources/{dataSourceId}": {
      "put": {
        "summary": "Updates the reason for adding a data source to a project",
        "operationId": "putProjectProjectidDatasourcesDatasourceid",
        "parameters": [
          {
            "type": "integer",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "name": "dataSourceId",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model387"
            }
          }
        ],
        "tags": [
          "project"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/snowflake/handler/{handlerId}/triggerHighCardinalityJob": {
      "put": {
        "summary": "Recalculates the high cardinality column for the provided handler ID.",
        "operationId": "putSnowflakeHandlerHandleridTriggerhighcardinalityjob",
        "parameters": [
          {
            "type": "integer",
            "name": "handlerId",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "snowflake"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{userid}/password": {
      "put": {
        "summary": "Update's the specified user's password",
        "operationId": "putBimIamIamidUserUseridPassword",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Model388"
            }
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Model389"
            },
            "description": "Successful"
          }
        }
      }
    },
    "/bim/iam/{iamid}/user/{userid}/disable/{disable}": {
      "put": {
        "summary": "Disables / enables the specified BIM user",
        "operationId": "putBimIamIamidUserUseridDisableDisable",
        "parameters": [
          {
            "type": "string",
            "name": "iamid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "userid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "disable",
            "in": "path",
            "required": true
          }
        ],
        "tags": [
          "bim"
        ],
        "responses": {
          "default": {
            "schema": {
              "type": "string"
            },
            "description": "Successful"
          }
        }
      }
    }
  },
  "definitions": {
    "actions": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "metadata": {
      "type": "object"
    },
    "actionBy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "targetUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "targetGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "Model1": {
      "type": "object",
      "properties": {
        "modelType": {
          "type": "string"
        },
        "modelId": {
          "type": "string"
        },
        "notificationType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "additionalText": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "read": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "actionBy": {
          "$ref": "#/definitions/actionBy"
        },
        "targetUser": {
          "$ref": "#/definitions/targetUser"
        },
        "targetGroup": {
          "$ref": "#/definitions/targetGroup"
        },
        "subscriptionState": {
          "type": "string",
          "enum": [
            "denied",
            "subscribed",
            "expert",
            "owner",
            "ingest"
          ]
        }
      }
    },
    "activities": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model1"
      }
    },
    "Model2": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "next": {
          "type": "string"
        },
        "unread": {
          "type": "integer"
        },
        "actions": {
          "$ref": "#/definitions/actions"
        },
        "activities": {
          "$ref": "#/definitions/activities"
        }
      }
    },
    "Hit": {
      "type": "object",
      "properties": {
        "dateTime": {
          "type": "integer"
        },
        "dataSourceName": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "recordType": {
          "type": "string"
        },
        "blobId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "profileId": {
          "type": "integer"
        },
        "purposeIds": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "failureReason": {
          "type": "string"
        },
        "warning": {
          "type": "boolean",
          "default": false
        },
        "id": {
          "type": "string"
        }
      }
    },
    "hits": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Hit"
      }
    },
    "Facet": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "datasources": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Facet"
      }
    },
    "Model3": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "projects": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model3"
      }
    },
    "Model4": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "recordTypes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model4"
      }
    },
    "Model5": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model5"
      }
    },
    "Model6": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "outcomes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model6"
      }
    },
    "Facets": {
      "type": "object",
      "properties": {
        "datasources": {
          "$ref": "#/definitions/datasources"
        },
        "projects": {
          "$ref": "#/definitions/projects"
        },
        "recordTypes": {
          "$ref": "#/definitions/recordTypes"
        },
        "users": {
          "$ref": "#/definitions/users"
        },
        "outcomes": {
          "$ref": "#/definitions/outcomes"
        }
      }
    },
    "Audit Search Results": {
      "type": "object",
      "properties": {
        "hits": {
          "$ref": "#/definitions/hits"
        },
        "facets": {
          "$ref": "#/definitions/Facets"
        },
        "minDate": {
          "type": "string",
          "format": "date"
        },
        "maxDate": {
          "type": "string",
          "format": "date"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "Model7": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "count": {
          "type": "number"
        }
      }
    },
    "values": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model7"
      }
    },
    "Model8": {
      "type": "object",
      "properties": {
        "values": {
          "$ref": "#/definitions/values"
        }
      }
    },
    "Model9": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/metadata",
        "x-alternatives": [
          {
            "$ref": "#/x-alt-definitions/key"
          },
          {
            "$ref": "#/x-alt-definitions/pfx"
          }
        ]
      }
    },
    "Model10": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "tags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model10"
      }
    },
    "blobHandlerTypes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model10"
      }
    },
    "statuses": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model10"
      }
    },
    "editable": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model10"
      }
    },
    "facets": {
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/definitions/tags"
        },
        "blobHandlerTypes": {
          "$ref": "#/definitions/blobHandlerTypes"
        },
        "statuses": {
          "$ref": "#/definitions/statuses"
        },
        "editable": {
          "$ref": "#/definitions/editable"
        }
      }
    },
    "Model11": {
      "type": "object",
      "properties": {
        "hits": {
          "$ref": "#/definitions/Model9"
        },
        "facets": {
          "$ref": "#/definitions/facets"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "Model12": {
      "type": "object",
      "properties": {
        "dimension": {
          "type": "string"
        },
        "sensitivity": {
          "type": "number"
        }
      },
      "required": [
        "dimension",
        "sensitivity"
      ]
    },
    "sensitivities": {
      "type": "array",
      "default": [],
      "items": {
        "$ref": "#/definitions/Model12"
      }
    },
    "Model13": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "sensitivities": {
          "$ref": "#/definitions/sensitivities"
        }
      },
      "required": [
        "name",
        "source"
      ]
    },
    "Model14": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model13"
      }
    },
    "classificationTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "source"
      ]
    },
    "Model15": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "source"
      ]
    },
    "columnTags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model15"
      }
    },
    "neighborColumnTags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model15"
      }
    },
    "tableTags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model15"
      }
    },
    "Model16": {
      "type": "object",
      "properties": {
        "classificationTag": {
          "$ref": "#/definitions/classificationTag"
        },
        "columnTags": {
          "$ref": "#/definitions/columnTags"
        },
        "neighborColumnTags": {
          "$ref": "#/definitions/neighborColumnTags"
        },
        "tableTags": {
          "$ref": "#/definitions/tableTags"
        }
      },
      "required": [
        "classificationTag",
        "columnTags",
        "neighborColumnTags",
        "tableTags"
      ]
    },
    "rules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model16"
      }
    },
    "Model17": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "version": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "active": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "number"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Model14"
        },
        "rules": {
          "$ref": "#/definitions/rules"
        }
      },
      "required": [
        "id",
        "version",
        "active",
        "createdBy",
        "createdAt",
        "name",
        "shortName",
        "description",
        "tags",
        "rules"
      ]
    },
    "frameworks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model17"
      }
    },
    "Model18": {
      "type": "object",
      "properties": {
        "frameworks": {
          "$ref": "#/definitions/frameworks"
        }
      }
    },
    "Model19": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-convert": {
            "trim": true
          }
        },
        "source": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model20": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model19"
      }
    },
    "subpurposes": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "policyMetadata": {
      "type": "object",
      "properties": {
        "kAnonNoiseReduction": {
          "type": "string",
          "enum": [
            "None",
            "Very Small",
            "Small",
            "Medium",
            "Large"
          ]
        },
        "allowUnmaskedKAnon": {
          "type": "boolean"
        },
        "adjustmentCertificationText": {
          "type": "string"
        },
        "isHED": {
          "type": "boolean"
        },
        "adjustmentRequiresDataSourceTag": {
          "type": "string"
        }
      }
    },
    "Model21": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "x-convert": {
            "trim": true
          }
        },
        "acknowledgement": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "addedByProfile": {
          "type": "integer"
        },
        "displayAcknowledgement": {
          "type": "boolean",
          "default": true
        },
        "deleted": {
          "type": "boolean",
          "default": false
        },
        "subpurposes": {
          "$ref": "#/definitions/subpurposes"
        },
        "policyMetadata": {
          "$ref": "#/definitions/policyMetadata"
        },
        "staged": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "name"
      ]
    },
    "purposes": {
      "type": "array",
      "x-constraint": {
        "unique": "name",
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model21"
      }
    },
    "stagedPurposes": {
      "type": "array",
      "x-constraint": {
        "unique": "name",
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model21"
      }
    },
    "warehouses": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "snowflake": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "schema": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "warehouses": {
          "$ref": "#/definitions/warehouses"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "iam": {
          "type": "string"
        }
      }
    },
    "Model22": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "groups"
          ]
        },
        "group": {
          "$ref": "#/definitions/group"
        },
        "field": {
          "type": "string",
          "x-alternatives": [
            {
              "type": "string"
            },
            {
              "$ref": "#/x-alt-definitions/field"
            }
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "conditions": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/Model22"
      }
    },
    "exceptions": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": [
            "or",
            "and"
          ]
        },
        "conditions": {
          "$ref": "#/definitions/conditions"
        }
      },
      "required": [
        "operator",
        "conditions"
      ]
    },
    "Model23": {
      "type": "object",
      "properties": {
        "specificApproverRequired": {
          "type": "boolean"
        },
        "requiredPermission": {
          "type": "string"
        },
        "ownerModelId": {
          "type": "integer",
          "description": "Model id when approval must come from another model's owner (derived subscriptions only)"
        },
        "ownerModelName": {
          "type": "string",
          "description": "Model name when approval must come from another model's owner (derived subscriptions only)"
        }
      },
      "required": [
        "specificApproverRequired",
        "requiredPermission"
      ]
    },
    "approvals": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model23"
      }
    },
    "subscriptionPolicy": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "default": "subscription",
          "enum": [
            "subscription"
          ]
        },
        "shareResponsibility": {
          "type": "boolean"
        },
        "subscriptionType": {
          "type": "string",
          "enum": [
            "automatic",
            "approval",
            "policy",
            "manual"
          ]
        },
        "allowDiscovery": {
          "type": "boolean"
        },
        "automaticSubscription": {
          "type": "boolean",
          "description": "If true, users will automatically be added to the model when subscription conditions are met"
        },
        "advanced": {
          "type": "string",
          "minLength": 1
        },
        "exceptions": {
          "$ref": "#/definitions/exceptions"
        },
        "approvals": {
          "$ref": "#/definitions/approvals"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Model24": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": [
            "or",
            "and"
          ]
        },
        "conditions": {
          "$ref": "#/definitions/conditions"
        }
      },
      "required": [
        "operator",
        "conditions"
      ]
    },
    "authsForPolicyHandler": {
      "type": "object"
    },
    "equalization": {
      "type": "object",
      "properties": {
        "recommended": {
          "$ref": "#/definitions/Model24",
          "optional": [
            "recommended"
          ],
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/recommended"
            },
            {
              "type": "string",
              "enum": [
                "project_equalization_no_min_auths"
              ]
            }
          ]
        },
        "authsForPolicyHandler": {
          "$ref": "#/definitions/authsForPolicyHandler"
        },
        "validationFrequency": {
          "type": "integer"
        },
        "setNone": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model25": {
      "type": "object",
      "properties": {
        "keyName": {
          "type": "string",
          "description": "The connection string key describing this file"
        },
        "filename": {
          "type": "string",
          "description": "The filename, which is a hash of its contents"
        },
        "content": {
          "type": "string",
          "description": "The content of the uploaded file."
        },
        "userFilename": {
          "type": "string",
          "description": "The original name of this user-provided file"
        }
      }
    },
    "userFiles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model25"
      }
    },
    "hive": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "userFiles": {
          "$ref": "#/definitions/userFiles"
        }
      },
      "required": [
        "hostname",
        "port",
        "database"
      ]
    },
    "Model26": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "items": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model26"
      }
    },
    "configuration": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "single",
            "auto"
          ]
        },
        "items": {
          "$ref": "#/definitions/items"
        }
      },
      "required": [
        "type"
      ]
    },
    "Model27": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "hive": {
          "$ref": "#/definitions/hive"
        },
        "name": {
          "type": "string"
        },
        "impala": {
          "$ref": "#/definitions/hive"
        },
        "db": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "directoryAlias": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "configuration": {
          "$ref": "#/definitions/configuration"
        }
      },
      "required": [
        "db",
        "enabled"
      ]
    },
    "Model28": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "projectKey": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-convert": {
            "trim": true
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Model20"
        },
        "purposes": {
          "$ref": "#/definitions/purposes"
        },
        "stagedPurposes": {
          "$ref": "#/definitions/stagedPurposes"
        },
        "deleted": {
          "type": "boolean"
        },
        "snowflake": {
          "$ref": "#/definitions/snowflake"
        },
        "allowMaskedJoins": {
          "type": "boolean"
        },
        "subscriptionType": {
          "type": "string"
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/subscriptionPolicy"
        },
        "equalization": {
          "$ref": "#/definitions/equalization"
        },
        "workspace": {
          "$ref": "#/definitions/Model27",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/workspace"
            },
            {
              "type": "integer"
            }
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "User",
            "Schema"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "acknowledgeRequired": {
          "type": "boolean"
        },
        "subscriptionId": {
          "type": "integer"
        },
        "subscribedAsUser": {
          "type": "boolean"
        },
        "subscriptionStatus": {
          "type": "string",
          "enum": [
            "owner",
            "not_subscribed",
            "pending",
            "subscribed",
            "expert"
          ]
        },
        "filterId": {
          "type": "integer"
        },
        "isEqualized": {
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "status"
      ]
    },
    "Model29": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model28"
      }
    },
    "Model30": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "hits": {
          "$ref": "#/definitions/Model29"
        },
        "facets": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        }
      }
    },
    "tag": {
      "type": "array",
      "description": "List of tags to filter by",
      "items": {
        "type": "string"
      }
    },
    "column": {
      "type": "array",
      "description": "List of columns to filter by",
      "items": {
        "type": "string"
      }
    },
    "connectionString": {
      "type": "array",
      "description": "List of connection strings to filter by",
      "items": {
        "type": "string"
      }
    },
    "schema": {
      "type": "array",
      "description": "List of schemas strings to filter by",
      "items": {
        "type": "string"
      }
    },
    "filter": {
      "type": "object",
      "properties": {
        "searchText": {
          "type": "string",
          "description": "Base search string for datasources/projects"
        },
        "tag": {
          "$ref": "#/definitions/tag"
        },
        "column": {
          "$ref": "#/definitions/column"
        },
        "connectionString": {
          "$ref": "#/definitions/connectionString"
        },
        "schema": {
          "$ref": "#/definitions/schema"
        },
        "type": {
          "type": "string",
          "description": "Type of models to search on"
        }
      }
    },
    "Model31": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name to be used for the search filter"
        },
        "filter": {
          "$ref": "#/definitions/filter"
        }
      }
    },
    "Model32": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model31"
      }
    },
    "Model33": {
      "type": "object",
      "properties": {
        "values": {
          "$ref": "#/definitions/Model32"
        }
      }
    },
    "Model34": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "maxLength": 500
        },
        "displayName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The context under which this tag was applied.",
          "enum": [
            "sdd",
            "catalog",
            "schemaEvolution",
            "lineage",
            "manual",
            "framework"
          ]
        },
        "systemCreated": {
          "type": "boolean"
        },
        "addedBy": {
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        },
        "hasLeafNodes": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model35": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model34"
      }
    },
    "Model36": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "global": {
          "type": "boolean"
        },
        "actionType": {
          "type": "string"
        },
        "createdBy": {
          "type": "integer"
        },
        "internalPlugin": {
          "type": "boolean"
        },
        "secret": {
          "type": "string"
        },
        "activityId": {
          "type": "number"
        },
        "notificationType": {
          "type": "string"
        }
      }
    },
    "Model37": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model36"
      }
    },
    "Model38": {
      "type": "object",
      "properties": {
        "unread": {
          "type": "boolean"
        }
      }
    },
    "FPE": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "nativeSqlTeradata": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ]
    },
    "features": {
      "type": "object",
      "properties": {
        "FPE": {
          "$ref": "#/definitions/FPE"
        },
        "nativeSqlTeradata": {
          "$ref": "#/definitions/nativeSqlTeradata"
        }
      }
    },
    "handlers": {
      "type": "object",
      "properties": {
        "Azure Synapse Analytics": {
          "type": "boolean"
        },
        "Amazon Athena": {
          "type": "boolean"
        },
        "BlackLynx": {
          "type": "boolean"
        },
        "Databricks": {
          "type": "boolean"
        },
        "DB2": {
          "type": "boolean"
        },
        "DB2 z/OS": {
          "type": "boolean"
        },
        "Elastic": {
          "type": "boolean"
        },
        "Greenplum": {
          "type": "boolean"
        },
        "SAP Hana": {
          "type": "boolean"
        },
        "Apache Hive": {
          "type": "boolean"
        },
        "Apache Impala": {
          "type": "boolean"
        },
        "MariaDB": {
          "type": "boolean"
        },
        "MongoDB": {
          "type": "boolean"
        },
        "MySQL": {
          "type": "boolean"
        },
        "Netezza": {
          "type": "boolean"
        },
        "Oracle": {
          "type": "boolean"
        },
        "PostgreSQL": {
          "type": "boolean"
        },
        "Presto": {
          "type": "boolean"
        },
        "Trino": {
          "type": "boolean"
        },
        "Redshift": {
          "type": "boolean"
        },
        "SingleStore": {
          "type": "boolean"
        },
        "Solr": {
          "type": "boolean"
        },
        "Microsoft SQL Server": {
          "type": "boolean"
        },
        "Sybase ASE": {
          "type": "boolean"
        },
        "Teradata": {
          "type": "boolean"
        },
        "Vertica": {
          "type": "boolean"
        },
        "Google BigQuery": {
          "type": "boolean"
        },
        "Snowflake": {
          "type": "boolean"
        },
        "KDB": {
          "type": "boolean"
        },
        "Yellowbrick": {
          "type": "boolean"
        },
        "Jethro": {
          "type": "boolean"
        },
        "Custom": {
          "type": "boolean"
        },
        "Apache HDFS": {
          "type": "boolean"
        },
        "Amazon S3": {
          "type": "boolean"
        },
        "Azure Blob Storage": {
          "type": "boolean"
        },
        "Azure Data Lake Storage Gen2": {
          "type": "boolean"
        }
      }
    },
    "invalidates": {
      "type": "array",
      "items": {
        "type": "string",
        "x-format": {
          "guid": true
        }
      }
    },
    "Model39": {
      "type": "object",
      "properties": {
        "licenseKey": {
          "type": "string"
        },
        "seats": {
          "type": "integer",
          "x-constraint": {
            "greater": -2
          }
        },
        "softSeats": {
          "type": "integer",
          "x-constraint": {
            "greater": -1
          }
        },
        "customerId": {
          "type": "string"
        },
        "expires": {
          "type": "string",
          "format": "date"
        },
        "uuid": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "features": {
          "$ref": "#/definitions/features"
        },
        "handlers": {
          "$ref": "#/definitions/handlers"
        },
        "invalidates": {
          "$ref": "#/definitions/invalidates"
        },
        "invalidateAll": {
          "type": "boolean"
        },
        "notice": {
          "type": "string"
        },
        "noticeOnExpire": {
          "type": "string"
        },
        "classifyUsername": {
          "type": "string"
        },
        "classifyToken": {
          "type": "string"
        },
        "renewalToken": {
          "type": "string"
        },
        "hardExpiration": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "seats",
        "expires",
        "uuid"
      ]
    },
    "Model40": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model39"
      }
    },
    "AuditRecord": {
      "type": "object"
    },
    "authorizations": {
      "type": "object"
    },
    "scim": {
      "type": "object"
    },
    "Model41": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "iamid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "gid": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "authorizations": {
          "$ref": "#/definitions/authorizations"
        },
        "description": {
          "type": "string"
        },
        "scim": {
          "$ref": "#/definitions/scim"
        },
        "scimid": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model42": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model41"
      }
    },
    "Model43": {
      "type": "object",
      "properties": {
        "hits": {
          "$ref": "#/definitions/Model42"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "Model44": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "oauth": {
          "type": "boolean"
        }
      }
    },
    "Model45": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model44"
      }
    },
    "bimAuthorizations": {
      "type": "object"
    },
    "iamAuthorizations": {
      "type": "object"
    },
    "permissions": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "groupPermissions": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "externalUserIds": {
      "type": "object",
      "properties": {
        "hdfsUser": {
          "type": "string"
        },
        "databricksUser": {
          "type": "string"
        },
        "snowflakeUser": {
          "type": "string"
        },
        "prestoUser": {
          "type": "string"
        },
        "asaUser": {
          "type": "string"
        },
        "redshiftUser": {
          "type": "string"
        },
        "teradataUser": {
          "type": "string"
        },
        "bigqueryUser": {
          "type": "string"
        }
      }
    },
    "preferences": {
      "type": "object"
    },
    "profile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "sqlUser": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "externalUserIds": {
          "$ref": "#/definitions/externalUserIds"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "preferences": {
          "$ref": "#/definitions/preferences"
        },
        "scim": {
          "$ref": "#/definitions/scim"
        },
        "systemGenerated": {
          "type": "boolean"
        }
      }
    },
    "groups": {
      "type": "array",
      "items": {
        "type": "integer"
      }
    },
    "Model46": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        },
        "bimAuthorizations": {
          "$ref": "#/definitions/bimAuthorizations"
        },
        "iamAuthorizations": {
          "$ref": "#/definitions/iamAuthorizations"
        },
        "authorizations": {
          "$ref": "#/definitions/authorizations"
        },
        "projectId": {
          "type": "integer",
          "description": "If using apikey, the project id associated with the token. Otherwise, the current project associated with the profile"
        },
        "permissions": {
          "$ref": "#/definitions/permissions"
        },
        "groupPermissions": {
          "$ref": "#/definitions/groupPermissions"
        },
        "profile": {
          "$ref": "#/definitions/profile"
        },
        "authentication": {
          "type": "integer"
        },
        "systemGenerated": {
          "type": "boolean"
        },
        "lastLogin": {
          "type": "string",
          "format": "date"
        },
        "lastExternalRefresh": {
          "type": "string",
          "format": "date"
        },
        "disabled": {
          "type": "boolean"
        },
        "hasLogin": {
          "type": "boolean"
        },
        "groups": {
          "$ref": "#/definitions/groups"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "schema": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        }
      }
    },
    "Model47": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model46"
      }
    },
    "Model48": {
      "type": "object",
      "properties": {
        "hits": {
          "$ref": "#/definitions/Model47"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "Model49": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "children": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "catalogMetadata": {
      "type": "object",
      "description": "Should only be used for tags added by external catalog providers"
    },
    "Model50": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 500
        },
        "source": {
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The context under which this tag was applied.",
          "enum": [
            "sdd",
            "catalog",
            "schemaEvolution",
            "lineage",
            "manual",
            "framework"
          ]
        },
        "catalogMetadata": {
          "$ref": "#/definitions/catalogMetadata"
        },
        "addedBy": {
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model51": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model50"
      }
    },
    "Model52": {
      "type": "object",
      "description": "Metadata from the external catalog provider. Should only be what the catalog provider needs as a unique identifier for this column",
      "properties": {
        "provider": {
          "type": "string",
          "description": "The external data catalog provider that this column is linked to"
        }
      },
      "required": [
        "provider"
      ]
    },
    "Model53": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[^\\\\|]+$",
          "x-convert": {
            "trim": true
          }
        },
        "dataType": {
          "type": "string"
        },
        "remoteType": {
          "type": "string"
        },
        "srid": {
          "type": "integer"
        },
        "nullable": {
          "type": "boolean",
          "default": true
        },
        "headerIndex": {
          "type": "integer"
        },
        "parentId": {
          "type": "integer"
        },
        "remoteColumn": {
          "type": "string"
        },
        "isPrimaryKey": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "children": {
          "$ref": "#/definitions/children"
        },
        "tags": {
          "$ref": "#/definitions/Model51"
        },
        "catalogMetadata": {
          "$ref": "#/definitions/Model52"
        }
      },
      "required": [
        "name",
        "dataType"
      ]
    },
    "Model54": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model53"
      }
    },
    "types": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model55": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "dataSource": {
          "type": "integer"
        },
        "metadata": {
          "$ref": "#/definitions/Model54"
        },
        "types": {
          "$ref": "#/definitions/types"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model56": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model21"
      }
    },
    "Model57": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "purposes": {
          "$ref": "#/definitions/Model56"
        }
      }
    },
    "jobs": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model58": {
      "type": "object",
      "properties": {
        "jobs": {
          "$ref": "#/definitions/jobs"
        },
        "next": {
          "type": "string"
        }
      }
    },
    "Model59": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/metadata",
        "x-alternatives": [
          {
            "$ref": "#/x-alt-definitions/key"
          },
          {
            "$ref": "#/x-alt-definitions/pfx"
          }
        ]
      }
    },
    "Model60": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model19"
      }
    },
    "Model61": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "projectKey": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-convert": {
            "trim": true
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Model60"
        },
        "purposes": {
          "$ref": "#/definitions/purposes"
        },
        "stagedPurposes": {
          "$ref": "#/definitions/stagedPurposes"
        },
        "deleted": {
          "type": "boolean"
        },
        "snowflake": {
          "$ref": "#/definitions/snowflake"
        },
        "allowMaskedJoins": {
          "type": "boolean"
        },
        "subscriptionType": {
          "type": "string"
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/subscriptionPolicy"
        },
        "equalization": {
          "$ref": "#/definitions/equalization"
        },
        "workspace": {
          "$ref": "#/definitions/Model27",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/workspace"
            },
            {
              "type": "integer"
            }
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "User",
            "Schema"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "acknowledgeRequired": {
          "type": "boolean"
        },
        "subscriptionId": {
          "type": "integer"
        },
        "subscribedAsUser": {
          "type": "boolean"
        },
        "subscriptionStatus": {
          "type": "string",
          "enum": [
            "owner",
            "not_subscribed",
            "pending",
            "subscribed",
            "expert"
          ]
        },
        "filterId": {
          "type": "integer"
        }
      },
      "required": [
        "name",
        "status"
      ]
    },
    "Model62": {
      "type": "array",
      "description": "A list of tags to apply when classifier detects sensitive data",
      "minItems": 1,
      "x-constraint": {
        "unique": true
      },
      "items": {
        "type": "string"
      }
    },
    "config": {
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/definitions/Model62"
        },
        "minConfidence": {
          "type": "number",
          "description": "Apply tags when detection confidence is at least this percentage",
          "minimum": 0,
          "maximum": 1
        },
        "regex": {
          "type": "string",
          "description": "A case-insensitive regular expression to match against column values"
        }
      },
      "required": [
        "tags",
        "minConfidence",
        "regex"
      ]
    },
    "createdBy": {
      "type": "object",
      "description": "User who created this classifier",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "Model63": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique id of this classifier"
        },
        "name": {
          "type": "string",
          "description": "Unique, request-friendly classifier name",
          "pattern": "^[A-Z_0-9]+$"
        },
        "displayName": {
          "type": "string",
          "description": "Unique classifier name for display"
        },
        "description": {
          "type": "string",
          "description": "The classifier description"
        },
        "type": {
          "type": "string",
          "description": "The type of classifier, e.g. regex or dictionary",
          "enum": [
            "regex",
            "columnNameRegex",
            "dictionary",
            "remoteDictionary",
            "builtIn"
          ]
        },
        "config": {
          "$ref": "#/definitions/config",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/config"
            },
            {
              "$ref": "#/x-alt-definitions/Model4"
            },
            {
              "$ref": "#/x-alt-definitions/Model5"
            },
            {
              "$ref": "#/x-alt-definitions/Model6"
            },
            {
              "$ref": "#/x-alt-definitions/Model7"
            }
          ]
        },
        "createdBy": {
          "$ref": "#/definitions/createdBy"
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "Date classifier was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "Date classifier was last updated"
        }
      },
      "required": [
        "id",
        "name",
        "displayName",
        "description",
        "type",
        "config"
      ]
    },
    "Model64": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model63"
      }
    },
    "Model65": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "hits": {
          "$ref": "#/definitions/Model64"
        }
      }
    },
    "Model66": {
      "type": "array",
      "description": "Optional override for tags to apply",
      "minItems": 1,
      "x-constraint": {
        "unique": true
      },
      "items": {
        "type": "string"
      }
    },
    "overrides": {
      "type": "object",
      "properties": {
        "minConfidence": {
          "type": "number",
          "description": "Optional override for minConfidence",
          "minimum": 0,
          "maximum": 1
        },
        "tags": {
          "$ref": "#/definitions/Model66"
        }
      }
    },
    "Model67": {
      "type": "object",
      "description": "The info required to prescribe a single classifier in an SDD template, with optional overrides",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of classifier",
          "pattern": "^[A-Z_0-9]+$"
        },
        "overrides": {
          "$ref": "#/definitions/overrides"
        }
      },
      "required": [
        "name"
      ]
    },
    "classifiers": {
      "type": "array",
      "description": "Optional overrides object",
      "x-constraint": {},
      "items": {
        "$ref": "#/definitions/Model67"
      }
    },
    "Model68": {
      "type": "object",
      "description": "User who created this template",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "Model69": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unique id of this template"
        },
        "name": {
          "type": "string",
          "description": "Unique, request-friendly template name",
          "pattern": "^[A-Z_0-9]+$"
        },
        "displayName": {
          "type": "string",
          "description": "Unique template name for display"
        },
        "description": {
          "type": "string",
          "description": "The template description"
        },
        "classifiers": {
          "$ref": "#/definitions/classifiers"
        },
        "sampleSize": {
          "type": "integer",
          "description": "Optional override for how many records to sample",
          "minimum": 50
        },
        "createdBy": {
          "$ref": "#/definitions/Model68"
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "Date template was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "description": "Date template was last updated"
        }
      },
      "required": [
        "id",
        "name",
        "displayName",
        "description",
        "classifiers"
      ]
    },
    "Model70": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model69"
      }
    },
    "Model71": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "hits": {
          "$ref": "#/definitions/Model70"
        }
      },
      "required": [
        "count",
        "hits"
      ]
    },
    "entity": {
      "type": "object",
      "description": "The subscribing user or group",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "profile",
            "group"
          ]
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "model": {
      "type": "object",
      "description": "Model for request; omitted if count > 1",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "datasource",
            "project"
          ]
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "parentId": {
          "type": "integer",
          "description": "Id of parent model, if this is a derived subscription"
        },
        "parentName": {
          "type": "string",
          "description": "Name of parent model, if this is a derived subscription"
        }
      }
    },
    "Model72": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "integer",
          "description": "Subscription id of the approval"
        },
        "approver": {
          "type": "string",
          "description": "Name of required approver or actual approver"
        },
        "approverId": {
          "type": "integer",
          "description": "The id of the required approver"
        },
        "state": {
          "type": "string",
          "enum": [
            "approved",
            "pending"
          ]
        },
        "requiredPermission": {
          "type": "string",
          "description": "Role required to approve"
        },
        "ownerModelName": {
          "type": "string",
          "description": "Name of parent model if a parent owner must approve"
        },
        "ownerModelId": {
          "type": "integer",
          "description": "The id of the parent model if a parent owner must approve"
        }
      },
      "required": [
        "state",
        "requiredPermission"
      ]
    },
    "Model73": {
      "type": "array",
      "description": "List of all approved and pending approvals for a given entity subscribing to a given model",
      "items": {
        "$ref": "#/definitions/Model72"
      }
    },
    "fromProject": {
      "type": "object",
      "description": "Project info if this request was made to a datasource thru a project",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Model74": {
      "type": "object",
      "description": "Metadata for subscription request",
      "properties": {
        "fromProject": {
          "$ref": "#/definitions/fromProject"
        }
      }
    },
    "Model75": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/entity"
        },
        "count": {
          "type": "integer",
          "description": "The request count for each entity when groupByEntity was specified in searchObj"
        },
        "id": {
          "type": "integer",
          "description": "Subscription id for request; omitted if count > 1"
        },
        "model": {
          "$ref": "#/definitions/model"
        },
        "approvals": {
          "$ref": "#/definitions/Model73"
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "Request timestamp if count=1 else most recent request timestamp"
        },
        "metadata": {
          "$ref": "#/definitions/Model74"
        }
      },
      "required": [
        "entity",
        "createdAt"
      ]
    },
    "Model76": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model75"
      }
    },
    "Model77": {
      "type": "object",
      "properties": {
        "hits": {
          "$ref": "#/definitions/Model76"
        },
        "count": {
          "type": "integer"
        }
      },
      "required": [
        "hits",
        "count"
      ]
    },
    "Model78": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model79": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "attachments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model79"
      }
    },
    "request": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "attachments": {
          "$ref": "#/definitions/attachments"
        },
        "metadata": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        }
      }
    },
    "response": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        }
      }
    },
    "Model80": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "request": {
          "$ref": "#/definitions/request"
        },
        "response": {
          "$ref": "#/definitions/response"
        },
        "statusCode": {
          "type": "integer"
        },
        "notificationType": {
          "type": "string"
        },
        "webhooksActivityId": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "webhooksId": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "actionType": {
          "type": "string"
        },
        "createdBy": {
          "type": "integer"
        }
      }
    },
    "records": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model80"
      }
    },
    "Model81": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "records": {
          "$ref": "#/definitions/records"
        }
      }
    },
    "Model82": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model36"
      }
    },
    "activeFeatures": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "FPE",
          "nativeSqlTeradata"
        ]
      }
    },
    "Model83": {
      "type": "object",
      "properties": {
        "activeUserCount": {
          "type": "integer"
        },
        "activeLicenseCount": {
          "type": "integer"
        },
        "licenseSeats": {
          "type": "string",
          "enum": [
            "Unlimited"
          ],
          "x-alternatives": [
            {
              "type": "string",
              "enum": [
                "Unlimited"
              ]
            },
            {
              "type": "integer"
            }
          ]
        },
        "hardSeats": {
          "type": "string",
          "enum": [
            "Unlimited"
          ],
          "x-alternatives": [
            {
              "type": "string",
              "enum": [
                "Unlimited"
              ]
            },
            {
              "type": "integer"
            }
          ]
        },
        "canAddUser": {
          "type": "boolean"
        },
        "activeFeatures": {
          "$ref": "#/definitions/activeFeatures"
        }
      }
    },
    "ApiKey Entry": {
      "type": "object",
      "properties": {
        "dateTime": {
          "type": "string",
          "format": "date"
        },
        "keyAction": {
          "type": "string"
        }
      }
    },
    "ApiKey Activity Result": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ApiKey%20Entry"
      }
    },
    "Model84": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "sqlUser": {
          "type": "string"
        },
        "connectionString": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "database": {
          "type": "string"
        },
        "sslMode": {
          "type": "string"
        }
      }
    },
    "masked": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/metadata",
        "x-alternatives": [
          {
            "$ref": "#/x-alt-definitions/key"
          },
          {
            "$ref": "#/x-alt-definitions/pfx"
          }
        ]
      }
    },
    "columnNames": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model85": {
      "type": "object",
      "properties": {
        "noVisibilities": {
          "type": "boolean"
        },
        "userVisibilitiesCount": {
          "type": "integer"
        },
        "denialReason": {
          "type": "string"
        },
        "dataSourceVisibilitiesCount": {
          "type": "integer"
        },
        "additionalFilters": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "hasPurposeRule": {
          "type": "boolean"
        },
        "subscriptionPolicyMet": {
          "type": "boolean"
        },
        "masked": {
          "$ref": "#/definitions/masked"
        },
        "dataSource": {
          "type": "integer"
        },
        "dataSourceName": {
          "type": "string"
        },
        "columnNames": {
          "$ref": "#/definitions/columnNames"
        },
        "whereClause": {
          "type": "string"
        },
        "database": {
          "type": "string"
        },
        "catalog": {
          "type": "string"
        },
        "schemaName": {
          "type": "string"
        },
        "tableName": {
          "type": "string"
        },
        "sqlStatement": {
          "type": "string"
        },
        "allowMaskedJoins": {
          "type": "boolean"
        },
        "highCardinality": {
          "type": "string"
        },
        "policySet": {
          "type": "string"
        }
      }
    },
    "Model86": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "Model87": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "modelType": {
          "type": "string",
          "enum": [
            "datasource",
            "group",
            "user",
            "project",
            "purpose",
            "governance",
            "global-policy",
            "global-policy-approval-request",
            "tag",
            "bulk-job"
          ]
        },
        "modelId": {
          "type": "string"
        },
        "notificationType": {
          "type": "string"
        },
        "actionBy": {
          "$ref": "#/definitions/Model86"
        },
        "targetUser": {
          "$ref": "#/definitions/Model86"
        },
        "targetGroup": {
          "$ref": "#/definitions/Model86"
        },
        "additionalText": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "read": {
          "type": "boolean"
        }
      },
      "required": [
        "modelType",
        "modelId",
        "notificationType"
      ]
    },
    "Model88": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model87"
      }
    },
    "Model89": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "activities": {
          "$ref": "#/definitions/Model88"
        },
        "unread": {
          "type": "integer"
        },
        "next": {
          "type": "string"
        }
      }
    },
    "versions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model17"
      }
    },
    "Model90": {
      "type": "object",
      "properties": {
        "versions": {
          "$ref": "#/definitions/versions"
        }
      }
    },
    "Model91": {
      "type": "object",
      "properties": {
        "versions": {
          "$ref": "#/definitions/versions"
        }
      }
    },
    "Model92": {
      "type": "object",
      "properties": {
        "reports": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        }
      }
    },
    "ca": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "global": {
      "type": "object"
    },
    "Model93": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "subscription",
            "masking",
            "differentialPrivacy",
            "time",
            "minimization",
            "exemption",
            "external",
            "prerequisite",
            "columnContent",
            "rowOrObjectRestriction"
          ]
        },
        "rules": {
          "type": "string"
        },
        "global": {
          "$ref": "#/definitions/global"
        },
        "description": {
          "type": "string"
        },
        "policyHash": {
          "type": "string"
        },
        "immutable": {
          "type": "boolean",
          "description": "Indicates policy cannot be changed or removed; this flag cannot be set by users"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "type"
      ]
    },
    "jsonPolicies": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model93"
      }
    },
    "Model94": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "dataSourceId": {
          "type": "integer"
        },
        "createdBy": {
          "type": "integer"
        },
        "ca": {
          "$ref": "#/definitions/ca"
        },
        "jsonPolicies": {
          "$ref": "#/definitions/jsonPolicies"
        },
        "rules": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model95": {
      "type": "object",
      "properties": {
        "equalizationState": {
          "type": "string",
          "enum": [
            "off",
            "recommended",
            "active",
            "upgrade",
            "nonCompliantMembers"
          ]
        }
      },
      "required": [
        "equalizationState"
      ]
    },
    "Model96": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "default": "subscription",
          "enum": [
            "subscription"
          ]
        },
        "shareResponsibility": {
          "type": "boolean"
        },
        "subscriptionType": {
          "type": "string",
          "enum": [
            "automatic",
            "approval",
            "policy",
            "manual"
          ]
        },
        "allowDiscovery": {
          "type": "boolean"
        },
        "automaticSubscription": {
          "type": "boolean",
          "description": "If true, users will automatically be added to the model when subscription conditions are met"
        },
        "advanced": {
          "type": "string",
          "minLength": 1
        },
        "exceptions": {
          "$ref": "#/definitions/exceptions"
        },
        "approvals": {
          "$ref": "#/definitions/approvals"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Model97": {
      "type": "object",
      "properties": {
        "dataSourceName": {
          "type": "string"
        },
        "addedBy": {
          "type": "string"
        },
        "addedOn": {
          "type": "string",
          "format": "date"
        },
        "dataSourceId": {
          "type": "integer"
        },
        "addedByProfile": {
          "type": "integer"
        },
        "comment": {
          "type": "string"
        },
        "subscriptionStatus": {
          "type": "string",
          "enum": [
            "owner",
            "not_subscribed",
            "pending",
            "subscribed",
            "expert"
          ]
        },
        "deleted": {
          "type": "boolean"
        },
        "derivedInThisProject": {
          "type": "boolean"
        },
        "policyHandlerType": {
          "type": "string",
          "enum": [
            "None",
            "Builder",
            "External"
          ]
        },
        "blobHandlerType": {
          "type": "string",
          "description": "Describes the type of underlying blob handler is used with this Data Source, e.g. Custom, MS SQL."
        },
        "subscriptionType": {
          "type": "string",
          "enum": [
            "automatic",
            "approval",
            "policy",
            "manual",
            "derived",
            "none"
          ]
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/Model96"
        },
        "connectionString": {
          "type": "string"
        }
      }
    },
    "Project Data Sources": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model97"
      }
    },
    "Model98": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "dataSources": {
          "$ref": "#/definitions/Project%20Data%20Sources"
        }
      }
    },
    "Model99": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "integer"
        },
        "approver": {
          "type": "string"
        },
        "approverId": {
          "type": "integer"
        },
        "requiredPermission": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "updatedBy": {
          "type": "integer"
        },
        "ownerModelName": {
          "type": "string"
        },
        "ownerModelId": {
          "type": "integer"
        }
      }
    },
    "Model100": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model99"
      }
    },
    "Model101": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "missingDataSources": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model101"
      }
    },
    "Model102": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "invalidSubscriptions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model102"
      }
    },
    "missingEntitlements": {
      "type": "object"
    },
    "compliance": {
      "type": "object",
      "properties": {
        "missingDataSources": {
          "$ref": "#/definitions/missingDataSources"
        },
        "invalidSubscriptions": {
          "$ref": "#/definitions/invalidSubscriptions"
        },
        "validationFrequencyExceeded": {
          "type": "boolean"
        },
        "isMissingEntitlements": {
          "type": "boolean"
        },
        "missingEntitlements": {
          "$ref": "#/definitions/missingEntitlements"
        },
        "isMissingPurposeAcknowledgement": {
          "type": "boolean"
        }
      }
    },
    "Model103": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "expiration": {
          "type": "string",
          "format": "date"
        },
        "profile": {
          "type": "integer"
        },
        "group": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "enum": [
            "group",
            "user"
          ]
        },
        "approved": {
          "type": "boolean"
        },
        "currentUserCanApprove": {
          "type": "boolean"
        },
        "approvedByCurrentUser": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "lastExternalRefresh": {
          "type": "string",
          "format": "date"
        },
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "admin": {
          "type": "string"
        },
        "systemGenerated": {
          "type": "boolean"
        },
        "approvals": {
          "$ref": "#/definitions/Model100"
        },
        "compliance": {
          "$ref": "#/definitions/compliance"
        }
      }
    },
    "members": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model103"
      }
    },
    "Model104": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "members": {
          "$ref": "#/definitions/members"
        }
      }
    },
    "Model105": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model87"
      }
    },
    "Model106": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "activities": {
          "$ref": "#/definitions/Model105"
        },
        "unread": {
          "type": "integer"
        },
        "next": {
          "type": "string"
        }
      }
    },
    "author": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "Model107": {
      "type": "object",
      "properties": {
        "modelName": {
          "type": "string"
        },
        "modelType": {
          "type": "string"
        },
        "modelId": {
          "type": "string"
        }
      }
    },
    "models": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model107"
      }
    },
    "Model108": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "author": {
          "$ref": "#/definitions/author"
        },
        "resolved": {
          "type": "boolean"
        },
        "body": {
          "type": "string"
        },
        "parentId": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "models": {
          "$ref": "#/definitions/models"
        },
        "totalreplies": {
          "type": "integer"
        },
        "lastreply": {
          "type": "string",
          "format": "date"
        },
        "public": {
          "type": "boolean"
        }
      }
    },
    "Model109": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model108"
      }
    },
    "Model110": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "group": {
          "type": "integer"
        },
        "profile": {
          "$ref": "#/definitions/profile"
        },
        "uid": {
          "type": "integer"
        },
        "userid": {
          "type": "string"
        },
        "iamid": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "scim": {
          "$ref": "#/definitions/scim"
        },
        "scimid": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model111": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model110"
      }
    },
    "Model112": {
      "type": "object",
      "properties": {
        "hits": {
          "$ref": "#/definitions/Model111"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "policyHandlerDiff": {
      "type": "object",
      "description": "Current and initial policy state for parent data source at time of derived source creation",
      "properties": {
        "dsType": {
          "type": "string",
          "enum": [
            "queryable",
            "ingested"
          ]
        },
        "currentHandlerId": {
          "type": "integer"
        },
        "previousHandlerId": {
          "type": "integer"
        }
      },
      "required": [
        "dsType"
      ]
    },
    "Model113": {
      "type": "object",
      "description": "Single record schema for a data source that is either the child or parent of a derived data source",
      "properties": {
        "dataSourceId": {
          "type": "integer",
          "description": "Data Source Id"
        },
        "dataSourceName": {
          "type": "string",
          "description": "Data Source Name"
        },
        "projectId": {
          "type": "integer",
          "description": "Project Id for relevant project context"
        },
        "projectName": {
          "type": "string",
          "description": "Project Name"
        },
        "policyHandlerDiff": {
          "$ref": "#/definitions/policyHandlerDiff"
        },
        "deleted": {
          "type": "boolean",
          "description": "Data Source deleted flag"
        },
        "createdBy": {
          "type": "string",
          "description": "Name of Data Source creator"
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "description": "Data Source creation date"
        }
      },
      "required": [
        "dataSourceId",
        "dataSourceName",
        "projectId",
        "projectName",
        "createdBy",
        "createdAt"
      ]
    },
    "Model114": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model113"
      }
    },
    "parents": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model113"
      }
    },
    "Model115": {
      "type": "object",
      "properties": {
        "children": {
          "$ref": "#/definitions/Model114"
        },
        "parents": {
          "$ref": "#/definitions/parents"
        }
      }
    },
    "replies": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model116": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "author": {
          "type": "integer"
        },
        "resolved": {
          "type": "boolean",
          "default": false
        },
        "body": {
          "type": "string"
        },
        "parentId": {
          "type": "integer"
        },
        "replies": {
          "$ref": "#/definitions/replies"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "author",
        "resolved",
        "body"
      ]
    },
    "Model117": {
      "type": "object",
      "properties": {
        "modelId": {
          "type": "string"
        },
        "modelType": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "Model118": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model117"
      }
    },
    "Model119": {
      "type": "object",
      "properties": {
        "auditId": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "lastrun": {
          "type": "string",
          "format": "date"
        },
        "timesrun": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Model120": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model119"
      }
    },
    "User Queries": {
      "type": "object",
      "properties": {
        "hits": {
          "$ref": "#/definitions/Model120"
        },
        "count": {
          "type": "integer"
        }
      }
    },
    "Model121": {
      "type": "object",
      "properties": {
        "anyKey": {
          "type": "string",
          "description": "Any key/value pair",
          "example": "anyValue"
        }
      }
    },
    "visibilities": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model121"
      }
    },
    "hash": {
      "type": "array",
      "description": "Components used to generate hashed value",
      "items": {
        "type": "string"
      }
    },
    "Model122": {
      "type": "object",
      "properties": {
        "minChar": {
          "type": "integer",
          "description": "Minimum valid character for alphabet (ascii code)"
        },
        "maxChar": {
          "type": "integer",
          "description": "Maximum valid character for alphabet (ascii code)"
        },
        "radix": {
          "type": "integer",
          "description": "Radix value for alphabet"
        }
      }
    },
    "alphabets": {
      "type": "array",
      "description": "Valid FPE Alphabets",
      "items": {
        "$ref": "#/definitions/Model122"
      }
    },
    "domain": {
      "type": "array",
      "description": "The distinct values in a column for randomized responses",
      "items": {
        "type": "string",
        "x-alternatives": [
          {
            "type": "string"
          },
          {
            "type": "number"
          }
        ]
      }
    },
    "external": {
      "type": "object",
      "description": "The configuration for externally masked columns.",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI of the external masking service"
        }
      }
    },
    "Model123": {
      "type": "object",
      "properties": {
        "bucketSize": {
          "type": "number",
          "description": "For number fields. Size of buckets to round numbers to."
        },
        "caseInsensitive": {
          "type": "boolean",
          "description": "True to ignore case when applying the regex to mask columns."
        },
        "conditionalPredicate": {
          "type": "string",
          "description": "Condition used to determine whether or not the value should be masked."
        },
        "constant": {
          "type": "string",
          "description": "Constant value to mask to. If this field is not defined, the value will be hashed."
        },
        "dataSourceId": {
          "type": "integer",
          "description": "Data Source Id to which the field belongs"
        },
        "hash": {
          "$ref": "#/definitions/hash"
        },
        "dateFormat": {
          "type": "string",
          "description": "The format of the date found in the data."
        },
        "global": {
          "type": "boolean",
          "description": "True if this is a global masking policy."
        },
        "regex": {
          "type": "string",
          "description": "Regex to match against when masking columns."
        },
        "replacement": {
          "type": "string",
          "description": "String used to replace the matched regex."
        },
        "timePrecision": {
          "type": "string",
          "description": "For time fields. Time precision to round to.",
          "enum": [
            "HOUR",
            "DAY",
            "MONTH",
            "QUARTER",
            "YEAR"
          ]
        },
        "radix": {
          "type": "integer",
          "description": "Overall radix value based on all alphabets"
        },
        "alphabets": {
          "$ref": "#/definitions/alphabets"
        },
        "salt": {
          "type": "string",
          "description": "Salt to use for FPE"
        },
        "padToLength": {
          "type": "integer",
          "description": "Minimum raw value length, will be 0 padded if necessary"
        },
        "ignoreNonAlphabet": {
          "type": "boolean",
          "description": "Whether or not characters which don't match a specific alphabet should be ignored during FPE.",
          "default": false
        },
        "prefix": {
          "type": "integer",
          "description": "Number of characters at the front of a value to ignore during FPE"
        },
        "checksum": {
          "type": "string",
          "description": "Checksum to enforce when performing FPE",
          "enum": [
            "LUHN",
            "INSEE"
          ]
        },
        "kind": {
          "type": "string",
          "description": "The kind of randomized responses to use",
          "enum": [
            "plain",
            "numeric",
            "categorical"
          ]
        },
        "low": {
          "type": "number",
          "description": "The lowest value used for randomized responses"
        },
        "high": {
          "type": "number",
          "description": "The highest value used for randomized responses"
        },
        "stddev": {
          "type": "number",
          "description": "The standard deviation to use for numeric randomized responses"
        },
        "replacementRate": {
          "type": "number",
          "description": "The replacement rate to use for numeric randomized responses"
        },
        "domain": {
          "$ref": "#/definitions/domain"
        },
        "allowNull": {
          "type": "boolean",
          "description": "Whether or not the column includes null values (categorical only)"
        },
        "external": {
          "$ref": "#/definitions/external"
        }
      }
    },
    "Model124": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Model123"
        },
        "name": {
          "type": "string",
          "description": "Name of the field being masked."
        },
        "type": {
          "type": "string",
          "description": "Type of masking to apply.",
          "enum": [
            "Consistent Value",
            "Reversible",
            "Grouping",
            "Regular Expression",
            "Format Preserving Masking",
            "K-Anonymization",
            "Randomized Response",
            "Custom Function"
          ]
        },
        "actionType": {
          "type": "string",
          "description": "User friendly masking action type.",
          "enum": [
            "Hashing",
            "Reversible",
            "Nullify",
            "Constant",
            "Regex",
            "Generalization",
            "FPE",
            "KANON",
            "RandomizedResponse",
            "CustomFunction"
          ]
        }
      }
    },
    "Model125": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model124"
      }
    },
    "customWhere": {
      "type": "object",
      "properties": {
        "predicate": {
          "type": "string",
          "description": "WHERE clause predicate that will be executed to restrict access to rows of data"
        }
      }
    },
    "differentialPrivacy": {
      "type": "object",
      "properties": {
        "epsilon": {
          "type": "number",
          "description": "Epsilon value to use for the differential privacy rule."
        },
        "delta": {
          "type": "number",
          "description": "Delta value to use for the differential privacy rule."
        },
        "countEpsilonScaleFactor": {
          "type": "number",
          "description": "Scale factor to use on epsilon on counting queries."
        },
        "hashPhrase": {
          "type": "string",
          "description": "Column to base differential privacy on. This should be a high cardinality column in the Data Source."
        },
        "samples": {
          "type": "integer",
          "description": "Number of samples used for differential privacy query"
        },
        "staleDataTolerance": {
          "type": "integer",
          "description": "The length in seconds that the result can be cached."
        },
        "sql": {
          "type": "string",
          "description": "The resulting SQL statement that is pushed down to be executed."
        },
        "statistics": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        }
      }
    },
    "minimization": {
      "type": "object",
      "properties": {
        "hashPhrase": {
          "type": "string",
          "description": "Column to base minimization privacy on. This should be a high cardinality column in the Data Source."
        },
        "percent": {
          "type": "number",
          "description": "The randomly sampled percent of data to restrict access to."
        }
      }
    },
    "additionalFilters": {
      "type": "object",
      "properties": {
        "customWhere": {
          "$ref": "#/definitions/customWhere"
        },
        "differentialPrivacy": {
          "$ref": "#/definitions/differentialPrivacy"
        },
        "eventTimeColumn": {
          "type": "string",
          "description": "The column that denotes the time associated with records returned from the Data Source"
        },
        "minimization": {
          "$ref": "#/definitions/minimization"
        },
        "time": {
          "type": "string",
          "format": "date",
          "description": "Timestamp of the oldest data a user will be allowed to see."
        },
        "filterSeconds": {
          "type": "integer",
          "description": "Age in seconds of the oldest data a user will be allowed to see. This counts backward from the present."
        },
        "isOlderOrNewer": {
          "type": "string",
          "description": "Whether or not the time range checks for older or newer records. Default is more recent records.",
          "default": "newer",
          "enum": [
            "newer",
            "older"
          ]
        }
      }
    },
    "Model126": {
      "type": "object",
      "properties": {
        "visibilities": {
          "$ref": "#/definitions/visibilities"
        },
        "visibilityRuleApplies": {
          "type": "boolean",
          "description": "True if a visibility rule exists and user is not excepted from it."
        },
        "masked": {
          "$ref": "#/definitions/Model125"
        },
        "additionalFilters": {
          "$ref": "#/definitions/additionalFilters"
        }
      }
    },
    "Model127": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model108"
      }
    },
    "Model128": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model19"
      }
    },
    "project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "projectKey": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-convert": {
            "trim": true
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Model128"
        },
        "purposes": {
          "$ref": "#/definitions/purposes"
        },
        "stagedPurposes": {
          "$ref": "#/definitions/stagedPurposes"
        },
        "deleted": {
          "type": "boolean"
        },
        "snowflake": {
          "$ref": "#/definitions/snowflake"
        },
        "allowMaskedJoins": {
          "type": "boolean"
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/subscriptionPolicy"
        },
        "subscriptionType": {
          "type": "string"
        },
        "equalization": {
          "$ref": "#/definitions/equalization"
        },
        "workspace": {
          "$ref": "#/definitions/Model27",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/workspace"
            },
            {
              "type": "integer"
            }
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "User",
            "Schema"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "name",
        "status"
      ]
    },
    "Model129": {
      "type": "object",
      "properties": {
        "keyid": {
          "type": "integer"
        },
        "created": {
          "type": "string",
          "format": "date"
        },
        "project": {
          "$ref": "#/definitions/project"
        },
        "lastUsed": {
          "type": "string",
          "format": "date"
        },
        "name": {
          "type": "string"
        },
        "context": {
          "type": "string"
        }
      }
    },
    "Model130": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model129"
      }
    },
    "Model131": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "iamid": {
          "type": "string"
        },
        "groupUser": {
          "type": "integer"
        }
      }
    },
    "Model132": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model131"
      }
    },
    "Model133": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "description": "The data source ID that was deleted."
        },
        "name": {
          "type": "string",
          "description": "The name of the deleted data source."
        },
        "hardDelete": {
          "type": "boolean",
          "description": "Whether this was a hard delete or not."
        },
        "handlerDeleteErrorMessage": {
          "type": "string",
          "description": "If there were issues cleaning up the handler, the error message from handler cleanup."
        },
        "schemaEvolutionId": {
          "type": "number"
        },
        "disabled": {
          "type": "boolean",
          "description": "If true, the data source was disabled and not permanently deleted."
        }
      }
    },
    "Model134": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "Model135": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "global": {
          "type": "boolean"
        },
        "actionType": {
          "type": "string"
        },
        "createdBy": {
          "type": "integer"
        },
        "internalPlugin": {
          "type": "boolean"
        }
      }
    },
    "Model136": {
      "type": "object",
      "properties": {
        "FPE": {
          "$ref": "#/definitions/FPE"
        },
        "nativeSqlTeradata": {
          "$ref": "#/definitions/nativeSqlTeradata"
        }
      }
    },
    "Model137": {
      "type": "object",
      "properties": {
        "Azure Synapse Analytics": {
          "type": "boolean"
        },
        "Amazon Athena": {
          "type": "boolean"
        },
        "BlackLynx": {
          "type": "boolean"
        },
        "Databricks": {
          "type": "boolean"
        },
        "DB2": {
          "type": "boolean"
        },
        "DB2 z/OS": {
          "type": "boolean"
        },
        "Elastic": {
          "type": "boolean"
        },
        "Greenplum": {
          "type": "boolean"
        },
        "SAP Hana": {
          "type": "boolean"
        },
        "Apache Hive": {
          "type": "boolean"
        },
        "Apache Impala": {
          "type": "boolean"
        },
        "MariaDB": {
          "type": "boolean"
        },
        "MongoDB": {
          "type": "boolean"
        },
        "MySQL": {
          "type": "boolean"
        },
        "Netezza": {
          "type": "boolean"
        },
        "Oracle": {
          "type": "boolean"
        },
        "PostgreSQL": {
          "type": "boolean"
        },
        "Presto": {
          "type": "boolean"
        },
        "Trino": {
          "type": "boolean"
        },
        "Redshift": {
          "type": "boolean"
        },
        "SingleStore": {
          "type": "boolean"
        },
        "Solr": {
          "type": "boolean"
        },
        "Microsoft SQL Server": {
          "type": "boolean"
        },
        "Sybase ASE": {
          "type": "boolean"
        },
        "Teradata": {
          "type": "boolean"
        },
        "Vertica": {
          "type": "boolean"
        },
        "Google BigQuery": {
          "type": "boolean"
        },
        "Snowflake": {
          "type": "boolean"
        },
        "KDB": {
          "type": "boolean"
        },
        "Yellowbrick": {
          "type": "boolean"
        },
        "Jethro": {
          "type": "boolean"
        },
        "Custom": {
          "type": "boolean"
        },
        "Apache HDFS": {
          "type": "boolean"
        },
        "Amazon S3": {
          "type": "boolean"
        },
        "Azure Blob Storage": {
          "type": "boolean"
        },
        "Azure Data Lake Storage Gen2": {
          "type": "boolean"
        }
      }
    },
    "Model138": {
      "type": "object",
      "properties": {
        "licenseKey": {
          "type": "string"
        },
        "seats": {
          "type": "integer",
          "x-constraint": {
            "greater": -2
          }
        },
        "softSeats": {
          "type": "integer",
          "x-constraint": {
            "greater": -1
          }
        },
        "customerId": {
          "type": "string"
        },
        "expires": {
          "type": "string",
          "format": "date"
        },
        "uuid": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "features": {
          "$ref": "#/definitions/Model136"
        },
        "handlers": {
          "$ref": "#/definitions/Model137"
        },
        "invalidates": {
          "$ref": "#/definitions/invalidates"
        },
        "invalidateAll": {
          "type": "boolean"
        },
        "notice": {
          "type": "string"
        },
        "noticeOnExpire": {
          "type": "string"
        },
        "classifyUsername": {
          "type": "string"
        },
        "classifyToken": {
          "type": "string"
        },
        "renewalToken": {
          "type": "string"
        },
        "hardExpiration": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "seats",
        "expires",
        "uuid"
      ]
    },
    "Model139": {
      "type": "object",
      "properties": {
        "revokedTokens": {
          "type": "integer"
        }
      }
    },
    "Model140": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model21"
      }
    },
    "Model141": {
      "type": "object",
      "description": "Object identifying a user or group",
      "properties": {
        "name": {
          "type": "string"
        },
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string",
          "description": "Applicable to users only"
        },
        "id": {
          "type": "integer"
        }
      },
      "required": [
        "id"
      ]
    },
    "Model142": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model141"
      }
    },
    "Model143": {
      "type": "object",
      "description": "Object identifying a user or group",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string",
          "description": "Applicable to users only"
        }
      }
    },
    "Model144": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model143"
      }
    },
    "ownerRestrictions": {
      "type": "object",
      "description": "Object identifying the entities to which this global policy should be restricted.",
      "properties": {
        "users": {
          "$ref": "#/definitions/Model142"
        },
        "groups": {
          "$ref": "#/definitions/Model144"
        }
      }
    },
    "Model145": {
      "type": "object",
      "properties": {
        "HEDReportVersion": {
          "type": "string"
        },
        "certificationExpirationInterval": {
          "type": "string"
        }
      }
    },
    "Model146": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "hasLeafNodes": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "columnTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "hasLeafNodes": {
          "type": "boolean"
        },
        "source": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "columnRegex": {
      "type": "object",
      "properties": {
        "regex": {
          "type": "string"
        },
        "caseInsensitive": {
          "type": "boolean"
        }
      },
      "required": [
        "regex"
      ]
    },
    "Model147": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "time",
            "tags",
            "columnTags",
            "noTags",
            "anyTag",
            "server",
            "columnRegex"
          ]
        },
        "operator": {
          "type": "string"
        },
        "tag": {
          "$ref": "#/definitions/Model146"
        },
        "columnTag": {
          "$ref": "#/definitions/columnTag"
        },
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "server": {
          "type": "string"
        },
        "columnRegex": {
          "$ref": "#/definitions/columnRegex"
        }
      },
      "required": [
        "operator",
        "tag",
        "columnTag",
        "startDate",
        "server",
        "columnRegex"
      ]
    },
    "circumstances": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model147"
      }
    },
    "Model148": {
      "type": "array",
      "description": "Tags that impact this certification",
      "items": {
        "type": "string"
      }
    },
    "certification": {
      "type": "object",
      "description": "Certification information for the global policy",
      "properties": {
        "label": {
          "type": "string",
          "description": "Name to be displayed in certification tag"
        },
        "text": {
          "type": "string",
          "description": "Certification text"
        },
        "tags": {
          "$ref": "#/definitions/Model148"
        },
        "recertify": {
          "type": "boolean",
          "description": "If true, will require re-certification on all impacted datasources"
        }
      }
    },
    "Model149": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "policyKey": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "A string denoting a unique name for this global policy."
        },
        "type": {
          "type": "string",
          "description": "The type of global policy. Either a subscription policy or data policy.",
          "enum": [
            "data",
            "subscription",
            "global"
          ]
        },
        "template": {
          "type": "boolean",
          "description": "Whether or not this policy should be available as a template"
        },
        "createdBy": {
          "type": "integer",
          "description": "A string denoting the user that created this data source."
        },
        "createdByName": {
          "type": "string"
        },
        "ownerRestrictions": {
          "$ref": "#/definitions/ownerRestrictions"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "metadata": {
          "$ref": "#/definitions/Model145"
        },
        "actions": {
          "type": "string"
        },
        "circumstances": {
          "$ref": "#/definitions/circumstances"
        },
        "clonedFrom": {
          "type": "integer",
          "description": "Id of the policy this was cloned from"
        },
        "staged": {
          "type": "boolean",
          "description": "Whether or not this global policy is in a staged status"
        },
        "systemGenerated": {
          "type": "boolean",
          "description": "Whether or not the global policy is system-generated"
        },
        "deleted": {
          "type": "boolean",
          "description": "Whether or not the global policy has been deleted"
        },
        "certification": {
          "$ref": "#/definitions/certification"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "Model150": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the removed data source"
        },
        "blobHandlerType": {
          "type": "string",
          "description": "The type of blob handler of the removed data source"
        },
        "name": {
          "type": "string",
          "description": "The name of the removed data source"
        }
      }
    },
    "success": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model150"
      }
    },
    "Model151": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the data source that failed to remove"
        },
        "name": {
          "type": "string",
          "description": "The name of the data source that failed to remove"
        },
        "msg": {
          "type": "string",
          "description": "The message associated with the error record"
        }
      }
    },
    "inError": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model151"
      }
    },
    "Model152": {
      "type": "object",
      "properties": {
        "success": {
          "$ref": "#/definitions/success"
        },
        "inError": {
          "$ref": "#/definitions/inError"
        }
      }
    },
    "string": {
      "type": "array",
      "x-constraint": {
        "unique": true
      },
      "items": {
        "type": "string"
      }
    },
    "Model153": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "iamid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "gid": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "authorizations": {
          "type": "object",
          "properties": {
            "string": {
              "$ref": "#/definitions/string"
            }
          }
        },
        "description": {
          "type": "string"
        },
        "scim": {
          "$ref": "#/definitions/scim"
        },
        "scimid": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model154": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model13"
      }
    },
    "Model155": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Model154"
        },
        "rules": {
          "$ref": "#/definitions/rules"
        }
      },
      "required": [
        "active",
        "name",
        "shortName",
        "description",
        "tags",
        "rules"
      ]
    },
    "Model156": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model19"
      }
    },
    "Model157": {
      "type": "array",
      "items": {
        "type": "integer"
      }
    },
    "dataSources": {
      "type": "array",
      "items": {
        "type": "integer"
      }
    },
    "Model158": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "projectKey": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-convert": {
            "trim": true
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Model156"
        },
        "stagedPurposes": {
          "$ref": "#/definitions/stagedPurposes"
        },
        "deleted": {
          "type": "boolean"
        },
        "snowflake": {
          "$ref": "#/definitions/snowflake"
        },
        "allowMaskedJoins": {
          "type": "boolean"
        },
        "subscriptionType": {
          "type": "string"
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/subscriptionPolicy"
        },
        "equalization": {
          "$ref": "#/definitions/equalization"
        },
        "workspace": {
          "$ref": "#/definitions/Model27",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/workspace"
            },
            {
              "type": "integer"
            }
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "purposes": {
          "$ref": "#/definitions/Model157"
        },
        "dataSources": {
          "$ref": "#/definitions/dataSources"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "status"
      ]
    },
    "Model159": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model19"
      }
    },
    "workspaceWarnings": {
      "type": "array",
      "description": "If non-fatal errors occurred making changes to the workspace associated to this project, they will be returned in this array.",
      "items": {
        "type": "string"
      }
    },
    "Model160": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "projectKey": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-convert": {
            "trim": true
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Model159"
        },
        "purposes": {
          "$ref": "#/definitions/purposes"
        },
        "stagedPurposes": {
          "$ref": "#/definitions/stagedPurposes"
        },
        "deleted": {
          "type": "boolean"
        },
        "snowflake": {
          "$ref": "#/definitions/snowflake"
        },
        "allowMaskedJoins": {
          "type": "boolean"
        },
        "subscriptionType": {
          "type": "string"
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/subscriptionPolicy"
        },
        "equalization": {
          "$ref": "#/definitions/equalization"
        },
        "workspace": {
          "$ref": "#/definitions/Model27",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/workspace"
            },
            {
              "type": "integer"
            }
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "User",
            "Schema"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "workspaceWarnings": {
          "$ref": "#/definitions/workspaceWarnings"
        }
      },
      "required": [
        "name",
        "status"
      ]
    },
    "rootTag": {
      "type": "object",
      "description": "If you want to delete all the tags from the given root first, before saving, pass the tag root and whether it is a leaf or hierarchical",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 500
        },
        "deleteHierarchy": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "name"
      ]
    },
    "Model161": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 500
        },
        "id": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model162": {
      "type": "array",
      "minItems": 1,
      "x-constraint": {
        "unique": true,
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model161"
      }
    },
    "Model163": {
      "type": "object",
      "properties": {
        "rootTag": {
          "$ref": "#/definitions/rootTag"
        },
        "tags": {
          "$ref": "#/definitions/Model162"
        }
      }
    },
    "Model164": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model34"
      }
    },
    "notificationType": {
      "type": "array",
      "minItems": 1,
      "x-constraint": {
        "unique": true
      },
      "items": {
        "type": "string",
        "description": "The type of notification action the webhook will trigger on",
        "enum": [
          "ALL_NOTIFICATIONS",
          "modelCreated",
          "modelDeleted",
          "modelCopied",
          "dataSourceUpdated",
          "dataSourceExpired",
          "dataSourceExpiring",
          "healthCheckFailed",
          "healthCheckResolved",
          "modelUserAdded",
          "modelUserDeleted",
          "modelUserJoined",
          "modelAccessRequested",
          "modelAccessApproved",
          "modelAccessRevoked",
          "modelAccessUpdated",
          "modelAccessDenied",
          "modelTagAdded",
          "modelTagRemoved",
          "projectUpdated",
          "projectEqualizationToggled",
          "projectEqualizationMemberNotInCompliance",
          "projectDisabled",
          "addedToProject",
          "removedFromProject",
          "deletedDatasourceRemovedFromProject",
          "expiredDatasourceRemovedFromProject",
          "updatedModelInProject",
          "nativeWorkspaceStateChanged",
          "policyUpdated",
          "modelCommentCreated",
          "modelCommentReply",
          "modelCommentResolved",
          "queryCreated",
          "queryCanceled",
          "queryUpdated",
          "firstQuery",
          "userCreated",
          "userDeleted",
          "userEnabled",
          "userCloned",
          "userDisabled",
          "userMigrated",
          "groupUserAdded",
          "groupUserDeleted",
          "userUpdated",
          "attributeUpdated",
          "attributeAdded",
          "attributeRemoved",
          "permissionsUpdated",
          "switchedCurrentProject",
          "usernameUpdated",
          "acknowledgedAccess",
          "purposeCreated",
          "purposeUpdated",
          "purposeDeleted",
          "tagCreated",
          "tagUpdated",
          "tagDeleted",
          "governanceSettingsUpdated",
          "apiKeyRevoked",
          "conflictingGlobalPolicies",
          "globalPolicyCreated",
          "globalPolicyUpdated",
          "globalPolicyDeleted",
          "globalPolicyApproved",
          "globalPolicyChangeRequested",
          "globalPolicyApprovalRescinded",
          "globalPolicyDisabled",
          "bulkJobStatus",
          "bulkCreateDatasource",
          "taskValidated",
          "taskDeleted",
          "certificationRequired",
          "policyCertificationExpired",
          "policyAdjustmentExpired",
          "policyAdjustmentCreated",
          "nativeViewUpdated",
          "frameworkCreated",
          "frameworkUpdated",
          "frameworkDeleted"
        ]
      }
    },
    "Model165": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Url for outbound webhook request"
        },
        "name": {
          "type": "string",
          "description": "Optional name for the webhook"
        },
        "global": {
          "type": "boolean",
          "description": "Whether or not this is a global webhook",
          "default": false
        },
        "notificationType": {
          "$ref": "#/definitions/notificationType"
        },
        "actionType": {
          "type": "string"
        },
        "secret": {
          "type": "string",
          "description": "Optional shared secret for computing webhook signature"
        },
        "internalPlugin": {
          "type": "boolean",
          "description": "If true route the request internally to a custom plugin that was uploaded"
        }
      },
      "required": [
        "url",
        "notificationType",
        "actionType"
      ]
    },
    "webhooks": {
      "type": "array",
      "minItems": 1,
      "x-constraint": {
        "unique": true,
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model165"
      }
    },
    "Model166": {
      "type": "object",
      "properties": {
        "webhooks": {
          "$ref": "#/definitions/webhooks"
        }
      }
    },
    "Model167": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "global": {
          "type": "boolean"
        },
        "actionType": {
          "type": "string"
        },
        "createdBy": {
          "type": "integer"
        },
        "internalPlugin": {
          "type": "boolean"
        },
        "secret": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "createdWebhooks": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model167"
      }
    },
    "errors": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model168": {
      "type": "object",
      "properties": {
        "createdWebhooks": {
          "$ref": "#/definitions/createdWebhooks"
        },
        "errors": {
          "$ref": "#/definitions/errors"
        }
      }
    },
    "Model169": {
      "type": "object",
      "properties": {
        "FPE": {
          "$ref": "#/definitions/FPE"
        },
        "nativeSqlTeradata": {
          "$ref": "#/definitions/nativeSqlTeradata"
        }
      }
    },
    "Model170": {
      "type": "object",
      "properties": {
        "Azure Synapse Analytics": {
          "type": "boolean"
        },
        "Amazon Athena": {
          "type": "boolean"
        },
        "BlackLynx": {
          "type": "boolean"
        },
        "Databricks": {
          "type": "boolean"
        },
        "DB2": {
          "type": "boolean"
        },
        "DB2 z/OS": {
          "type": "boolean"
        },
        "Elastic": {
          "type": "boolean"
        },
        "Greenplum": {
          "type": "boolean"
        },
        "SAP Hana": {
          "type": "boolean"
        },
        "Apache Hive": {
          "type": "boolean"
        },
        "Apache Impala": {
          "type": "boolean"
        },
        "MariaDB": {
          "type": "boolean"
        },
        "MongoDB": {
          "type": "boolean"
        },
        "MySQL": {
          "type": "boolean"
        },
        "Netezza": {
          "type": "boolean"
        },
        "Oracle": {
          "type": "boolean"
        },
        "PostgreSQL": {
          "type": "boolean"
        },
        "Presto": {
          "type": "boolean"
        },
        "Trino": {
          "type": "boolean"
        },
        "Redshift": {
          "type": "boolean"
        },
        "SingleStore": {
          "type": "boolean"
        },
        "Solr": {
          "type": "boolean"
        },
        "Microsoft SQL Server": {
          "type": "boolean"
        },
        "Sybase ASE": {
          "type": "boolean"
        },
        "Teradata": {
          "type": "boolean"
        },
        "Vertica": {
          "type": "boolean"
        },
        "Google BigQuery": {
          "type": "boolean"
        },
        "Snowflake": {
          "type": "boolean"
        },
        "KDB": {
          "type": "boolean"
        },
        "Yellowbrick": {
          "type": "boolean"
        },
        "Jethro": {
          "type": "boolean"
        },
        "Custom": {
          "type": "boolean"
        },
        "Apache HDFS": {
          "type": "boolean"
        },
        "Amazon S3": {
          "type": "boolean"
        },
        "Azure Blob Storage": {
          "type": "boolean"
        },
        "Azure Data Lake Storage Gen2": {
          "type": "boolean"
        }
      }
    },
    "Model171": {
      "type": "object",
      "properties": {
        "licenseKey": {
          "type": "string"
        },
        "seats": {
          "type": "integer",
          "x-constraint": {
            "greater": -2
          }
        },
        "softSeats": {
          "type": "integer",
          "x-constraint": {
            "greater": -1
          }
        },
        "customerId": {
          "type": "string"
        },
        "expires": {
          "type": "string",
          "format": "date"
        },
        "uuid": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        },
        "features": {
          "$ref": "#/definitions/Model169"
        },
        "handlers": {
          "$ref": "#/definitions/Model170"
        },
        "invalidates": {
          "$ref": "#/definitions/invalidates"
        },
        "invalidateAll": {
          "type": "boolean"
        },
        "notice": {
          "type": "string"
        },
        "noticeOnExpire": {
          "type": "string"
        },
        "classifyUsername": {
          "type": "string"
        },
        "classifyToken": {
          "type": "string"
        },
        "renewalToken": {
          "type": "string"
        },
        "hardExpiration": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "seats",
        "expires",
        "uuid"
      ]
    },
    "dataAccess": {
      "type": "object",
      "description": "Describes access to an individual blob or a query that may grant access to multiple blobs",
      "properties": {
        "accessType": {
          "type": "string",
          "description": "Indicates whether access was granted to an individual blob or if this was a query potentially encompassing many blobs",
          "enum": [
            "blob",
            "query"
          ]
        },
        "blobId": {
          "type": "string",
          "description": "If accessType==blob, this is the blobId"
        },
        "query": {
          "type": "string",
          "description": "If the accessType==blob, this is not present. If the accessType==query, this is the query"
        },
        "queryId": {
          "type": "string",
          "description": "A UUID style id which is present as a comment in the remote query."
        },
        "dataSourceSchemaName": {
          "type": "string",
          "description": "The data source schema name queried in the audit record"
        },
        "dataSourceTableName": {
          "type": "string",
          "description": "The data source table name queried in the audit record"
        }
      },
      "required": [
        "accessType"
      ]
    },
    "purposeIds": {
      "type": "array",
      "description": "If the action being taken by the user involves data and is happening for a specific person, the purpose ids should be recorded here",
      "items": {
        "type": "integer"
      }
    },
    "record": {
      "type": "object",
      "properties": {
        "blobSize": {
          "type": "integer",
          "description": "The size (in bytes) of the blob being fetched"
        },
        "sqlUser": {
          "type": "string",
          "description": "The username of the user whose access is being manipulated"
        },
        "action": {
          "type": "string",
          "description": "Denotes whether access was granted or revoked",
          "enum": [
            "revoked",
            "granted"
          ]
        },
        "subscriptionState": {
          "type": "string",
          "description": "Indicates the state to which the record was changed",
          "enum": [
            "denied",
            "subscribed",
            "expert",
            "owner",
            "ingest",
            "unsubscribed"
          ]
        },
        "accessedId": {
          "type": "integer",
          "description": "The user identifier of the user who is being acted upon"
        },
        "accessedIdType": {
          "type": "string",
          "description": "Type of user being acted upon",
          "enum": [
            "user",
            "group"
          ]
        },
        "hardDelete": {
          "type": "boolean",
          "description": "Denotes whether this was a hard delete"
        },
        "expirationDate": {
          "type": "string",
          "format": "date",
          "description": "The date time at which the record expired in Immuta"
        },
        "accessType": {
          "type": "string",
          "description": "Denotes how the specified user was accessed",
          "enum": [
            "update",
            "get",
            "search",
            "create",
            "delete",
            "complete",
            "newToken",
            "clone",
            "disable"
          ]
        },
        "accessedIamId": {
          "type": "string",
          "description": "The IAM ID for the user being accessed"
        },
        "accessedUserId": {
          "type": "string",
          "description": "The user being accessed"
        },
        "groupAccessType": {
          "type": "string",
          "description": "Denotes how the specified group was accessed",
          "enum": [
            "update",
            "get",
            "search",
            "create",
            "delete",
            "addUser",
            "removeUser"
          ]
        },
        "groupIamId": {
          "type": "string",
          "description": "The IAM ID for the group being accessed"
        },
        "accessedGroupId": {
          "type": "integer",
          "description": "The group being accessed"
        },
        "keyAction": {
          "type": "string",
          "description": "The action taken on the api key",
          "enum": [
            "get",
            "delete"
          ]
        },
        "keyId": {
          "type": "integer",
          "description": "The API Key id"
        },
        "keyIamId": {
          "type": "string",
          "description": "The IAM ID for the user who owns the API key accessed"
        },
        "keyUserId": {
          "type": "string",
          "description": "The user who owns the API key accessed"
        }
      }
    },
    "extra": {
      "type": "object",
      "description": "A JSON object representing the additional information to be logged/audited"
    },
    "newAuditServiceFields": {
      "type": "object",
      "description": "A JSON object staging area for \"new\" auditable information applicable to the new Audit Service",
      "properties": {
        "sessionId": {
          "type": "string",
          "description": "The session ID of the user performing the action"
        },
        "actorIp": {
          "type": "string",
          "description": "The IP address of the user performing the action"
        }
      }
    },
    "Model172": {
      "type": "object",
      "properties": {
        "dateTime": {
          "type": "string",
          "format": "date",
          "description": "The time stamp for when the record was created"
        },
        "component": {
          "type": "string",
          "description": "The BoData component that generated this record",
          "enum": [
            "console",
            "featureStore",
            "dataSource",
            "bim",
            "audit",
            "policy",
            "project",
            "plugin",
            "governance",
            "admin",
            "tag",
            "s3p",
            "webhooks",
            "nativeSql",
            "dbt",
            "sdd",
            "framework"
          ]
        },
        "profileId": {
          "type": "integer",
          "description": "The profileId of the user generating the action"
        },
        "userId": {
          "type": "string",
          "description": "The userId of the user generating the action"
        },
        "iamId": {
          "type": "string",
          "description": "The iamId of the user generating the action"
        },
        "sqlUser": {
          "type": "string",
          "description": "The database account generating the action"
        },
        "dataAccess": {
          "$ref": "#/definitions/dataAccess"
        },
        "blobHandlerType": {
          "type": "string",
          "description": "If the record creation is associated with a datasource, the blob handler type should be recorded here"
        },
        "dataSourceName": {
          "type": "string",
          "description": "If the record creation is associated with a data source, the data source name should be recorded here"
        },
        "dataSourceId": {
          "type": "integer",
          "description": "If the record creation is associated with a data source, the data source id should be recorded here"
        },
        "projectName": {
          "type": "string",
          "description": "If the record creation is associated with a project, the project name should be recorded here"
        },
        "projectId": {
          "type": "integer",
          "description": "If the record creation is associated with a project, the project id should be recorded here"
        },
        "purposeIds": {
          "$ref": "#/definitions/purposeIds"
        },
        "policyId": {
          "type": "integer",
          "description": "If the record creation is associated with a policy, the policy id should be recorded here"
        },
        "policyName": {
          "type": "string",
          "description": "If the record creation is associated with a policy, the policy name should be recorded here"
        },
        "success": {
          "type": "boolean",
          "description": "Denotes whether the action being audited was successful"
        },
        "failureReason": {
          "type": "string",
          "description": "Describes the reason that this audit event failed",
          "enum": [
            "systemError",
            "insufficientAuthorizations",
            "insufficientPermissions",
            "userError"
          ]
        },
        "failureDetails": {
          "type": "string",
          "description": "If the audit event failed, details can be provided in this free text field to examine later"
        },
        "recordType": {
          "type": "string",
          "description": "The type of audit event being captured. This also corresponds to the additional information in the record field",
          "enum": [
            "auditQuery",
            "blobVisibility",
            "blobFetch",
            "blobIndex",
            "blobDelete",
            "blobUpdateFeatures",
            "blobUpdateTags",
            "sqlAccess",
            "spark",
            "sqlCreateUser",
            "sqlDeleteUser",
            "sqlResetPassword",
            "featureList",
            "sqlQuery",
            "catalogUpdate",
            "dataSourceCreate",
            "dataSourceDelete",
            "dataSourceExpired",
            "dataSourceSave",
            "dataSourceSubscription",
            "dataSourceTestQuery",
            "dataSourceUpdate",
            "dbtApiKeyUpdate",
            "dbtDelete",
            "dictionaryCreate",
            "dictionaryDelete",
            "dictionaryUpdate",
            "nativeQuery",
            "projectCreate",
            "projectPurposeApprove",
            "projectPurposeDeny",
            "projectUpdate",
            "projectDelete",
            "addToProject",
            "removeFromProject",
            "projectSubscription",
            "acknowledgePurposes",
            "accessUser",
            "accessGroup",
            "apiKey",
            "tagAdded",
            "tagCreated",
            "tagDeleted",
            "tagUpdated",
            "tagRemoved",
            "sddClassifierCreated",
            "sddClassifierUpdated",
            "sddClassifierDeleted",
            "sddDatasourceTagUpdate",
            "nativeLineageDataSourceTagUpdate",
            "nativeLineageDataSourceTagDeleted",
            "sddTemplateCreated",
            "sddTemplateUpdated",
            "sddTemplateDeleted",
            "sddTemplateApplied",
            "authenticate",
            "checkPendingRequest",
            "policyExemption",
            "governanceUpdate",
            "purposeCreate",
            "purposeUpdate",
            "purposeDelete",
            "licenseCreate",
            "licenseDelete",
            "policyHandlerCreate",
            "policyHandlerUpdate",
            "policyAdjustmentCreate",
            "policyAdjustmentDelete",
            "policyAdjustmentExpired",
            "policyExport",
            "policyImport",
            "globalPolicyCertify",
            "policyCertificationExpired",
            "globalPolicyCreate",
            "globalPolicyUpdate",
            "globalPolicyDelete",
            "globalPolicyConflictResolved",
            "globalPolicyDisabled",
            "globalPolicyApplied",
            "globalPolicyRemoved",
            "globalPolicyApproved",
            "globalPolicyChangeRequested",
            "globalPolicyApprovalRescinded",
            "globalPolicyReviewRequested",
            "globalPolicyPromoted",
            "externalUserIdChanged",
            "externalQuery",
            "unmaskRequest",
            "queryDebugRequest",
            "taskValidate",
            "taskDelete",
            "handleTask",
            "s3pBlobFetch",
            "switchCurrentProject",
            "webhookCreate",
            "webhookDelete",
            "configurationUpdate",
            "driverUpload",
            "workSpace",
            "prestoQuery",
            "frameworkCreated",
            "frameworkUpdated",
            "frameworkDeleted",
            "frameworkCloned"
          ]
        },
        "record": {
          "$ref": "#/definitions/record"
        },
        "extra": {
          "$ref": "#/definitions/extra"
        },
        "newAuditServiceFields": {
          "$ref": "#/definitions/newAuditServiceFields"
        },
        "newAuditServiceMigrated": {
          "type": "boolean",
          "description": "True if this record has already been migrated to new Audit Service",
          "default": false
        }
      },
      "required": [
        "component",
        "success",
        "recordType"
      ]
    },
    "Model173": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "integer",
          "description": "A project to assign this apikey to"
        },
        "name": {
          "type": "string",
          "description": "The name to associate with the apikey"
        }
      }
    },
    "Model174": {
      "type": "object",
      "properties": {
        "apikey": {
          "type": "string"
        },
        "keyid": {
          "type": "integer"
        },
        "project": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "maxLength": 254
        },
        "context": {
          "type": "string"
        }
      }
    },
    "Model175": {
      "type": "object",
      "properties": {
        "iamid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "iamid",
        "name"
      ]
    },
    "Model176": {
      "type": "object",
      "properties": {
        "iamid": {
          "type": "string",
          "description": "The iam id for the iam to sync users for"
        }
      },
      "required": [
        "iamid"
      ]
    },
    "Model177": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "Model178": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "Postgres user name to create",
          "maxLength": 255
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "dataSourceIds": {
      "type": "array",
      "description": "Data source ids to subscribe users to",
      "minItems": 1,
      "x-constraint": {
        "unique": true,
        "single": true
      },
      "items": {
        "type": "integer"
      }
    },
    "Model179": {
      "type": "object",
      "description": "The metadata to associate with a subscription request"
    },
    "Model180": {
      "type": "object",
      "properties": {
        "requiredPermission": {
          "type": "string"
        },
        "specificApproverRequired": {
          "type": "boolean"
        },
        "specificApprover": {
          "type": "integer",
          "description": "The profile id of the approver"
        },
        "ownerModelId": {
          "type": "integer",
          "description": "Model id when approval must come from another model's owner (derived subscriptions only)"
        }
      }
    },
    "Model181": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model180"
      }
    },
    "Model182": {
      "type": "object",
      "properties": {
        "dataSourceIds": {
          "$ref": "#/definitions/dataSourceIds"
        },
        "metadata": {
          "$ref": "#/definitions/Model179"
        },
        "approvals": {
          "$ref": "#/definitions/Model181"
        },
        "groupId": {
          "type": "integer"
        },
        "backgroundJob": {
          "type": "boolean",
          "description": "If true, these subscriptions will be done as a background job",
          "default": false
        }
      }
    },
    "Model183": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "maxLength": 500
        },
        "displayName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The context under which this tag was applied.",
          "enum": [
            "sdd",
            "catalog",
            "schemaEvolution",
            "lineage",
            "manual",
            "framework"
          ]
        },
        "systemCreated": {
          "type": "boolean"
        },
        "addedBy": {
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        },
        "hasLeafNodes": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "catalogMetadata": {
          "$ref": "#/definitions/catalogMetadata"
        },
        "count": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model184": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model183"
      }
    },
    "native": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "projectId": {
          "type": "integer"
        }
      }
    },
    "blobHandler": {
      "type": "object",
      "description": "The url information of the Blob handler to use with this data source.",
      "properties": {
        "url": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "cert": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "ca": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "pfx": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "verify": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "passphrase": {
          "type": "string"
        },
        "fullUrl": {
          "type": "string"
        },
        "caDeleted": {
          "type": "boolean"
        },
        "keyDeleted": {
          "type": "boolean"
        },
        "certDeleted": {
          "type": "boolean"
        },
        "inputs": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "timeout": {
          "type": "integer"
        },
        "dataSourceId": {
          "type": "integer"
        },
        "native": {
          "$ref": "#/definitions/native"
        },
        "manualDictionary": {
          "type": "boolean"
        }
      }
    },
    "Model185": {
      "type": "object",
      "description": "Metadata from the external catalog provider. Should only be what the catalog provider needs as a unique identifier for this data source",
      "properties": {
        "provider": {
          "type": "string",
          "description": "The external data catalog provider that this data source is linked to"
        }
      },
      "required": [
        "provider"
      ]
    },
    "derivedFrom": {
      "type": "array",
      "description": "Parent data sources for equalized project data source creation",
      "minItems": 1,
      "items": {
        "type": "integer"
      }
    },
    "derived": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "integer",
          "description": "Applicable project for equalized project data source creation"
        },
        "derivedFrom": {
          "$ref": "#/definitions/derivedFrom"
        }
      },
      "required": [
        "projectId",
        "derivedFrom"
      ]
    },
    "fields": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "visibilitySchema": {
      "type": "object",
      "properties": {
        "fields": {
          "$ref": "#/definitions/fields"
        },
        "version": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model186": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "Consistent Value",
            "Reversible",
            "Grouping",
            "Regular Expression",
            "Format Preserving Masking",
            "K-Anonymization",
            "Randomized Response",
            "Custom Function"
          ]
        },
        "metadata": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "maskingConfiguration": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model186"
      }
    },
    "policyHandler": {
      "type": "object",
      "description": "The url information of the policy handler to use with this data source.",
      "properties": {
        "url": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "cert": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "ca": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "pfx": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "verify": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "passphrase": {
          "type": "string"
        },
        "fullUrl": {
          "type": "string"
        },
        "caDeleted": {
          "type": "boolean"
        },
        "keyDeleted": {
          "type": "boolean"
        },
        "certDeleted": {
          "type": "boolean"
        },
        "inputs": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "timeout": {
          "type": "integer"
        },
        "dataSourceId": {
          "type": "integer"
        },
        "native": {
          "$ref": "#/definitions/native"
        },
        "visibilitySchema": {
          "$ref": "#/definitions/visibilitySchema"
        },
        "maskingConfiguration": {
          "$ref": "#/definitions/maskingConfiguration"
        },
        "additionalFilters": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "previousHandlerId": {
          "type": "integer"
        },
        "handlerId": {
          "type": "integer"
        }
      }
    },
    "statusInfo": {
      "type": "object",
      "description": "Object containing the health status information of this data source"
    },
    "Model187": {
      "type": "array",
      "description": "If a global policy is merged, this contains the parent policy ids",
      "items": {
        "type": "integer"
      }
    },
    "Model188": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "description": "The name of the global policy"
        },
        "type": {
          "type": "string",
          "description": "The type of global policy"
        },
        "parents": {
          "$ref": "#/definitions/Model187"
        },
        "disabled": {
          "type": "boolean",
          "description": "Whether this policy has been disabled"
        },
        "reason": {
          "type": "string",
          "description": "The reason for disabling this policy. Required when disabled is true."
        },
        "template": {
          "type": "boolean",
          "description": "Whether this policy is a template"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "createdBy": {
          "type": "string",
          "description": "A string denoting the user that created this policy."
        }
      }
    },
    "globalPolicies": {
      "type": "array",
      "description": "The global subscription policies that can be applied to this data source",
      "items": {
        "$ref": "#/definitions/Model188"
      }
    },
    "Model189": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "default": "subscription",
          "enum": [
            "subscription"
          ]
        },
        "shareResponsibility": {
          "type": "boolean"
        },
        "subscriptionType": {
          "type": "string",
          "enum": [
            "automatic",
            "approval",
            "policy",
            "manual"
          ]
        },
        "allowDiscovery": {
          "type": "boolean"
        },
        "automaticSubscription": {
          "type": "boolean",
          "description": "If true, users will automatically be added to the model when subscription conditions are met"
        },
        "advanced": {
          "type": "string",
          "minLength": 1
        },
        "exceptions": {
          "$ref": "#/definitions/exceptions"
        },
        "approvals": {
          "$ref": "#/definitions/approvals"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "nameTemplate": {
      "type": "object",
      "properties": {
        "tableFormat": {
          "type": "string",
          "default": ""
        },
        "nameFormat": {
          "type": "string",
          "default": ""
        },
        "sqlSchemaNameFormat": {
          "type": "string",
          "default": ""
        },
        "schemaProjectNameFormat": {
          "type": "string",
          "default": ""
        }
      }
    },
    "Model190": {
      "type": "object",
      "properties": {
        "nameTemplate": {
          "$ref": "#/definitions/nameTemplate"
        }
      }
    },
    "schemaEvolution": {
      "type": "object",
      "properties": {
        "schemas": {
          "$ref": "#/definitions/schemas"
        },
        "disabled": {
          "type": "boolean"
        },
        "ownerProfileId": {
          "type": "integer"
        },
        "config": {
          "$ref": "#/definitions/Model190"
        },
        "dataSourceConfig": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "handlerMetadata": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "connectionString": {
          "type": "string"
        }
      }
    },
    "dataSource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the data source. Must be unique within the Immuta instance."
        },
        "recordFormat": {
          "type": "string",
          "description": "The data format of Blobs in this data source. Examples: JSON, XML, HTML, JPEG"
        },
        "description": {
          "type": "string",
          "description": "The description of the data source."
        },
        "tags": {
          "$ref": "#/definitions/Model184"
        },
        "sqlSchemaName": {
          "type": "string",
          "description": "A string that represents this data source's schema in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "sqlTableName": {
          "type": "string",
          "description": "A string that represents this data source's table in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "blobHandlerType": {
          "type": "string",
          "description": "Describes the type of underlying blob handler that will be used with this Data Source, e.g. Custom, MS SQL.",
          "enum": [
            "Azure Synapse Analytics",
            "Amazon Athena",
            "BlackLynx",
            "Databricks",
            "DB2",
            "DB2 z/OS",
            "Elastic",
            "Greenplum",
            "SAP Hana",
            "Apache Hive",
            "Apache Impala",
            "MariaDB",
            "MongoDB",
            "MySQL",
            "Netezza",
            "Oracle",
            "PostgreSQL",
            "Presto",
            "Trino",
            "Redshift",
            "SingleStore",
            "Solr",
            "Microsoft SQL Server",
            "Sybase ASE",
            "Teradata",
            "Vertica",
            "Google BigQuery",
            "Snowflake",
            "KDB",
            "Yellowbrick",
            "Jethro",
            "Custom",
            "Apache HDFS",
            "Amazon S3",
            "Azure Blob Storage",
            "Azure Data Lake Storage Gen2"
          ]
        },
        "blobHandler": {
          "$ref": "#/definitions/blobHandler"
        },
        "type": {
          "type": "string",
          "description": "The type of data source, whether it is ingested (metadata will exist in bodata) or queryable (metadata is dynamically queried)",
          "enum": [
            "queryable",
            "ingested"
          ]
        },
        "documentation": {
          "type": "string",
          "description": "A field which can be used to provide in depth documentation for a data source. This field supports markdown syntax."
        },
        "expiration": {
          "type": "string",
          "format": "date",
          "description": "Date that the data source should be purged from Immuta."
        },
        "catalogMetadata": {
          "$ref": "#/definitions/Model185"
        },
        "workspace": {
          "type": "integer",
          "description": "The id of the workspace from which this source was created"
        },
        "derived": {
          "$ref": "#/definitions/derived"
        },
        "id": {
          "type": "integer"
        },
        "policyHandler": {
          "$ref": "#/definitions/policyHandler"
        },
        "policyHandlerType": {
          "type": "string",
          "description": "Describes the type of policy handler that will be used with this data source",
          "enum": [
            "None",
            "Builder",
            "External"
          ]
        },
        "handlerBreakingChanges": {
          "type": "boolean",
          "description": "If true, users will be notified that something might have broken in the data source"
        },
        "createdBy": {
          "type": "integer",
          "description": "User profile id that created this data source."
        },
        "deleted": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "recordCount": {
          "type": "integer"
        },
        "rowCount": {
          "type": "integer"
        },
        "statsExpiration": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string",
          "description": "The current health status of this datasource"
        },
        "statusInfo": {
          "$ref": "#/definitions/statusInfo"
        },
        "subscriptionType": {
          "type": "string"
        },
        "subscribedAsUser": {
          "type": "boolean"
        },
        "subscriptionId": {
          "type": "integer"
        },
        "globalPolicies": {
          "$ref": "#/definitions/globalPolicies"
        },
        "acknowledgeRequired": {
          "type": "boolean"
        },
        "subscriptionStatus": {
          "type": "string"
        },
        "requestedState": {
          "type": "string"
        },
        "approved": {
          "type": "boolean"
        },
        "subscriptionExpiration": {
          "type": "string",
          "format": "date"
        },
        "filterId": {
          "type": "integer"
        },
        "subscribers": {
          "type": "integer"
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/Model189"
        },
        "fingerprintCreatedAt": {
          "type": "string",
          "format": "date"
        },
        "seeded": {
          "type": "boolean"
        },
        "sddTemplate": {
          "type": "integer",
          "description": "SDD template associated with this data source"
        },
        "schemaEvolutionId": {
          "type": "number"
        },
        "schemaEvolution": {
          "$ref": "#/definitions/schemaEvolution"
        },
        "columnEvolutionEnabled": {
          "type": "boolean"
        }
      },
      "required": [
        "derived",
        "derived"
      ]
    },
    "Model191": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "subscription",
            "masking",
            "differentialPrivacy",
            "time",
            "minimization",
            "exemption",
            "external",
            "prerequisite",
            "columnContent",
            "rowOrObjectRestriction"
          ]
        },
        "rules": {
          "type": "string"
        },
        "global": {
          "$ref": "#/definitions/global"
        },
        "description": {
          "type": "string"
        },
        "policyHash": {
          "type": "string"
        },
        "immutable": {
          "type": "boolean",
          "description": "Indicates policy cannot be changed or removed; this flag cannot be set by users"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "type"
      ]
    },
    "policyRules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model191"
      }
    },
    "Model192": {
      "type": "object",
      "description": "This is necessary when updating a data source because the data source metadata is not sent in the update payload",
      "properties": {
        "maskingConfiguration": {
          "$ref": "#/definitions/maskingConfiguration"
        },
        "visibilitySchema": {
          "$ref": "#/definitions/visibilitySchema"
        }
      }
    },
    "statistics": {
      "type": "object"
    },
    "Model193": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model194": {
      "type": "object"
    },
    "Model195": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "dataType": {
          "type": "string"
        },
        "remoteColumn": {
          "type": "string"
        },
        "remoteType": {
          "type": "string"
        },
        "srid": {
          "type": "integer"
        },
        "statistics": {
          "$ref": "#/definitions/statistics"
        },
        "nullable": {
          "type": "boolean"
        },
        "isPrimaryKey": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Model193"
        },
        "catalogMetadata": {
          "$ref": "#/definitions/Model194"
        },
        "children": {
          "$ref": "#/definitions/children"
        }
      },
      "required": [
        "name"
      ]
    },
    "columns": {
      "type": "array",
      "description": "The columns that should be included in this data source.",
      "x-constraint": {
        "unique": true
      },
      "items": {
        "$ref": "#/definitions/Model195"
      }
    },
    "Model196": {
      "type": "object",
      "description": "Metadata related to the native workspace from which the derived data source was created.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of native workspace to which this handler belongs"
        },
        "projectId": {
          "type": "integer",
          "description": "The native workspace enabled project from which this source originated"
        }
      },
      "required": [
        "type",
        "projectId"
      ]
    },
    "Model197": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "userFiles": {
          "$ref": "#/definitions/userFiles"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "native": {
          "$ref": "#/definitions/Model196"
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represent as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "dbms": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Model198": {
      "type": "object",
      "properties": {
        "policyHandler": {
          "$ref": "#/definitions/Model192"
        },
        "dataSourceId": {
          "type": "integer",
          "description": "The ID of the data source to which this handler corresponds."
        },
        "metadata": {
          "$ref": "#/definitions/Model197",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/metadata"
            },
            {
              "$ref": "#/x-alt-definitions/Model14"
            },
            {
              "$ref": "#/x-alt-definitions/Model15"
            },
            {
              "$ref": "#/x-alt-definitions/Model16"
            },
            {
              "$ref": "#/x-alt-definitions/Model17"
            },
            {
              "$ref": "#/x-alt-definitions/Model18"
            },
            {
              "$ref": "#/x-alt-definitions/Model19"
            }
          ]
        },
        "dbms": {
          "$ref": "#/definitions/dbms"
        },
        "connectionString": {
          "type": "string"
        },
        "remoteTableDescription": {
          "type": "string"
        }
      }
    },
    "handler": {
      "type": "array",
      "minItems": 1,
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model198"
      }
    },
    "Model199": {
      "type": "object",
      "properties": {
        "dataSource": {
          "$ref": "#/definitions/dataSource"
        },
        "policyRules": {
          "$ref": "#/definitions/policyRules"
        },
        "handler": {
          "$ref": "#/definitions/handler"
        },
        "schemaEvolution": {
          "$ref": "#/definitions/schemaEvolution"
        }
      }
    },
    "Model200": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 500
        },
        "source": {
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The context under which this tag was applied.",
          "enum": [
            "sdd",
            "catalog",
            "schemaEvolution",
            "lineage",
            "manual",
            "framework"
          ]
        },
        "catalogMetadata": {
          "$ref": "#/definitions/catalogMetadata"
        },
        "addedBy": {
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model201": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model200"
      }
    },
    "Model202": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "pattern": "^[^\\\\|]+$",
          "x-convert": {
            "trim": true
          }
        },
        "dataType": {
          "type": "string"
        },
        "remoteType": {
          "type": "string"
        },
        "srid": {
          "type": "integer"
        },
        "nullable": {
          "type": "boolean",
          "default": true
        },
        "headerIndex": {
          "type": "integer"
        },
        "parentId": {
          "type": "integer"
        },
        "remoteColumn": {
          "type": "string"
        },
        "isPrimaryKey": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "children": {
          "$ref": "#/definitions/children"
        },
        "tags": {
          "$ref": "#/definitions/Model201"
        },
        "catalogMetadata": {
          "$ref": "#/definitions/Model52"
        }
      },
      "required": [
        "name",
        "dataType"
      ]
    },
    "Model203": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model202"
      }
    },
    "Model204": {
      "type": "object",
      "properties": {
        "dataSource": {
          "type": "integer"
        },
        "metadata": {
          "$ref": "#/definitions/Model203"
        },
        "types": {
          "$ref": "#/definitions/types"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "jobIds": {
      "type": "array",
      "description": "List of job IDs",
      "minItems": 1,
      "x-constraint": {
        "unique": true
      },
      "items": {
        "type": "string",
        "description": "A job UUID",
        "x-format": {
          "guid": true
        }
      }
    },
    "Model205": {
      "type": "object",
      "description": "Payload schema for POST /jobs/statuses",
      "properties": {
        "jobIds": {
          "$ref": "#/definitions/jobIds"
        },
        "wait": {
          "type": "integer",
          "description": "Number of seconds to wait before returning if all jobs have not yet completed. Use -1 to wait indefinitely",
          "default": 0
        },
        "pollInterval": {
          "type": "integer",
          "description": "Number of seconds to wait between subsequent polls. Ignored if not using wait.",
          "default": 1,
          "minimum": 1
        }
      },
      "required": [
        "jobIds"
      ]
    },
    "Model206": {
      "type": "object",
      "description": "Response schema for POST /jobs/statuses"
    },
    "Model207": {
      "type": "object",
      "description": "Object identifying a user or group",
      "properties": {
        "name": {
          "type": "string"
        },
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string",
          "description": "Applicable to users only"
        },
        "id": {
          "type": "integer"
        }
      },
      "required": [
        "id"
      ]
    },
    "Model208": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model207"
      }
    },
    "Model209": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model143"
      }
    },
    "Model210": {
      "type": "object",
      "description": "Object identifying the entities to which this global policy should be restricted.",
      "properties": {
        "users": {
          "$ref": "#/definitions/Model208"
        },
        "groups": {
          "$ref": "#/definitions/Model209"
        }
      }
    },
    "Model211": {
      "type": "object",
      "properties": {
        "HEDReportVersion": {
          "type": "string"
        },
        "certificationExpirationInterval": {
          "type": "string"
        }
      }
    },
    "Model212": {
      "type": "array",
      "description": "Tags that impact this certification",
      "items": {
        "type": "string"
      }
    },
    "Model213": {
      "type": "object",
      "description": "Certification information for the global policy",
      "properties": {
        "label": {
          "type": "string",
          "description": "Name to be displayed in certification tag"
        },
        "text": {
          "type": "string",
          "description": "Certification text"
        },
        "tags": {
          "$ref": "#/definitions/Model212"
        },
        "recertify": {
          "type": "boolean",
          "description": "If true, will require re-certification on all impacted datasources"
        }
      }
    },
    "Model214": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "policyKey": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "A string denoting a unique name for this global policy."
        },
        "type": {
          "type": "string",
          "description": "The type of global policy. Either a subscription policy or data policy.",
          "enum": [
            "data",
            "subscription",
            "global"
          ]
        },
        "template": {
          "type": "boolean",
          "description": "Whether or not this policy should be available as a template"
        },
        "createdBy": {
          "type": "integer",
          "description": "A string denoting the user that created this data source."
        },
        "createdByName": {
          "type": "string"
        },
        "ownerRestrictions": {
          "$ref": "#/definitions/Model210"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "metadata": {
          "$ref": "#/definitions/Model211"
        },
        "actions": {
          "type": "string"
        },
        "circumstances": {
          "$ref": "#/definitions/circumstances"
        },
        "clonedFrom": {
          "type": "integer",
          "description": "Id of the policy this was cloned from"
        },
        "staged": {
          "type": "boolean",
          "description": "Whether or not this global policy is in a staged status"
        },
        "systemGenerated": {
          "type": "boolean",
          "description": "Whether or not the global policy is system-generated"
        },
        "deleted": {
          "type": "boolean",
          "description": "Whether or not the global policy has been deleted"
        },
        "certification": {
          "$ref": "#/definitions/Model213"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "Model215": {
      "type": "object",
      "description": "Search facet tree structure"
    },
    "Model216": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/metadata",
        "x-alternatives": [
          {
            "$ref": "#/x-alt-definitions/key"
          },
          {
            "$ref": "#/x-alt-definitions/pfx"
          }
        ]
      }
    },
    "Model217": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/metadata",
        "x-alternatives": [
          {
            "$ref": "#/x-alt-definitions/key"
          },
          {
            "$ref": "#/x-alt-definitions/pfx"
          }
        ]
      }
    },
    "policy": {
      "type": "object",
      "description": "A full or partially-created global policy",
      "properties": {
        "template": {
          "type": "boolean"
        },
        "actions": {
          "$ref": "#/definitions/Model216"
        },
        "circumstances": {
          "$ref": "#/definitions/Model217"
        }
      }
    },
    "Model218": {
      "type": "object",
      "description": "Search on provided facets or policies similar to provided policy",
      "properties": {
        "facets": {
          "$ref": "#/definitions/Model215"
        },
        "policy": {
          "$ref": "#/definitions/policy"
        }
      }
    },
    "Model219": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Data source ID"
        },
        "name": {
          "type": "string",
          "description": "Data source name"
        }
      }
    },
    "Model220": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model219"
      }
    },
    "enforcedOn": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "description": "Count of data sources this policy is enforced on (global policies only)"
        },
        "hits": {
          "$ref": "#/definitions/Model220"
        }
      }
    },
    "ruleType": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "string",
        "enum": [
          "subscription",
          "visibility",
          "masking",
          "differentialPrivacy",
          "time",
          "minimization",
          "exemption",
          "external",
          "prerequisite",
          "customWhere",
          "columnContent",
          "showRowsNever",
          "rowOrObjectRestriction",
          "automatic",
          "approval",
          "policy",
          "manual",
          "derived",
          "none"
        ]
      }
    },
    "Model221": {
      "type": "object",
      "properties": {
        "auth": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "iam": {
          "type": "string"
        }
      }
    },
    "Model222": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/Model221"
      }
    },
    "Model223": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "iam": {
          "type": "string"
        }
      }
    },
    "Model224": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/Model223"
      }
    },
    "Model225": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "string"
      }
    },
    "Model226": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "string"
      }
    },
    "detailLabels": {
      "type": "object",
      "properties": {
        "ruleType": {
          "$ref": "#/definitions/ruleType"
        },
        "authorizations": {
          "$ref": "#/definitions/Model222"
        },
        "groups": {
          "$ref": "#/definitions/Model224"
        },
        "purposes": {
          "$ref": "#/definitions/Model225"
        },
        "tags": {
          "$ref": "#/definitions/Model226"
        }
      }
    },
    "Model227": {
      "type": "object",
      "properties": {
        "globalPolicyId": {
          "type": "integer"
        },
        "policyKey": {
          "type": "string"
        },
        "policyId": {
          "type": "integer"
        },
        "dataSourceId": {
          "type": "integer"
        },
        "scope": {
          "type": "string",
          "description": "Local or global",
          "enum": [
            "local",
            "global"
          ]
        },
        "type": {
          "type": "string",
          "description": "Data or subscription",
          "enum": [
            "data",
            "subscription"
          ]
        },
        "name": {
          "type": "string",
          "description": "Name of global policy or datasource"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "state": {
          "type": "string",
          "description": "Policy state (global policies only)",
          "enum": [
            "staged",
            "deleted",
            "active"
          ]
        },
        "createdBy": {
          "type": "string",
          "description": "Policy creator (global policies only)"
        },
        "enforcedOn": {
          "$ref": "#/definitions/enforcedOn"
        },
        "isNotApplied": {
          "type": "boolean",
          "description": "True if local data policy is not applied"
        },
        "detailLabels": {
          "$ref": "#/definitions/detailLabels"
        }
      }
    },
    "Model228": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model227"
      }
    },
    "Model229": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        },
        "hits": {
          "$ref": "#/definitions/Model228"
        }
      }
    },
    "Model230": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the visibility"
        },
        "visibility": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        }
      }
    },
    "dataVisibilities": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model230"
      }
    },
    "iamProfile": {
      "type": "object"
    },
    "Model231": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model232": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model233": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "subscription",
            "masking",
            "differentialPrivacy",
            "time",
            "minimization",
            "exemption",
            "external",
            "prerequisite",
            "columnContent",
            "rowOrObjectRestriction"
          ]
        },
        "rules": {
          "type": "string"
        },
        "global": {
          "$ref": "#/definitions/global"
        },
        "description": {
          "type": "string"
        },
        "policyHash": {
          "type": "string"
        },
        "immutable": {
          "type": "boolean",
          "description": "Indicates policy cannot be changed or removed; this flag cannot be set by users"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "type"
      ]
    },
    "Model234": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model233"
      }
    },
    "Model235": {
      "type": "object",
      "properties": {
        "userAuthorizations": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "userAttributes": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "dataVisibilities": {
          "$ref": "#/definitions/dataVisibilities"
        },
        "iamProfile": {
          "$ref": "#/definitions/iamProfile"
        },
        "groups": {
          "$ref": "#/definitions/Model231"
        },
        "purposes": {
          "$ref": "#/definitions/Model232"
        },
        "jsonPolicies": {
          "$ref": "#/definitions/Model234"
        }
      }
    },
    "userCanSee": {
      "type": "array",
      "items": {
        "type": "integer"
      }
    },
    "Model236": {
      "type": "object",
      "properties": {
        "time": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "minimization": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "differentialPrivacy": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "customWhere": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        }
      }
    },
    "Model237": {
      "type": "array",
      "x-constraint": {
        "length": 2
      },
      "items": {
        "type": "integer"
      }
    },
    "Model238": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model237"
      }
    },
    "Model239": {
      "type": "object",
      "properties": {
        "noVisibilities": {
          "type": "boolean"
        },
        "hasVisibilityException": {
          "type": "boolean"
        },
        "hasPrerequisites": {
          "type": "boolean"
        },
        "hasPurposeRule": {
          "type": "boolean"
        },
        "hasUnmatchedTags": {
          "type": "boolean"
        },
        "userCanSee": {
          "$ref": "#/definitions/userCanSee"
        },
        "additionalFilters": {
          "$ref": "#/definitions/Model236"
        },
        "denialReason": {
          "type": "string"
        },
        "policySet": {
          "type": "string"
        },
        "masked": {
          "$ref": "#/definitions/Model238"
        }
      }
    },
    "Model240": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique, request-friendly classifier name",
          "pattern": "^[A-Z_0-9]+$"
        },
        "displayName": {
          "type": "string",
          "description": "Unique classifier name for display"
        },
        "description": {
          "type": "string",
          "description": "The classifier description"
        },
        "type": {
          "type": "string",
          "description": "The type of classifier, e.g. regex or dictionary",
          "enum": [
            "regex",
            "columnNameRegex",
            "dictionary",
            "remoteDictionary",
            "builtIn"
          ]
        },
        "config": {
          "$ref": "#/definitions/config",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/config"
            },
            {
              "$ref": "#/x-alt-definitions/Model4"
            },
            {
              "$ref": "#/x-alt-definitions/Model5"
            },
            {
              "$ref": "#/x-alt-definitions/Model6"
            },
            {
              "$ref": "#/x-alt-definitions/Model7"
            }
          ]
        }
      },
      "required": [
        "name",
        "displayName",
        "description",
        "type",
        "config"
      ]
    },
    "sources": {
      "type": "array",
      "description": "The names of the datasources to run SDD against",
      "minItems": 1,
      "x-constraint": {
        "unique": true,
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "Model241": {
      "type": "object",
      "properties": {
        "sources": {
          "$ref": "#/definitions/sources"
        },
        "wait": {
          "type": "integer",
          "description": "The number of seconds to wait for the sdd jobs to finish, -1 will wait until the jobs complete",
          "default": -1
        },
        "dryRun": {
          "type": "boolean",
          "description": "If true will not update the tags on the datasource(s) and will just return what tags would have been applied/removed.",
          "default": false
        },
        "template": {
          "type": "string",
          "description": "If passed will run SDD with this template instead of the applied template on the datasource(s). Will error if set when dry run is false"
        }
      },
      "required": [
        "sources"
      ]
    },
    "Model242": {
      "type": "object",
      "description": "Map of datasource name to SDD output"
    },
    "Model243": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique, request-friendly template name",
          "pattern": "^[A-Z_0-9]+$"
        },
        "displayName": {
          "type": "string",
          "description": "Unique template name for display"
        },
        "description": {
          "type": "string",
          "description": "The template description"
        },
        "classifiers": {
          "$ref": "#/definitions/classifiers"
        },
        "sampleSize": {
          "type": "integer",
          "description": "Optional override for how many records to sample",
          "minimum": 50
        }
      },
      "required": [
        "name",
        "displayName",
        "description",
        "classifiers"
      ]
    },
    "Model244": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "maxLength": 500
        },
        "displayName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The context under which this tag was applied.",
          "enum": [
            "sdd",
            "catalog",
            "schemaEvolution",
            "lineage",
            "manual",
            "framework"
          ]
        },
        "systemCreated": {
          "type": "boolean"
        },
        "addedBy": {
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        },
        "hasLeafNodes": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "catalogMetadata": {
          "$ref": "#/definitions/catalogMetadata"
        },
        "count": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model245": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model244"
      }
    },
    "Model246": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the data source. Must be unique within the Immuta instance."
        },
        "recordFormat": {
          "type": "string",
          "description": "The data format of Blobs in this data source. Examples: JSON, XML, HTML, JPEG"
        },
        "description": {
          "type": "string",
          "description": "The description of the data source."
        },
        "tags": {
          "$ref": "#/definitions/Model245"
        },
        "sqlSchemaName": {
          "type": "string",
          "description": "A string that represents this data source's schema in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "sqlTableName": {
          "type": "string",
          "description": "A string that represents this data source's table in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "blobHandlerType": {
          "type": "string",
          "description": "Describes the type of underlying blob handler that will be used with this Data Source, e.g. Custom, MS SQL.",
          "enum": [
            "Azure Synapse Analytics",
            "Amazon Athena",
            "BlackLynx",
            "Databricks",
            "DB2",
            "DB2 z/OS",
            "Elastic",
            "Greenplum",
            "SAP Hana",
            "Apache Hive",
            "Apache Impala",
            "MariaDB",
            "MongoDB",
            "MySQL",
            "Netezza",
            "Oracle",
            "PostgreSQL",
            "Presto",
            "Trino",
            "Redshift",
            "SingleStore",
            "Solr",
            "Microsoft SQL Server",
            "Sybase ASE",
            "Teradata",
            "Vertica",
            "Google BigQuery",
            "Snowflake",
            "KDB",
            "Yellowbrick",
            "Jethro",
            "Custom",
            "Apache HDFS",
            "Amazon S3",
            "Azure Blob Storage",
            "Azure Data Lake Storage Gen2"
          ]
        },
        "blobHandler": {
          "$ref": "#/definitions/blobHandler"
        },
        "type": {
          "type": "string",
          "description": "The type of data source, whether it is ingested (metadata will exist in bodata) or queryable (metadata is dynamically queried)",
          "enum": [
            "queryable",
            "ingested"
          ]
        },
        "documentation": {
          "type": "string",
          "description": "A field which can be used to provide in depth documentation for a data source. This field supports markdown syntax."
        },
        "expiration": {
          "type": "string",
          "format": "date",
          "description": "Date that the data source should be purged from Immuta."
        },
        "catalogMetadata": {
          "$ref": "#/definitions/Model185"
        },
        "workspace": {
          "type": "integer",
          "description": "The id of the workspace from which this source was created"
        },
        "derived": {
          "$ref": "#/definitions/derived"
        },
        "id": {
          "type": "integer"
        },
        "policyHandler": {
          "$ref": "#/definitions/policyHandler"
        },
        "policyHandlerType": {
          "type": "string",
          "description": "Describes the type of policy handler that will be used with this data source",
          "enum": [
            "None",
            "Builder",
            "External"
          ]
        },
        "handlerBreakingChanges": {
          "type": "boolean",
          "description": "If true, users will be notified that something might have broken in the data source"
        },
        "createdBy": {
          "type": "integer",
          "description": "User profile id that created this data source."
        },
        "deleted": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "recordCount": {
          "type": "integer"
        },
        "rowCount": {
          "type": "integer"
        },
        "statsExpiration": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string",
          "description": "The current health status of this datasource"
        },
        "statusInfo": {
          "$ref": "#/definitions/statusInfo"
        },
        "subscriptionType": {
          "type": "string"
        },
        "subscribedAsUser": {
          "type": "boolean"
        },
        "subscriptionId": {
          "type": "integer"
        },
        "globalPolicies": {
          "$ref": "#/definitions/globalPolicies"
        },
        "acknowledgeRequired": {
          "type": "boolean"
        },
        "subscriptionStatus": {
          "type": "string"
        },
        "requestedState": {
          "type": "string"
        },
        "approved": {
          "type": "boolean"
        },
        "subscriptionExpiration": {
          "type": "string",
          "format": "date"
        },
        "filterId": {
          "type": "integer"
        },
        "subscribers": {
          "type": "integer"
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/Model189"
        },
        "fingerprintCreatedAt": {
          "type": "string",
          "format": "date"
        },
        "seeded": {
          "type": "boolean"
        },
        "sddTemplate": {
          "type": "integer",
          "description": "SDD template associated with this data source"
        },
        "schemaEvolutionId": {
          "type": "number"
        },
        "schemaEvolution": {
          "$ref": "#/definitions/schemaEvolution"
        },
        "columnEvolutionEnabled": {
          "type": "boolean"
        }
      },
      "required": [
        "derived",
        "derived"
      ]
    },
    "Model247": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "subscription",
            "masking",
            "differentialPrivacy",
            "time",
            "minimization",
            "exemption",
            "external",
            "prerequisite",
            "columnContent",
            "rowOrObjectRestriction"
          ]
        },
        "rules": {
          "type": "string"
        },
        "global": {
          "$ref": "#/definitions/global"
        },
        "description": {
          "type": "string"
        },
        "policyHash": {
          "type": "string"
        },
        "immutable": {
          "type": "boolean",
          "description": "Indicates policy cannot be changed or removed; this flag cannot be set by users"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "type"
      ]
    },
    "Model248": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model247"
      }
    },
    "Model249": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "userFiles": {
          "$ref": "#/definitions/userFiles"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "native": {
          "$ref": "#/definitions/Model196"
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represent as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model250": {
      "type": "object",
      "properties": {
        "policyHandler": {
          "$ref": "#/definitions/Model192"
        },
        "dataSourceId": {
          "type": "integer",
          "description": "The ID of the data source to which this handler corresponds."
        },
        "metadata": {
          "$ref": "#/definitions/Model249",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/Model24"
            },
            {
              "$ref": "#/x-alt-definitions/Model25"
            },
            {
              "$ref": "#/x-alt-definitions/Model26"
            },
            {
              "$ref": "#/x-alt-definitions/Model27"
            },
            {
              "$ref": "#/x-alt-definitions/Model28"
            },
            {
              "$ref": "#/x-alt-definitions/Model29"
            },
            {
              "$ref": "#/x-alt-definitions/Model30"
            }
          ]
        },
        "dbms": {
          "$ref": "#/definitions/dbms"
        },
        "connectionString": {
          "type": "string"
        },
        "remoteTableDescription": {
          "type": "string"
        }
      }
    },
    "Model251": {
      "type": "array",
      "minItems": 1,
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model250"
      }
    },
    "Model252": {
      "type": "object",
      "properties": {
        "dataSource": {
          "$ref": "#/definitions/Model246"
        },
        "policyRules": {
          "$ref": "#/definitions/Model248"
        },
        "handler": {
          "$ref": "#/definitions/Model251"
        },
        "schemaEvolution": {
          "$ref": "#/definitions/schemaEvolution"
        }
      }
    },
    "Model253": {
      "type": "object",
      "description": "Schema for bulk request approval or denial",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Subscription id for request to approve/deny"
        },
        "expiration": {
          "type": "string",
          "format": "date",
          "description": "Date to expire this user's access -- approve only"
        }
      },
      "required": [
        "id"
      ]
    },
    "requests": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/Model253"
      }
    },
    "Model254": {
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/requests"
        }
      },
      "required": [
        "requests"
      ]
    },
    "Model255": {
      "type": "object",
      "description": "Schema for a datasource or project",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "datasource",
            "project"
          ]
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "parentId": {
          "type": "integer",
          "description": "Id of parent model, if this is a derived subscription"
        },
        "parentName": {
          "type": "string",
          "description": "Name of parent model, if this is a derived subscription"
        }
      }
    },
    "Model256": {
      "type": "object",
      "description": "Schema for a user or group",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "profile",
            "group"
          ]
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "Model257": {
      "type": "object",
      "properties": {
        "errorMessage": {
          "type": "string",
          "description": "Error message for failed request"
        },
        "id": {
          "type": "integer",
          "description": "Subscription id for request"
        },
        "model": {
          "$ref": "#/definitions/Model255"
        },
        "entity": {
          "$ref": "#/definitions/Model256"
        }
      },
      "required": [
        "errorMessage",
        "id"
      ]
    },
    "failures": {
      "type": "array",
      "description": "Schema for bulk request approval or denial failures",
      "items": {
        "$ref": "#/definitions/Model257"
      }
    },
    "Model258": {
      "type": "object",
      "properties": {
        "failures": {
          "$ref": "#/definitions/failures"
        }
      },
      "required": [
        "failures"
      ]
    },
    "Model259": {
      "type": "object",
      "description": "Schema for bulk request approval or denial",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Subscription id for request to approve/deny"
        },
        "denialReasoning": {
          "type": "string",
          "description": "The reasoning for denying the user access to the model -- deny only"
        }
      },
      "required": [
        "id",
        "denialReasoning"
      ]
    },
    "Model260": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/Model259"
      }
    },
    "Model261": {
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/Model260"
        }
      },
      "required": [
        "requests"
      ]
    },
    "Model262": {
      "type": "object",
      "properties": {
        "failures": {
          "$ref": "#/definitions/failures"
        }
      },
      "required": [
        "failures"
      ]
    },
    "Model263": {
      "type": "object",
      "properties": {
        "apikey": {
          "type": "string"
        }
      }
    },
    "Model264": {
      "type": "object",
      "properties": {
        "authenticated": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "Model265": {
      "type": "object",
      "properties": {
        "apikey": {
          "type": "string",
          "description": "apikey of account with impersonation attribute"
        },
        "userid": {
          "type": "string",
          "description": "userid of the user to impersonate"
        },
        "iamid": {
          "type": "string",
          "description": "iamid of the user to impersonate"
        },
        "projectId": {
          "type": "integer",
          "description": "project id of the impersonated user"
        }
      },
      "required": [
        "apikey",
        "userid",
        "iamid"
      ]
    },
    "Model266": {
      "type": "object",
      "properties": {
        "authenticated": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "Model267": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "integer",
          "description": "The id of the project to be applied"
        },
        "accountPrefix": {
          "type": "string",
          "description": "Prefix to use for SQL username",
          "maxLength": 18,
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_]*$"
        },
        "expiresIn": {
          "type": "integer",
          "description": "Number of minutes for which the account should be valid",
          "minimum": 0
        },
        "forceDirectAudit": {
          "type": "boolean",
          "description": "If true, will force direct audit of queries run by this account"
        }
      }
    },
    "Model268": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "sqlUser": {
          "type": "string"
        },
        "sqlPassword": {
          "type": "string"
        },
        "connectionString": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "database": {
          "type": "string"
        },
        "sslMode": {
          "type": "string"
        }
      }
    },
    "taskIds": {
      "type": "array",
      "minItems": 1,
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "integer"
      }
    },
    "Model269": {
      "type": "object",
      "properties": {
        "taskIds": {
          "$ref": "#/definitions/taskIds"
        }
      },
      "required": [
        "taskIds"
      ]
    },
    "Model270": {
      "type": "array",
      "description": "The masked values to be unmasked",
      "minItems": 1,
      "maxItems": 100,
      "items": {
        "type": "string"
      }
    },
    "unmaskingUsers": {
      "type": "array",
      "description": "Profile ids of users to unmask",
      "items": {
        "type": "integer"
      }
    },
    "Model271": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "integer"
        },
        "dataSourceId": {
          "type": "integer"
        },
        "column": {
          "type": "string",
          "description": "The column the masked values are from, must have a reversible masking policy on it"
        },
        "values": {
          "$ref": "#/definitions/Model270"
        },
        "unmaskReasoning": {
          "type": "string",
          "description": "The reasoning for unmasking the values"
        },
        "unmaskingUsers": {
          "$ref": "#/definitions/unmaskingUsers"
        }
      },
      "required": [
        "column",
        "values",
        "unmaskReasoning",
        "unmaskingUsers"
      ]
    },
    "Model272": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "affectedColumn": {
          "type": "string"
        },
        "associatedQuery": {
          "type": "integer"
        }
      },
      "required": [
        "body"
      ]
    },
    "Model273": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "Model274": {
      "type": "object",
      "description": "The metadata to associate with a subscription request"
    },
    "Model275": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model180"
      }
    },
    "Model276": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The status of the user",
          "enum": [
            "subscribed",
            "expert",
            "owner",
            "ingest"
          ]
        },
        "profileId": {
          "type": "integer",
          "description": "The profile ID of the user being added"
        },
        "groupId": {
          "type": "integer",
          "description": "The Group ID being added"
        },
        "metadata": {
          "$ref": "#/definitions/Model274"
        },
        "approvals": {
          "$ref": "#/definitions/Model275"
        },
        "expiration": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "state"
      ]
    },
    "Model277": {
      "type": "array",
      "description": "A list of all tags associated with this Blob",
      "items": {
        "type": "string"
      }
    },
    "visibility": {
      "type": "object",
      "description": "The visibility required to access this Blob"
    },
    "Model278": {
      "type": "object",
      "description": "All external blob metadata. May potentially be used for visibility"
    },
    "Model279": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string",
          "description": "The unique ID used to identify this Blob within its DataSource"
        },
        "filename": {
          "type": "string",
          "description": "The value that will display in the file system"
        },
        "tags": {
          "$ref": "#/definitions/Model277"
        },
        "visibility": {
          "$ref": "#/definitions/visibility"
        },
        "metadata": {
          "$ref": "#/definitions/Model278"
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "A datetime which corresponds to a date within the record itself"
        },
        "filesize": {
          "type": "integer",
          "description": "The size of the file in bytes"
        }
      },
      "required": [
        "blobId",
        "date"
      ]
    },
    "Model280": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model279"
      }
    },
    "supportedActions": {
      "type": "array",
      "description": "The actions the IAM can do",
      "items": {
        "type": "string",
        "enum": [
          "syncGroups",
          "syncAuthorizations",
          "syncRestGroups",
          "syncRestAuthorizations",
          "allowBIMAuthorizations",
          "allowBIMGroups",
          "syncUsers",
          "linkPostgresAccount",
          "scimEnabled",
          "ldapSync"
        ]
      }
    },
    "defaultPermissions": {
      "type": "array",
      "description": "The permissions every user in this iam will have",
      "items": {
        "type": "string"
      }
    },
    "Model281": {
      "type": "object",
      "description": "A mapping of IAM groups to permissions users in that group will have"
    },
    "Model282": {
      "type": "object",
      "description": "A mapping from immuta profile info key to the key in the external IAM user info",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "sqlUser": {
          "type": "string"
        }
      }
    },
    "Model283": {
      "type": "object",
      "description": "A mapping from the external user id key name in Immuta to a key in the external IAM user info"
    },
    "Model284": {
      "type": "object",
      "description": "A mapping from the authorization key name in Immuta to a key in the external IAM user info"
    },
    "Model285": {
      "type": "object",
      "description": "A mapping from immuta group info key to the key in the external IAM group info",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "gid": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Model286": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/Model282"
        },
        "externalUserIds": {
          "$ref": "#/definitions/Model283"
        },
        "authorizations": {
          "$ref": "#/definitions/Model284"
        },
        "group": {
          "$ref": "#/definitions/Model285"
        }
      }
    },
    "groupMembershipAttributes": {
      "type": "array",
      "description": "An array of strings for attributes to look for to determine if a user is in a group. Should be all lowercase!!",
      "items": {
        "type": "string"
      }
    },
    "options": {
      "type": "object",
      "properties": {
        "allowIdPInitiatedSSO": {
          "type": "boolean",
          "description": "If true will not check the state token to allow for IdP initiated SSO",
          "default": false
        },
        "useSSL": {
          "type": "boolean",
          "description": "If true will connect to the IAM with ssl"
        },
        "rejectUnauthorized": {
          "type": "boolean"
        },
        "sslPfx": {
          "type": "string"
        },
        "sslPassword": {
          "type": "string"
        },
        "sslKeyFile": {
          "type": "string"
        },
        "sslCertFile": {
          "type": "string"
        },
        "sslCaFile": {
          "type": "string"
        },
        "sslKey": {
          "type": "string"
        },
        "sslCert": {
          "type": "string"
        },
        "sslCa": {
          "type": "string"
        },
        "sslRequestCert": {
          "type": "boolean"
        },
        "host": {
          "type": "string",
          "description": "The hostname of the ldap server",
          "x-format": {
            "hostname": true
          }
        },
        "port": {
          "type": "integer",
          "description": "The port the ldap server is running on"
        },
        "debug": {
          "type": "boolean",
          "description": "If true will log extra debug info"
        },
        "userSearchBase": {
          "type": "string",
          "description": "The base dn used to find users"
        },
        "userSearchFilter": {
          "type": "string",
          "description": "The dn to add to the userSearchBase to filter for a specific user"
        },
        "userIdAttribute": {
          "type": "string",
          "description": "The dn that will hold the user's id."
        },
        "groupSearchBase": {
          "type": "string",
          "description": "The base dn used to find groups"
        },
        "groupSearchFilter": {
          "type": "string",
          "description": "The dn to add to the groupSearchBase to filter for a specific group"
        },
        "userGroupSearchFilter": {
          "type": "string",
          "description": "The dn filter to find what groups a user is in"
        },
        "userDNPattern": {
          "type": "string",
          "description": "Format string to get the dn of a user from their userid"
        },
        "userInfoScope": {
          "type": "string"
        },
        "useUserAccountForSearch": {
          "type": "boolean"
        },
        "dc": {
          "type": "string"
        },
        "connectTimeout": {
          "type": "number"
        },
        "normalizeUserId": {
          "type": "boolean",
          "description": "If true, we will convert all userIds to lowercase"
        },
        "groupMembershipAttributes": {
          "$ref": "#/definitions/groupMembershipAttributes"
        },
        "groupMembershipUnavailable": {
          "type": "boolean",
          "description": "If true, will skip trying to cache groups during a sync between users. You can try turning this off if groups are not syncing"
        }
      },
      "required": [
        "host",
        "userSearchBase"
      ]
    },
    "authentication": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "externalUserInfo": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Endpoint Immuta will pull user authorizations and groups for this IAM"
        },
        "useAuth": {
          "type": "boolean",
          "description": "If true will send the specified username and password as an auth header to the rest endpoint"
        },
        "authentication": {
          "$ref": "#/definitions/authentication"
        },
        "internalPlugin": {
          "type": "boolean",
          "description": "If true route the request internally to a custom plugin that was uploaded"
        },
        "useSSL": {
          "type": "boolean",
          "description": "If true will connect to the user info server with ssl"
        },
        "sslRequestCert": {
          "type": "boolean"
        },
        "sslPfx": {
          "type": "string"
        },
        "sslPassword": {
          "type": "string"
        },
        "sslKeyFile": {
          "type": "string"
        },
        "sslCertFile": {
          "type": "string"
        },
        "sslCaFile": {
          "type": "string"
        },
        "sslKey": {
          "type": "string"
        },
        "sslCert": {
          "type": "string"
        },
        "sslCa": {
          "type": "string"
        }
      },
      "required": [
        "uri"
      ]
    },
    "credentials": {
      "type": "object",
      "properties": {
        "bind_dn": {
          "type": "string"
        },
        "bind_pw": {
          "type": "string"
        }
      }
    },
    "ldapSync": {
      "type": "object",
      "properties": {
        "cronRule": {
          "type": "string",
          "description": "Cron rule for scheduled LDAP sync job"
        },
        "paged": {
          "type": "boolean",
          "description": "If true, will request pagination during LDAP searches"
        },
        "pageSize": {
          "type": "integer",
          "description": "Page size to be used during LDAP pagination requests"
        },
        "batchSize": {
          "type": "integer",
          "description": "The number of records to process at a time to not backlog too many queries to an LDAP server at once"
        },
        "requireManualActivation": {
          "type": "boolean",
          "description": "If true, users will be synced as disabled and must be manually enabled"
        }
      }
    },
    "iamConfig": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string",
          "description": "The name of the IAM to show in Immuta"
        },
        "type": {
          "type": "string",
          "description": "The type of the IAM",
          "enum": [
            "ldap",
            "openid",
            "saml",
            "google",
            "github",
            "pki"
          ]
        },
        "authenticationOnly": {
          "type": "boolean"
        },
        "supportedActions": {
          "$ref": "#/definitions/supportedActions"
        },
        "defaultPermissions": {
          "$ref": "#/definitions/defaultPermissions"
        },
        "permissions": {
          "$ref": "#/definitions/Model281"
        },
        "migrateFrom": {
          "type": "string",
          "description": "When users login if their userid matches a user in the select IAM, their account will be migrated to this IAM"
        },
        "schema": {
          "$ref": "#/definitions/Model286"
        },
        "options": {
          "$ref": "#/definitions/options"
        },
        "externalUserInfo": {
          "$ref": "#/definitions/externalUserInfo"
        },
        "scimToken": {
          "type": "string"
        },
        "strictScimSchema": {
          "type": "boolean"
        },
        "plugin": {
          "type": "string",
          "enum": [
            "ldap"
          ]
        },
        "credentials": {
          "$ref": "#/definitions/credentials"
        },
        "ldapSync": {
          "$ref": "#/definitions/ldapSync"
        }
      },
      "required": [
        "id",
        "displayName",
        "type"
      ]
    },
    "Model287": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string",
          "default": "*"
        },
        "dryRun": {
          "type": "boolean"
        },
        "iamConfig": {
          "$ref": "#/definitions/iamConfig"
        }
      },
      "required": [
        "dryRun"
      ]
    },
    "Model288": {
      "type": "object",
      "properties": {
        "tableFilter": {
          "type": "string",
          "description": "Only bring back relationships where both parent and child table (fully-qualified) match the specified pattern"
        },
        "batchSize": {
          "type": "integer",
          "minimum": 1
        },
        "lastTimestamp": {
          "type": "string",
          "description": "Only bring back relationships from events later than this value. Use format like '2022-06-29T09:47:06.012-07:00'."
        }
      }
    },
    "Model289": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "The job id of the ingest job."
        }
      }
    },
    "Model290": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "integer"
        },
        "dataSourceId": {
          "type": "integer"
        },
        "merged": {
          "type": "boolean"
        }
      },
      "required": [
        "dataSourceId"
      ]
    },
    "Model291": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "subscription",
            "masking",
            "differentialPrivacy",
            "time",
            "minimization",
            "exemption",
            "external",
            "prerequisite",
            "columnContent",
            "rowOrObjectRestriction"
          ]
        },
        "rules": {
          "type": "string"
        },
        "global": {
          "$ref": "#/definitions/global"
        },
        "description": {
          "type": "string"
        },
        "policyHash": {
          "type": "string"
        },
        "immutable": {
          "type": "boolean",
          "description": "Indicates policy cannot be changed or removed; this flag cannot be set by users"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "type"
      ]
    },
    "Model292": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model291"
      }
    },
    "dataSourcePolicyHandler": {
      "type": "object",
      "description": "The url information of the policy handler to use with this data source.",
      "properties": {
        "url": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "cert": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "ca": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "pfx": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "verify": {
          "type": "boolean"
        },
        "accessKey": {
          "type": "string"
        },
        "passphrase": {
          "type": "string"
        },
        "fullUrl": {
          "type": "string"
        },
        "caDeleted": {
          "type": "boolean"
        },
        "keyDeleted": {
          "type": "boolean"
        },
        "certDeleted": {
          "type": "boolean"
        },
        "inputs": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "timeout": {
          "type": "integer"
        },
        "dataSourceId": {
          "type": "integer"
        },
        "native": {
          "$ref": "#/definitions/native"
        },
        "visibilitySchema": {
          "$ref": "#/definitions/visibilitySchema"
        },
        "maskingConfiguration": {
          "$ref": "#/definitions/maskingConfiguration"
        },
        "additionalFilters": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "previousHandlerId": {
          "type": "integer"
        },
        "handlerId": {
          "type": "integer"
        }
      }
    },
    "Model293": {
      "type": "object",
      "properties": {
        "jsonPolicies": {
          "$ref": "#/definitions/Model292"
        },
        "dataSourcePolicyHandler": {
          "$ref": "#/definitions/dataSourcePolicyHandler"
        }
      },
      "required": [
        "jsonPolicies",
        "dataSourcePolicyHandler"
      ]
    },
    "Model294": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "dataSourceId": {
          "type": "integer"
        },
        "createdBy": {
          "type": "integer"
        },
        "ca": {
          "$ref": "#/definitions/ca"
        },
        "jsonPolicies": {
          "$ref": "#/definitions/jsonPolicies"
        },
        "rules": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model295": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model180"
      }
    },
    "Model296": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "integer"
        },
        "groupId": {
          "type": "integer"
        },
        "state": {
          "type": "string",
          "enum": [
            "owner",
            "not_subscribed",
            "pending",
            "subscribed",
            "expert"
          ]
        },
        "expiration": {
          "type": "string",
          "format": "date"
        },
        "approvals": {
          "$ref": "#/definitions/Model295"
        }
      }
    },
    "Model297": {
      "type": "object",
      "properties": {
        "subscriptionId": {
          "type": "integer"
        },
        "state": {
          "type": "string",
          "description": "The state of the request, ie, may have asked for subscribed, but could be pending",
          "enum": [
            "owner",
            "not_subscribed",
            "pending",
            "subscribed",
            "expert"
          ]
        },
        "approved": {
          "type": "boolean",
          "description": "Boolean value for if the subscription to the project was approved"
        }
      }
    },
    "Model298": {
      "type": "array",
      "description": "The ids of the data sources to add to the project",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "integer"
      }
    },
    "Model299": {
      "type": "object",
      "properties": {
        "dataSourceIds": {
          "$ref": "#/definitions/Model298"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "Model300": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the added data source"
        },
        "name": {
          "type": "string",
          "description": "The name of the added data source"
        },
        "blobHandlerType": {
          "type": "string",
          "description": "The blob handler type of the added data source"
        }
      }
    },
    "Model301": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model300"
      }
    },
    "Model302": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the data source that failed to add"
        },
        "name": {
          "type": "string",
          "description": "The name of the data source that failed to add"
        },
        "msg": {
          "type": "string",
          "description": "The message associated with the error record"
        }
      }
    },
    "Model303": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model302"
      }
    },
    "Model304": {
      "type": "object",
      "properties": {
        "success": {
          "$ref": "#/definitions/Model301"
        },
        "inError": {
          "$ref": "#/definitions/Model303"
        }
      }
    },
    "conditionsObj": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": [
            "or",
            "and"
          ]
        },
        "conditions": {
          "$ref": "#/definitions/conditions"
        }
      },
      "required": [
        "operator",
        "conditions"
      ]
    },
    "Model305": {
      "type": "object",
      "properties": {
        "conditionsObj": {
          "$ref": "#/definitions/conditionsObj"
        }
      }
    },
    "Model306": {
      "type": "object",
      "properties": {
        "validSet": {
          "type": "boolean"
        },
        "usersMissingAuths": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        }
      },
      "required": [
        "validSet"
      ]
    },
    "Model307": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "dataSource": {
          "type": "integer"
        }
      },
      "required": [
        "body"
      ]
    },
    "requestIds": {
      "type": "array",
      "description": "specific request ids to be approved",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "integer"
      }
    },
    "Model308": {
      "type": "object",
      "properties": {
        "requestIds": {
          "$ref": "#/definitions/requestIds"
        },
        "id": {
          "type": "integer",
          "description": "id of entity type for request filtering, if provided"
        },
        "type": {
          "type": "string",
          "description": "type of entity for request filtering, if provided",
          "enum": [
            "profile",
            "group"
          ]
        }
      }
    },
    "Model309": {
      "type": "array",
      "description": "specific request ids to be rejected",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "integer"
      }
    },
    "Model310": {
      "type": "object",
      "properties": {
        "requestIds": {
          "$ref": "#/definitions/Model309"
        },
        "id": {
          "type": "integer",
          "description": "id of entity type for request filtering, if provided"
        },
        "type": {
          "type": "string",
          "description": "type of entity for request filtering, if provided",
          "enum": [
            "profile",
            "group"
          ]
        },
        "denialReasoning": {
          "type": "string"
        }
      },
      "required": [
        "denialReasoning"
      ]
    },
    "Model311": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "maxLength": 500
        },
        "displayName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The context under which this tag was applied.",
          "enum": [
            "sdd",
            "catalog",
            "schemaEvolution",
            "lineage",
            "manual",
            "framework"
          ]
        },
        "systemCreated": {
          "type": "boolean"
        },
        "addedBy": {
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        },
        "hasLeafNodes": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model312": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model311"
      }
    },
    "Model313": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model34"
      }
    },
    "Model314": {
      "type": "object",
      "properties": {
        "userid": {
          "type": "string"
        },
        "iamid": {
          "type": "string"
        }
      },
      "required": [
        "userid",
        "iamid"
      ]
    },
    "Model315": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "x-format": {
            "email": {
              "tlds": {
                "allow": false
              }
            }
          }
        }
      },
      "required": [
        "name",
        "email"
      ]
    },
    "Model316": {
      "type": "object",
      "properties": {
        "iamid": {
          "type": "string",
          "description": "You should not override the iam in here"
        },
        "userid": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/Model315"
        },
        "permissions": {
          "$ref": "#/definitions/permissions"
        }
      },
      "required": [
        "userid"
      ]
    },
    "targetUsers": {
      "type": "array",
      "description": "Profile ids of users to get debug info",
      "items": {
        "type": "integer"
      }
    },
    "Model317": {
      "type": "object",
      "properties": {
        "auditrecordId": {
          "type": "string"
        },
        "targetUsers": {
          "$ref": "#/definitions/targetUsers"
        },
        "debugReasoning": {
          "type": "string",
          "description": "The reasoning for debugging the query"
        },
        "projectId": {
          "type": "integer"
        }
      },
      "required": [
        "auditrecordId",
        "targetUsers",
        "debugReasoning"
      ]
    },
    "Model318": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model319": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model320": {
      "type": "object",
      "properties": {
        "userAuthorizations": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "userAttributes": {
          "$ref": "#/definitions/metadata",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/key"
            },
            {
              "$ref": "#/x-alt-definitions/pfx"
            }
          ]
        },
        "dataVisibilities": {
          "$ref": "#/definitions/dataVisibilities"
        },
        "iamProfile": {
          "$ref": "#/definitions/iamProfile"
        },
        "groups": {
          "$ref": "#/definitions/Model318"
        },
        "purposes": {
          "$ref": "#/definitions/Model319"
        }
      },
      "required": [
        "dataVisibilities",
        "iamProfile"
      ]
    },
    "Model321": {
      "type": "object",
      "properties": {
        "noVisibilities": {
          "type": "boolean"
        },
        "hasVisibilityException": {
          "type": "boolean"
        },
        "hasPrerequisites": {
          "type": "boolean"
        },
        "hasPurposeRule": {
          "type": "boolean"
        },
        "hasUnmatchedTags": {
          "type": "boolean"
        },
        "masked": {
          "$ref": "#/definitions/masked"
        },
        "userCanSee": {
          "$ref": "#/definitions/userCanSee"
        },
        "additionalFilters": {
          "$ref": "#/definitions/Model236"
        },
        "denialReason": {
          "type": "string"
        },
        "policySet": {
          "type": "string"
        }
      }
    },
    "Model322": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "New name for the cloned classifier",
          "pattern": "^[A-Z_0-9]+$"
        },
        "displayName": {
          "type": "string",
          "description": "New displayName for the cloned classifier"
        },
        "description": {
          "type": "string",
          "description": "Optional new description for the cloned classifier"
        }
      },
      "required": [
        "name",
        "displayName"
      ]
    },
    "Model323": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "request": {
          "$ref": "#/definitions/request"
        },
        "response": {
          "$ref": "#/definitions/response"
        },
        "statusCode": {
          "type": "integer"
        },
        "notificationType": {
          "type": "string"
        },
        "webhooksActivityId": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model324": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Model325": {
      "type": "object",
      "properties": {
        "authenticated": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        },
        "tokenExpiration": {
          "type": "string",
          "format": "date"
        },
        "profileId": {
          "type": "integer"
        }
      }
    },
    "Model326": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        }
      },
      "required": [
        "body"
      ]
    },
    "Model327": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "Model328": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        }
      },
      "required": [
        "body"
      ]
    },
    "Model329": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "Model330": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "Model331": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model21"
      }
    },
    "Model332": {
      "type": "object",
      "properties": {
        "acknowledgeRequired": {
          "type": "boolean"
        },
        "purposes": {
          "$ref": "#/definitions/Model331"
        }
      }
    },
    "Model333": {
      "type": "array",
      "minItems": 1,
      "x-constraint": {
        "unique": true
      },
      "items": {
        "type": "string",
        "description": "One or more userid values",
        "x-convert": {
          "case": "lower"
        }
      }
    },
    "Model334": {
      "type": "object",
      "properties": {
        "SAMLResponse": {
          "type": "string"
        },
        "RelayState": {
          "type": "string"
        }
      }
    },
    "Model335": {
      "type": "object",
      "properties": {
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "sqlUser": {
          "type": "string"
        },
        "about": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "position": {
          "type": "string"
        },
        "externalUserIds": {
          "$ref": "#/definitions/externalUserIds"
        },
        "preferences": {
          "$ref": "#/definitions/preferences"
        },
        "scim": {
          "$ref": "#/definitions/scim"
        },
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "systemGenerated": {
          "type": "string"
        }
      }
    },
    "Model336": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        },
        "bimAuthorizations": {
          "type": "object",
          "properties": {
            "string": {
              "$ref": "#/definitions/string"
            }
          }
        },
        "iamAuthorizations": {
          "type": "object",
          "properties": {
            "string": {
              "$ref": "#/definitions/string"
            }
          }
        },
        "authorizations": {
          "type": "object",
          "properties": {
            "string": {
              "$ref": "#/definitions/string"
            }
          }
        },
        "permissions": {
          "$ref": "#/definitions/permissions"
        },
        "profile": {
          "type": "integer"
        },
        "authentication": {
          "type": "integer"
        },
        "systemGenerated": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "lastLogin": {
          "type": "string",
          "format": "date"
        },
        "lastExternalRefresh": {
          "type": "string",
          "format": "date"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model337": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model338": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "integer"
      }
    },
    "Model339": {
      "type": "object",
      "properties": {
        "httpPath": {
          "type": "string"
        }
      }
    },
    "Model340": {
      "type": "object",
      "default": {},
      "properties": {
        "schemaEvolutionId": {
          "type": "integer"
        },
        "dataSourceIds": {
          "$ref": "#/definitions/Model338"
        },
        "hostname": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "database": {
          "type": "string"
        },
        "table": {
          "type": "string"
        },
        "overrides": {
          "$ref": "#/definitions/Model339"
        }
      }
    },
    "Model341": {
      "type": "array",
      "items": {
        "type": "string",
        "x-format": {
          "guid": true
        }
      }
    },
    "schemaDetection": {
      "type": "object",
      "properties": {
        "warning": {
          "type": "string"
        },
        "jobs": {
          "$ref": "#/definitions/Model341"
        }
      }
    },
    "Model342": {
      "type": "array",
      "items": {
        "type": "string",
        "x-format": {
          "guid": true
        }
      }
    },
    "columnDetection": {
      "type": "object",
      "properties": {
        "warning": {
          "type": "string"
        },
        "jobs": {
          "$ref": "#/definitions/Model342"
        }
      }
    },
    "Model343": {
      "type": "object",
      "properties": {
        "schemaDetection": {
          "$ref": "#/definitions/schemaDetection"
        },
        "columnDetection": {
          "$ref": "#/definitions/columnDetection"
        }
      }
    },
    "Model344": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string",
          "maxLength": 500
        },
        "displayName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "context": {
          "type": "string",
          "description": "The context under which this tag was applied.",
          "enum": [
            "sdd",
            "catalog",
            "schemaEvolution",
            "lineage",
            "manual",
            "framework"
          ]
        },
        "systemCreated": {
          "type": "boolean"
        },
        "addedBy": {
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        },
        "hasLeafNodes": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "integer"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "catalogMetadata": {
          "$ref": "#/definitions/catalogMetadata"
        },
        "count": {
          "type": "integer"
        }
      },
      "required": [
        "name"
      ]
    },
    "Model345": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model344"
      }
    },
    "Model346": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the data source. Must be unique within the Immuta instance."
        },
        "recordFormat": {
          "type": "string",
          "description": "The data format of Blobs in this data source. Examples: JSON, XML, HTML, JPEG"
        },
        "description": {
          "type": "string",
          "description": "The description of the data source."
        },
        "tags": {
          "$ref": "#/definitions/Model345"
        },
        "sqlSchemaName": {
          "type": "string",
          "description": "A string that represents this data source's schema in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "sqlTableName": {
          "type": "string",
          "description": "A string that represents this data source's table in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "blobHandlerType": {
          "type": "string",
          "description": "Describes the type of underlying blob handler that will be used with this Data Source, e.g. Custom, MS SQL.",
          "enum": [
            "Azure Synapse Analytics",
            "Amazon Athena",
            "BlackLynx",
            "Databricks",
            "DB2",
            "DB2 z/OS",
            "Elastic",
            "Greenplum",
            "SAP Hana",
            "Apache Hive",
            "Apache Impala",
            "MariaDB",
            "MongoDB",
            "MySQL",
            "Netezza",
            "Oracle",
            "PostgreSQL",
            "Presto",
            "Trino",
            "Redshift",
            "SingleStore",
            "Solr",
            "Microsoft SQL Server",
            "Sybase ASE",
            "Teradata",
            "Vertica",
            "Google BigQuery",
            "Snowflake",
            "KDB",
            "Yellowbrick",
            "Jethro",
            "Custom",
            "Apache HDFS",
            "Amazon S3",
            "Azure Blob Storage",
            "Azure Data Lake Storage Gen2"
          ]
        },
        "blobHandler": {
          "$ref": "#/definitions/blobHandler"
        },
        "type": {
          "type": "string",
          "description": "The type of data source, whether it is ingested (metadata will exist in bodata) or queryable (metadata is dynamically queried)",
          "enum": [
            "queryable",
            "ingested"
          ]
        },
        "documentation": {
          "type": "string",
          "description": "A field which can be used to provide in depth documentation for a data source. This field supports markdown syntax."
        },
        "expiration": {
          "type": "string",
          "format": "date",
          "description": "Date that the data source should be purged from Immuta."
        },
        "catalogMetadata": {
          "$ref": "#/definitions/Model185"
        },
        "workspace": {
          "type": "integer",
          "description": "The id of the workspace from which this source was created"
        },
        "derived": {
          "$ref": "#/definitions/derived"
        },
        "id": {
          "type": "integer"
        },
        "policyHandler": {
          "$ref": "#/definitions/policyHandler"
        },
        "policyHandlerType": {
          "type": "string",
          "description": "Describes the type of policy handler that will be used with this data source",
          "enum": [
            "None",
            "Builder",
            "External"
          ]
        },
        "handlerBreakingChanges": {
          "type": "boolean",
          "description": "If true, users will be notified that something might have broken in the data source"
        },
        "createdBy": {
          "type": "integer",
          "description": "User profile id that created this data source."
        },
        "deleted": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "recordCount": {
          "type": "integer"
        },
        "rowCount": {
          "type": "integer"
        },
        "statsExpiration": {
          "type": "string",
          "format": "date"
        },
        "status": {
          "type": "string",
          "description": "The current health status of this datasource"
        },
        "statusInfo": {
          "$ref": "#/definitions/statusInfo"
        },
        "subscriptionType": {
          "type": "string"
        },
        "subscribedAsUser": {
          "type": "boolean"
        },
        "subscriptionId": {
          "type": "integer"
        },
        "globalPolicies": {
          "$ref": "#/definitions/globalPolicies"
        },
        "acknowledgeRequired": {
          "type": "boolean"
        },
        "subscriptionStatus": {
          "type": "string"
        },
        "requestedState": {
          "type": "string"
        },
        "approved": {
          "type": "boolean"
        },
        "subscriptionExpiration": {
          "type": "string",
          "format": "date"
        },
        "filterId": {
          "type": "integer"
        },
        "subscribers": {
          "type": "integer"
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/Model189"
        },
        "fingerprintCreatedAt": {
          "type": "string",
          "format": "date"
        },
        "seeded": {
          "type": "boolean"
        },
        "sddTemplate": {
          "type": "integer",
          "description": "SDD template associated with this data source"
        },
        "schemaEvolutionId": {
          "type": "number"
        },
        "schemaEvolution": {
          "$ref": "#/definitions/schemaEvolution"
        },
        "columnEvolutionEnabled": {
          "type": "boolean"
        }
      }
    },
    "ids": {
      "type": "array",
      "description": "Deprecated",
      "minItems": 1,
      "items": {
        "type": "integer"
      }
    },
    "paths": {
      "type": "array",
      "description": "For Hive and Impala data sources, this is the list of paths to the data source tables on the file system.",
      "items": {
        "type": "string"
      }
    },
    "pathUris": {
      "type": "array",
      "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the list of source path URIs.",
      "items": {
        "type": "string"
      }
    },
    "metastoreTables": {
      "type": "array",
      "description": "For Metastore-backed data sources (Hive, Impala, Databricks, etc) this is the list of upstream Metastore tables that compose this data source.",
      "items": {
        "type": "string"
      }
    },
    "Model347": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "port"
      ]
    },
    "Model348": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Model347",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/Model34"
            },
            {
              "$ref": "#/x-alt-definitions/Model35"
            },
            {
              "$ref": "#/x-alt-definitions/Model36"
            },
            {
              "$ref": "#/x-alt-definitions/Model37"
            }
          ]
        }
      }
    },
    "Model349": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/ids"
        },
        "connectionString": {
          "type": "string",
          "description": "Parent server or schema monitoring connection string"
        },
        "handler": {
          "$ref": "#/definitions/Model348"
        },
        "schemaEvolution": {
          "$ref": "#/definitions/schemaEvolution"
        }
      }
    },
    "Model350": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        }
      },
      "required": [
        "active"
      ]
    },
    "Model351": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-convert": {
            "trim": true
          }
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "subscriptionType": {
          "type": "string"
        },
        "allowMaskedJoins": {
          "type": "string"
        },
        "tags": {
          "type": "string"
        },
        "purposes": {
          "type": "string"
        },
        "stagedPurposes": {
          "type": "string"
        },
        "dataSources": {
          "type": "string"
        },
        "subscriptionPolicy": {
          "type": "string"
        },
        "equalization": {
          "type": "string"
        },
        "workspace": {
          "type": "string"
        },
        "snowflake": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean",
          "enum": [
            false
          ]
        }
      }
    },
    "Model352": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "$ref": "#/definitions/Model19"
      }
    },
    "Model353": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "projectKey": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-convert": {
            "trim": true
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "open",
            "closed"
          ]
        },
        "description": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/definitions/Model352"
        },
        "purposes": {
          "$ref": "#/definitions/purposes"
        },
        "stagedPurposes": {
          "$ref": "#/definitions/stagedPurposes"
        },
        "deleted": {
          "type": "boolean"
        },
        "snowflake": {
          "$ref": "#/definitions/snowflake"
        },
        "allowMaskedJoins": {
          "type": "boolean"
        },
        "subscriptionType": {
          "type": "string"
        },
        "subscriptionPolicy": {
          "$ref": "#/definitions/subscriptionPolicy"
        },
        "equalization": {
          "$ref": "#/definitions/equalization"
        },
        "workspace": {
          "$ref": "#/definitions/Model27",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/workspace"
            },
            {
              "type": "integer"
            }
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "User",
            "Schema"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "workspaceWarnings": {
          "$ref": "#/definitions/workspaceWarnings"
        }
      },
      "required": [
        "name",
        "status"
      ]
    },
    "Model354": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "port"
      ]
    },
    "Model355": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Model354",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/Model45"
            },
            {
              "$ref": "#/x-alt-definitions/Model46"
            },
            {
              "$ref": "#/x-alt-definitions/Model47"
            },
            {
              "$ref": "#/x-alt-definitions/Model48"
            }
          ]
        }
      }
    },
    "Model356": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/ids"
        },
        "connectionString": {
          "type": "string",
          "description": "Parent server or schema monitoring connection string"
        },
        "handler": {
          "$ref": "#/definitions/Model355"
        },
        "schemaEvolution": {
          "$ref": "#/definitions/schemaEvolution"
        }
      }
    },
    "Model357": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "iamid": {
          "type": "string",
          "description": "Cannot update iamid"
        },
        "email": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "gid": {
          "type": "string",
          "description": "Cannot update gid"
        },
        "id": {
          "type": "string",
          "description": "Cannot update id"
        },
        "createdAt": {
          "type": "string",
          "description": "Cannot update createdAt"
        },
        "updatedAt": {
          "type": "string",
          "description": "Cannot update updatedAt"
        }
      }
    },
    "Model358": {
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "integer"
      }
    },
    "update": {
      "type": "object"
    },
    "Model359": {
      "type": "object",
      "properties": {
        "ids": {
          "$ref": "#/definitions/Model358"
        },
        "update": {
          "$ref": "#/definitions/update"
        }
      },
      "required": [
        "ids"
      ]
    },
    "Model360": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        }
      },
      "required": [
        "password"
      ]
    },
    "Model361": {
      "type": "object",
      "properties": {
        "manual": {
          "type": "boolean",
          "description": "Denotes whether this was a user-driven or automatic update"
        },
        "host": {
          "type": "string",
          "description": "The host to use in the override"
        },
        "HTTPPath": {
          "type": "string",
          "description": "The HTTPPath to use in the override"
        }
      }
    },
    "Model362": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "userFiles": {
          "$ref": "#/definitions/userFiles"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "native": {
          "$ref": "#/definitions/Model196"
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represent as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model363": {
      "type": "object",
      "properties": {
        "visibilitySchema": {
          "$ref": "#/definitions/visibilitySchema"
        }
      }
    },
    "Model364": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "The handler type"
        },
        "dataSourceId": {
          "type": "integer",
          "description": "The ID of the data source to which this handler corresponds."
        },
        "metadata": {
          "$ref": "#/definitions/Model362",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/Model49"
            },
            {
              "$ref": "#/x-alt-definitions/Model50"
            },
            {
              "$ref": "#/x-alt-definitions/Model51"
            },
            {
              "$ref": "#/x-alt-definitions/Model52"
            },
            {
              "$ref": "#/x-alt-definitions/Model53"
            },
            {
              "$ref": "#/x-alt-definitions/Model54"
            },
            {
              "$ref": "#/x-alt-definitions/Model55"
            }
          ]
        },
        "dbms": {
          "$ref": "#/definitions/dbms"
        },
        "connectionString": {
          "type": "string"
        },
        "remoteTableDescription": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "policyHandler": {
          "$ref": "#/definitions/Model363"
        }
      },
      "required": [
        "dataSourceId",
        "metadata"
      ]
    },
    "Model365": {
      "type": "object",
      "properties": {
        "schemaEvolution": {
          "$ref": "#/definitions/schemaEvolution"
        },
        "handler": {
          "$ref": "#/definitions/Model364"
        }
      }
    },
    "Model366": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name cannot be updated via this endpoint",
          "x-convert": {
            "trim": true
          }
        },
        "acknowledgement": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayAcknowledgement": {
          "type": "boolean",
          "default": true
        },
        "reAcknowledge": {
          "type": "boolean"
        },
        "applyToSubpurposes": {
          "type": "boolean"
        },
        "policyMetadata": {
          "$ref": "#/definitions/policyMetadata"
        }
      }
    },
    "Model367": {
      "type": "object",
      "description": "Object identifying a user or group",
      "properties": {
        "name": {
          "type": "string"
        },
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string",
          "description": "Applicable to users only"
        },
        "id": {
          "type": "integer"
        }
      },
      "required": [
        "id"
      ]
    },
    "Model368": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model367"
      }
    },
    "Model369": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Model143"
      }
    },
    "Model370": {
      "type": "object",
      "description": "Object identifying the entities to which this global policy should be restricted.",
      "properties": {
        "users": {
          "$ref": "#/definitions/Model368"
        },
        "groups": {
          "$ref": "#/definitions/Model369"
        }
      }
    },
    "Model371": {
      "type": "object",
      "properties": {
        "HEDReportVersion": {
          "type": "string"
        },
        "certificationExpirationInterval": {
          "type": "string"
        }
      }
    },
    "Model372": {
      "type": "array",
      "description": "Tags that impact this certification",
      "items": {
        "type": "string"
      }
    },
    "Model373": {
      "type": "object",
      "description": "Certification information for the global policy",
      "properties": {
        "label": {
          "type": "string",
          "description": "Name to be displayed in certification tag"
        },
        "text": {
          "type": "string",
          "description": "Certification text"
        },
        "tags": {
          "$ref": "#/definitions/Model372"
        },
        "recertify": {
          "type": "boolean",
          "description": "If true, will require re-certification on all impacted datasources"
        }
      }
    },
    "Model374": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "policyKey": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "A string denoting a unique name for this global policy."
        },
        "type": {
          "type": "string",
          "description": "The type of global policy. Either a subscription policy or data policy.",
          "enum": [
            "data",
            "subscription",
            "global"
          ]
        },
        "template": {
          "type": "boolean",
          "description": "Whether or not this policy should be available as a template"
        },
        "createdBy": {
          "type": "integer",
          "description": "A string denoting the user that created this data source."
        },
        "createdByName": {
          "type": "string"
        },
        "ownerRestrictions": {
          "$ref": "#/definitions/Model370"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "metadata": {
          "$ref": "#/definitions/Model371"
        },
        "actions": {
          "type": "string"
        },
        "circumstances": {
          "$ref": "#/definitions/circumstances"
        },
        "clonedFrom": {
          "type": "integer",
          "description": "Id of the policy this was cloned from"
        },
        "staged": {
          "type": "boolean",
          "description": "Whether or not this global policy is in a staged status"
        },
        "systemGenerated": {
          "type": "boolean",
          "description": "Whether or not the global policy is system-generated"
        },
        "deleted": {
          "type": "boolean",
          "description": "Whether or not the global policy has been deleted"
        },
        "certification": {
          "$ref": "#/definitions/Model373"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "Model375": {
      "type": "array",
      "description": "List of data source names on which to apply the template",
      "minItems": 1,
      "x-constraint": {
        "unique": true
      },
      "items": {
        "type": "string"
      }
    },
    "Model376": {
      "type": "object",
      "properties": {
        "template": {
          "type": "string",
          "description": "Template name to apply, or null to clear current template",
          "pattern": "^[A-Z_0-9]+$"
        },
        "sources": {
          "$ref": "#/definitions/Model375"
        }
      },
      "required": [
        "template",
        "sources"
      ]
    },
    "Model377": {
      "type": "object",
      "properties": {
        "success": {
          "type": "string",
          "enum": [
            true
          ]
        }
      }
    },
    "Model378": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique, request-friendly template name",
          "pattern": "^[A-Z_0-9]+$"
        },
        "displayName": {
          "type": "string",
          "description": "Unique template name for display"
        },
        "description": {
          "type": "string",
          "description": "The template description"
        },
        "classifiers": {
          "$ref": "#/definitions/classifiers"
        },
        "sampleSize": {
          "type": "integer",
          "description": "Optional override for how many records to sample",
          "minimum": 50
        }
      }
    },
    "Model379": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "userFiles": {
          "$ref": "#/definitions/userFiles"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "native": {
          "$ref": "#/definitions/Model196"
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represent as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model380": {
      "type": "object",
      "properties": {
        "visibilitySchema": {
          "$ref": "#/definitions/visibilitySchema"
        }
      }
    },
    "Model381": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "The handler type"
        },
        "dataSourceId": {
          "type": "integer",
          "description": "The ID of the data source to which this handler corresponds."
        },
        "metadata": {
          "$ref": "#/definitions/Model379",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/Model59"
            },
            {
              "$ref": "#/x-alt-definitions/Model60"
            },
            {
              "$ref": "#/x-alt-definitions/Model61"
            },
            {
              "$ref": "#/x-alt-definitions/Model62"
            },
            {
              "$ref": "#/x-alt-definitions/Model63"
            },
            {
              "$ref": "#/x-alt-definitions/Model64"
            },
            {
              "$ref": "#/x-alt-definitions/Model65"
            }
          ]
        },
        "dbms": {
          "$ref": "#/definitions/dbms"
        },
        "connectionString": {
          "type": "string"
        },
        "remoteTableDescription": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "policyHandler": {
          "$ref": "#/definitions/Model380"
        }
      },
      "required": [
        "dataSourceId",
        "metadata"
      ]
    },
    "Model382": {
      "type": "object",
      "properties": {
        "schemaEvolution": {
          "$ref": "#/definitions/schemaEvolution"
        },
        "handler": {
          "$ref": "#/definitions/Model381"
        }
      }
    },
    "Model383": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "denied",
            "subscribed",
            "expert",
            "owner",
            "ingest"
          ]
        },
        "expiration": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model384": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Model385": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "owner",
            "subscribed"
          ]
        },
        "expiration": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model386": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the request, ie, may have asked for subscribed, but could be pending",
          "enum": [
            "owner",
            "not_subscribed",
            "pending",
            "subscribed",
            "expert"
          ]
        },
        "expiration": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "Model387": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        }
      }
    },
    "Model388": {
      "type": "object",
      "properties": {
        "originalPassword": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "password"
      ]
    },
    "Model389": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "Model390": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "x-alt-definitions": {
    "field": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "hasLeafNodes": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "iam": {
          "type": "string"
        }
      }
    },
    "Model1": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "groups"
          ]
        },
        "group": {
          "$ref": "#/x-alt-definitions/group"
        },
        "field": {
          "type": "string",
          "x-alternatives": [
            {
              "type": "string"
            },
            {
              "$ref": "#/x-alt-definitions/field"
            }
          ]
        }
      },
      "required": [
        "type"
      ]
    },
    "conditions": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/x-alt-definitions/Model1"
      }
    },
    "recommended": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "enum": [
            "or",
            "and"
          ]
        },
        "conditions": {
          "$ref": "#/x-alt-definitions/conditions"
        }
      },
      "required": [
        "operator",
        "conditions"
      ]
    },
    "Model2": {
      "type": "object",
      "properties": {
        "keyName": {
          "type": "string",
          "description": "The connection string key describing this file"
        },
        "filename": {
          "type": "string",
          "description": "The filename, which is a hash of its contents"
        },
        "content": {
          "type": "string",
          "description": "The content of the uploaded file."
        },
        "userFilename": {
          "type": "string",
          "description": "The original name of this user-provided file"
        }
      }
    },
    "userFiles": {
      "type": "array",
      "items": {
        "$ref": "#/x-alt-definitions/Model2"
      }
    },
    "hive": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        }
      },
      "required": [
        "hostname",
        "port",
        "database"
      ]
    },
    "Model3": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "clusterName": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "items": {
      "type": "array",
      "items": {
        "$ref": "#/x-alt-definitions/Model3"
      }
    },
    "configuration": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "single",
            "auto"
          ]
        },
        "items": {
          "$ref": "#/x-alt-definitions/items"
        }
      },
      "required": [
        "type"
      ]
    },
    "workspace": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "scheme": {
          "type": "string"
        },
        "hive": {
          "$ref": "#/x-alt-definitions/hive"
        },
        "name": {
          "type": "string"
        },
        "impala": {
          "$ref": "#/x-alt-definitions/hive"
        },
        "db": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "directoryAlias": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "configuration": {
          "$ref": "#/x-alt-definitions/configuration"
        }
      },
      "required": [
        "db",
        "enabled"
      ]
    },
    "tags": {
      "type": "array",
      "description": "A list of tags to apply when classifier detects sensitive data",
      "minItems": 1,
      "x-constraint": {
        "unique": true
      },
      "items": {
        "type": "string"
      }
    },
    "config": {
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/x-alt-definitions/tags"
        },
        "minConfidence": {
          "type": "number",
          "description": "Apply tags when detection confidence is at least this percentage",
          "minimum": 0,
          "maximum": 1
        },
        "regex": {
          "type": "string",
          "description": "A case-insensitive regular expression to match against column values"
        }
      },
      "required": [
        "tags",
        "minConfidence",
        "regex"
      ]
    },
    "Model4": {
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/x-alt-definitions/tags"
        },
        "columnNameRegex": {
          "type": "string",
          "description": "A case-insensitive regular expression to match against column name"
        }
      },
      "required": [
        "tags",
        "columnNameRegex"
      ]
    },
    "values": {
      "type": "array",
      "description": "An explicit list of values to match against",
      "minItems": 1,
      "items": {
        "type": "string"
      }
    },
    "Model5": {
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/x-alt-definitions/tags"
        },
        "minConfidence": {
          "type": "number",
          "description": "Apply tags when detection confidence is at least this percentage",
          "minimum": 0,
          "maximum": 1
        },
        "caseSensitive": {
          "type": "boolean",
          "description": "Whether or not to enforce case sensitivity",
          "default": false
        },
        "values": {
          "$ref": "#/x-alt-definitions/values"
        }
      },
      "required": [
        "tags",
        "minConfidence",
        "values"
      ]
    },
    "Model6": {
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/x-alt-definitions/tags"
        },
        "minConfidence": {
          "type": "number",
          "description": "Apply tags when detection confidence is at least this percentage",
          "minimum": 0,
          "maximum": 1
        },
        "caseSensitive": {
          "type": "boolean",
          "description": "Whether or not to enforce case sensitivity",
          "default": false
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the Data Source that exposes the dictionary file"
        },
        "filename": {
          "type": "string",
          "description": "The basename of the file/blob where the dictionary is stored"
        },
        "hasFileHeader": {
          "type": "boolean",
          "description": "True if the dictionary file includes a header",
          "default": false
        }
      },
      "required": [
        "tags",
        "minConfidence",
        "dataSourceName",
        "filename"
      ]
    },
    "conditionalTags": {
      "type": "object",
      "description": "When any key (i.e., a tag) in this object is found applied on another column in the same data source, apply the list of \"conditional\" tags (i.e., the key's value) to this column."
    },
    "Model7": {
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/x-alt-definitions/tags"
        },
        "minConfidence": {
          "type": "number",
          "description": "Apply tags when detection confidence is at least this percentage",
          "minimum": 0,
          "maximum": 1
        },
        "conditionalTags": {
          "$ref": "#/x-alt-definitions/conditionalTags"
        }
      },
      "required": [
        "tags",
        "minConfidence"
      ]
    },
    "string": {
      "type": "array",
      "x-constraint": {
        "unique": true
      },
      "items": {
        "type": "string"
      }
    },
    "scim": {
      "type": "object"
    },
    "Model8": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "iamid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "gid": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "authorizations": {
          "type": "object",
          "properties": {
            "string": {
              "$ref": "#/x-alt-definitions/string"
            }
          }
        },
        "description": {
          "type": "string"
        },
        "scim": {
          "$ref": "#/x-alt-definitions/scim"
        },
        "scimid": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "permissions": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model9": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "iamid": {
          "type": "string"
        },
        "userid": {
          "type": "string"
        },
        "bimAuthorizations": {
          "type": "object",
          "properties": {
            "string": {
              "$ref": "#/x-alt-definitions/string"
            }
          }
        },
        "iamAuthorizations": {
          "type": "object",
          "properties": {
            "string": {
              "$ref": "#/x-alt-definitions/string"
            }
          }
        },
        "authorizations": {
          "type": "object",
          "properties": {
            "string": {
              "$ref": "#/x-alt-definitions/string"
            }
          }
        },
        "permissions": {
          "$ref": "#/x-alt-definitions/permissions"
        },
        "profile": {
          "type": "integer"
        },
        "authentication": {
          "type": "integer"
        },
        "systemGenerated": {
          "type": "boolean"
        },
        "disabled": {
          "type": "boolean"
        },
        "lastLogin": {
          "type": "string",
          "format": "date"
        },
        "lastExternalRefresh": {
          "type": "string",
          "format": "date"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "key": {
      "type": "object"
    },
    "Model10": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "cert": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "ca": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "pfx": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "Model11": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "statistics": {
      "type": "object"
    },
    "Model12": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "catalogMetadata": {
      "type": "object"
    },
    "children": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Model13": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "dataType": {
          "type": "string"
        },
        "remoteColumn": {
          "type": "string"
        },
        "remoteType": {
          "type": "string"
        },
        "srid": {
          "type": "integer"
        },
        "statistics": {
          "$ref": "#/x-alt-definitions/statistics"
        },
        "nullable": {
          "type": "boolean"
        },
        "isPrimaryKey": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/x-alt-definitions/Model12"
        },
        "catalogMetadata": {
          "$ref": "#/x-alt-definitions/catalogMetadata"
        },
        "children": {
          "$ref": "#/x-alt-definitions/children"
        }
      },
      "required": [
        "name"
      ]
    },
    "columns": {
      "type": "array",
      "description": "The columns that should be included in this data source.",
      "x-constraint": {
        "unique": true
      },
      "items": {
        "$ref": "#/x-alt-definitions/Model13"
      }
    },
    "native": {
      "type": "object",
      "description": "Metadata related to the native workspace from which the derived data source was created.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of native workspace to which this handler belongs"
        },
        "projectId": {
          "type": "integer",
          "description": "The native workspace enabled project from which this source originated"
        }
      },
      "required": [
        "type",
        "projectId"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "native": {
          "$ref": "#/x-alt-definitions/native"
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represent as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "paths": {
      "type": "array",
      "description": "For Hive and Impala data sources, this is the list of paths to the data source tables on the file system.",
      "items": {
        "type": "string"
      }
    },
    "pathUris": {
      "type": "array",
      "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the list of source path URIs.",
      "items": {
        "type": "string"
      }
    },
    "metastoreTables": {
      "type": "array",
      "description": "For Metastore-backed data sources (Hive, Impala, Databricks, etc) this is the list of upstream Metastore tables that compose this data source.",
      "items": {
        "type": "string"
      }
    },
    "Model14": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "hostname",
        "port"
      ]
    },
    "Model15": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "accessKey",
          "enum": [
            "none",
            "accessKey",
            "instanceRole"
          ]
        },
        "region": {
          "type": "string",
          "description": "The AWS region in which the Amazon Athena database exists and where the query results will be saved."
        },
        "queryResultLocationBucket": {
          "type": "string",
          "description": "The AWS S3 bucket where the query results will be stored."
        },
        "queryResultLocationDirectory": {
          "type": "string",
          "description": "The path where the query results will be stored within the specified S3 bucket.",
          "default": "/"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "region",
        "queryResultLocationBucket"
      ]
    },
    "partitioning": {
      "type": "object",
      "description": "Partitioning information",
      "properties": {
        "expression": {
          "type": "string",
          "description": "The expression on which the table is partitioned"
        },
        "isInternal": {
          "type": "boolean",
          "description": "Whether or not the table is partitioned on an expression of an internal column like _PARTITIONTIME"
        },
        "isByDay": {
          "type": "boolean",
          "description": "Whether or not the table is partitioned by day"
        },
        "filterRequired": {
          "type": "boolean",
          "description": "Whether or not users are required to include the partition column in their queries"
        }
      },
      "required": [
        "expression",
        "isInternal",
        "isByDay",
        "filterRequired"
      ]
    },
    "Model16": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "keyFile",
          "enum": [
            "keyFile"
          ]
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "sid": {
          "type": "string",
          "description": "The catalog / BigQuery Project used to build the connection string."
        },
        "hostname": {
          "type": "string"
        },
        "partitioning": {
          "$ref": "#/x-alt-definitions/partitioning"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model17": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password",
          "enum": [
            "userPassword",
            "accessKey",
            "okta"
          ]
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "dbUser": {
          "type": "string",
          "description": "Redshift option that corresponds to a pg_user entry"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "authenticationMethod",
        "port",
        "hostname",
        "dbUser"
      ]
    },
    "Model18": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password",
          "enum": [
            "userPassword",
            "accessKey",
            "okta"
          ]
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "idpHost": {
          "type": "string",
          "description": "Okta IdP host"
        },
        "appID": {
          "type": "string",
          "description": "Okta application ID"
        },
        "role": {
          "type": "string",
          "description": "Okta's preferred role"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "authenticationMethod",
        "port",
        "hostname",
        "idpHost",
        "appID",
        "role"
      ]
    },
    "Model19": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "audience": {
          "type": "string",
          "description": "The audience for the OAuth Client Credential token request"
        },
        "clientId": {
          "type": "string",
          "description": "The client id to use when generating the JWT for the OAuth Client Credential request"
        },
        "resource": {
          "type": "string",
          "description": "The resource to set as part of the OAuth Client Credential token request"
        },
        "certificateThumbprint": {
          "type": "string",
          "description": "The certificate thumbprint to use to generate the JWT for the OAuth Client Credential request"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "hostname",
        "port",
        "audience",
        "clientId",
        "certificateThumbprint"
      ]
    },
    "sources": {
      "type": "array",
      "description": "The names of the datasources to run SDD against",
      "minItems": 1,
      "x-constraint": {
        "unique": true,
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "Model20": {
      "type": "object",
      "properties": {
        "sources": {
          "$ref": "#/x-alt-definitions/sources"
        },
        "wait": {
          "type": "integer",
          "description": "The number of seconds to wait for the sdd jobs to finish, -1 will wait until the jobs complete",
          "default": -1
        },
        "dryRun": {
          "type": "boolean",
          "description": "If true will not update the tags on the datasource(s) and will just return what tags would have been applied/removed.",
          "default": false
        },
        "template": {
          "type": "string",
          "description": "If passed will run SDD with this template instead of the applied template on the datasource(s). Will error if set when dry run is false"
        }
      },
      "required": [
        "sources"
      ]
    },
    "Model21": {
      "type": "object",
      "description": "Runs SDD on all sources in immuta",
      "properties": {
        "all": {
          "type": "boolean",
          "enum": [
            true
          ]
        }
      },
      "required": [
        "all"
      ]
    },
    "Model22": {
      "type": "object",
      "description": "Map of datasource name to SDD output"
    },
    "Model23": {
      "type": "object",
      "description": "Returns the number of datasources SDD jobs were created for",
      "properties": {
        "jobCount": {
          "type": "number"
        }
      }
    },
    "Model24": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "native": {
          "$ref": "#/x-alt-definitions/native"
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represent as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model25": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "hostname",
        "port"
      ]
    },
    "Model26": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "accessKey",
          "enum": [
            "none",
            "accessKey",
            "instanceRole"
          ]
        },
        "region": {
          "type": "string",
          "description": "The AWS region in which the Amazon Athena database exists and where the query results will be saved."
        },
        "queryResultLocationBucket": {
          "type": "string",
          "description": "The AWS S3 bucket where the query results will be stored."
        },
        "queryResultLocationDirectory": {
          "type": "string",
          "description": "The path where the query results will be stored within the specified S3 bucket.",
          "default": "/"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "region",
        "queryResultLocationBucket"
      ]
    },
    "Model27": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "keyFile",
          "enum": [
            "keyFile"
          ]
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "sid": {
          "type": "string",
          "description": "The catalog / BigQuery Project used to build the connection string."
        },
        "hostname": {
          "type": "string"
        },
        "partitioning": {
          "$ref": "#/x-alt-definitions/partitioning"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model28": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password",
          "enum": [
            "userPassword",
            "accessKey",
            "okta"
          ]
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "dbUser": {
          "type": "string",
          "description": "Redshift option that corresponds to a pg_user entry"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "authenticationMethod",
        "port",
        "hostname",
        "dbUser"
      ]
    },
    "Model29": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password",
          "enum": [
            "userPassword",
            "accessKey",
            "okta"
          ]
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "idpHost": {
          "type": "string",
          "description": "Okta IdP host"
        },
        "appID": {
          "type": "string",
          "description": "Okta application ID"
        },
        "role": {
          "type": "string",
          "description": "Okta's preferred role"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "authenticationMethod",
        "port",
        "hostname",
        "idpHost",
        "appID",
        "role"
      ]
    },
    "Model30": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "audience": {
          "type": "string",
          "description": "The audience for the OAuth Client Credential token request"
        },
        "clientId": {
          "type": "string",
          "description": "The client id to use when generating the JWT for the OAuth Client Credential request"
        },
        "resource": {
          "type": "string",
          "description": "The resource to set as part of the OAuth Client Credential token request"
        },
        "certificateThumbprint": {
          "type": "string",
          "description": "The certificate thumbprint to use to generate the JWT for the OAuth Client Credential request"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "hostname",
        "port",
        "audience",
        "clientId",
        "certificateThumbprint"
      ]
    },
    "Model31": {
      "type": "array",
      "x-constraint": {
        "single": true
      },
      "items": {
        "type": "string"
      }
    },
    "jobs": {
      "type": "array",
      "items": {
        "type": "string",
        "x-format": {
          "guid": true
        }
      }
    },
    "schemaDetection": {
      "type": "object",
      "properties": {
        "warning": {
          "type": "string"
        },
        "jobs": {
          "$ref": "#/x-alt-definitions/jobs"
        }
      }
    },
    "columnDetection": {
      "type": "object",
      "properties": {
        "warning": {
          "type": "string"
        },
        "jobs": {
          "$ref": "#/x-alt-definitions/jobs"
        }
      }
    },
    "Model32": {
      "type": "object",
      "properties": {
        "schemaDetection": {
          "$ref": "#/x-alt-definitions/schemaDetection"
        },
        "columnDetection": {
          "$ref": "#/x-alt-definitions/columnDetection"
        }
      }
    },
    "Model33": {
      "type": "object",
      "properties": {
        "bulkId": {
          "type": "string",
          "x-format": {
            "guid": true
          }
        }
      }
    },
    "Model34": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "port"
      ]
    },
    "Model35": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "accessKey",
          "enum": [
            "none",
            "accessKey",
            "instanceRole"
          ]
        },
        "region": {
          "type": "string",
          "description": "The AWS region in which the Amazon Athena database exists and where the query results will be saved."
        },
        "queryResultLocationBucket": {
          "type": "string",
          "description": "The AWS S3 bucket where the query results will be stored."
        },
        "queryResultLocationDirectory": {
          "type": "string",
          "description": "The path where the query results will be stored within the specified S3 bucket.",
          "default": "/"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "database"
      ]
    },
    "Model36": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "keyFile",
          "enum": [
            "keyFile"
          ]
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "sid": {
          "type": "string",
          "description": "The catalog / BigQuery Project used to build the connection string."
        },
        "hostname": {
          "type": "string"
        },
        "partitioning": {
          "$ref": "#/x-alt-definitions/partitioning"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "database"
      ]
    },
    "Model37": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "audience": {
          "type": "string",
          "description": "The audience for the OAuth Client Credential token request"
        },
        "clientId": {
          "type": "string",
          "description": "The client id to use when generating the JWT for the OAuth Client Credential request"
        },
        "resource": {
          "type": "string",
          "description": "The resource to set as part of the OAuth Client Credential token request"
        },
        "certificateThumbprint": {
          "type": "string",
          "description": "The certificate thumbprint to use to generate the JWT for the OAuth Client Credential request"
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "port",
        "audience",
        "clientId",
        "certificateThumbprint"
      ]
    },
    "Model38": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        }
      },
      "required": [
        "active"
      ]
    },
    "Model39": {
      "type": "object",
      "properties": {
        "dimension": {
          "type": "string"
        },
        "sensitivity": {
          "type": "number"
        }
      },
      "required": [
        "dimension",
        "sensitivity"
      ]
    },
    "sensitivities": {
      "type": "array",
      "default": [],
      "items": {
        "$ref": "#/x-alt-definitions/Model39"
      }
    },
    "Model40": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "sensitivities": {
          "$ref": "#/x-alt-definitions/sensitivities"
        }
      },
      "required": [
        "name",
        "source"
      ]
    },
    "Model41": {
      "type": "array",
      "items": {
        "$ref": "#/x-alt-definitions/Model40"
      }
    },
    "classificationTag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "source"
      ]
    },
    "Model42": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "source"
      ]
    },
    "columnTags": {
      "type": "array",
      "items": {
        "$ref": "#/x-alt-definitions/Model42"
      }
    },
    "neighborColumnTags": {
      "type": "array",
      "items": {
        "$ref": "#/x-alt-definitions/Model42"
      }
    },
    "tableTags": {
      "type": "array",
      "items": {
        "$ref": "#/x-alt-definitions/Model42"
      }
    },
    "Model43": {
      "type": "object",
      "properties": {
        "classificationTag": {
          "$ref": "#/x-alt-definitions/classificationTag"
        },
        "columnTags": {
          "$ref": "#/x-alt-definitions/columnTags"
        },
        "neighborColumnTags": {
          "$ref": "#/x-alt-definitions/neighborColumnTags"
        },
        "tableTags": {
          "$ref": "#/x-alt-definitions/tableTags"
        }
      },
      "required": [
        "classificationTag",
        "columnTags",
        "neighborColumnTags",
        "tableTags"
      ]
    },
    "rules": {
      "type": "array",
      "items": {
        "$ref": "#/x-alt-definitions/Model43"
      }
    },
    "Model44": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "$ref": "#/x-alt-definitions/Model41"
        },
        "rules": {
          "$ref": "#/x-alt-definitions/rules"
        }
      },
      "required": [
        "active",
        "name",
        "shortName",
        "description",
        "tags",
        "rules"
      ]
    },
    "Model45": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "port"
      ]
    },
    "Model46": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "accessKey",
          "enum": [
            "none",
            "accessKey",
            "instanceRole"
          ]
        },
        "region": {
          "type": "string",
          "description": "The AWS region in which the Amazon Athena database exists and where the query results will be saved."
        },
        "queryResultLocationBucket": {
          "type": "string",
          "description": "The AWS S3 bucket where the query results will be stored."
        },
        "queryResultLocationDirectory": {
          "type": "string",
          "description": "The path where the query results will be stored within the specified S3 bucket.",
          "default": "/"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "database"
      ]
    },
    "Model47": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "keyFile",
          "enum": [
            "keyFile"
          ]
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "sid": {
          "type": "string",
          "description": "The catalog / BigQuery Project used to build the connection string."
        },
        "hostname": {
          "type": "string"
        },
        "partitioning": {
          "$ref": "#/x-alt-definitions/partitioning"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "database"
      ]
    },
    "Model48": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "audience": {
          "type": "string",
          "description": "The audience for the OAuth Client Credential token request"
        },
        "clientId": {
          "type": "string",
          "description": "The client id to use when generating the JWT for the OAuth Client Credential request"
        },
        "resource": {
          "type": "string",
          "description": "The resource to set as part of the OAuth Client Credential token request"
        },
        "certificateThumbprint": {
          "type": "string",
          "description": "The certificate thumbprint to use to generate the JWT for the OAuth Client Credential request"
        },
        "bodataSchemaName": {
          "type": "string"
        }
      },
      "required": [
        "port",
        "audience",
        "clientId",
        "certificateThumbprint"
      ]
    },
    "Model49": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "native": {
          "$ref": "#/x-alt-definitions/native"
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represent as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model50": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "hostname",
        "port"
      ]
    },
    "Model51": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "accessKey",
          "enum": [
            "none",
            "accessKey",
            "instanceRole"
          ]
        },
        "region": {
          "type": "string",
          "description": "The AWS region in which the Amazon Athena database exists and where the query results will be saved."
        },
        "queryResultLocationBucket": {
          "type": "string",
          "description": "The AWS S3 bucket where the query results will be stored."
        },
        "queryResultLocationDirectory": {
          "type": "string",
          "description": "The path where the query results will be stored within the specified S3 bucket.",
          "default": "/"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "region",
        "queryResultLocationBucket"
      ]
    },
    "Model52": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "keyFile",
          "enum": [
            "keyFile"
          ]
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "sid": {
          "type": "string",
          "description": "The catalog / BigQuery Project used to build the connection string."
        },
        "hostname": {
          "type": "string"
        },
        "partitioning": {
          "$ref": "#/x-alt-definitions/partitioning"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model53": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password",
          "enum": [
            "userPassword",
            "accessKey",
            "okta"
          ]
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "dbUser": {
          "type": "string",
          "description": "Redshift option that corresponds to a pg_user entry"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "authenticationMethod",
        "port",
        "hostname",
        "dbUser"
      ]
    },
    "Model54": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password",
          "enum": [
            "userPassword",
            "accessKey",
            "okta"
          ]
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "idpHost": {
          "type": "string",
          "description": "Okta IdP host"
        },
        "appID": {
          "type": "string",
          "description": "Okta application ID"
        },
        "role": {
          "type": "string",
          "description": "Okta's preferred role"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "authenticationMethod",
        "port",
        "hostname",
        "idpHost",
        "appID",
        "role"
      ]
    },
    "Model55": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "audience": {
          "type": "string",
          "description": "The audience for the OAuth Client Credential token request"
        },
        "clientId": {
          "type": "string",
          "description": "The client id to use when generating the JWT for the OAuth Client Credential request"
        },
        "resource": {
          "type": "string",
          "description": "The resource to set as part of the OAuth Client Credential token request"
        },
        "certificateThumbprint": {
          "type": "string",
          "description": "The certificate thumbprint to use to generate the JWT for the OAuth Client Credential request"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "hostname",
        "port",
        "audience",
        "clientId",
        "certificateThumbprint"
      ]
    },
    "schemas": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "nameTemplate": {
      "type": "object",
      "properties": {
        "tableFormat": {
          "type": "string",
          "default": ""
        },
        "nameFormat": {
          "type": "string",
          "default": ""
        },
        "sqlSchemaNameFormat": {
          "type": "string",
          "default": ""
        },
        "schemaProjectNameFormat": {
          "type": "string",
          "default": ""
        }
      }
    },
    "Model56": {
      "type": "object",
      "properties": {
        "nameTemplate": {
          "$ref": "#/x-alt-definitions/nameTemplate"
        }
      }
    },
    "schemaEvolution": {
      "type": "object",
      "properties": {
        "schemas": {
          "$ref": "#/x-alt-definitions/schemas"
        },
        "disabled": {
          "type": "boolean"
        },
        "ownerProfileId": {
          "type": "integer"
        },
        "config": {
          "$ref": "#/x-alt-definitions/Model56"
        },
        "dataSourceConfig": {
          "$ref": "#/x-alt-definitions/key"
        },
        "handlerMetadata": {
          "$ref": "#/x-alt-definitions/key"
        },
        "connectionString": {
          "type": "string"
        }
      }
    },
    "dbms": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "fields": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "visibilitySchema": {
      "type": "object",
      "properties": {
        "fields": {
          "$ref": "#/x-alt-definitions/fields"
        },
        "version": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "policyHandler": {
      "type": "object",
      "properties": {
        "visibilitySchema": {
          "$ref": "#/x-alt-definitions/visibilitySchema"
        }
      }
    },
    "handler": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "The handler type"
        },
        "dataSourceId": {
          "type": "integer",
          "description": "The ID of the data source to which this handler corresponds."
        },
        "metadata": {
          "$ref": "#/definitions/Model362",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/Model49"
            },
            {
              "$ref": "#/x-alt-definitions/Model50"
            },
            {
              "$ref": "#/x-alt-definitions/Model51"
            },
            {
              "$ref": "#/x-alt-definitions/Model52"
            },
            {
              "$ref": "#/x-alt-definitions/Model53"
            },
            {
              "$ref": "#/x-alt-definitions/Model54"
            },
            {
              "$ref": "#/x-alt-definitions/Model55"
            }
          ]
        },
        "dbms": {
          "$ref": "#/x-alt-definitions/dbms"
        },
        "connectionString": {
          "type": "string"
        },
        "remoteTableDescription": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "policyHandler": {
          "$ref": "#/x-alt-definitions/policyHandler"
        }
      },
      "required": [
        "dataSourceId",
        "metadata"
      ]
    },
    "Model57": {
      "type": "object",
      "properties": {
        "schemaEvolution": {
          "$ref": "#/x-alt-definitions/schemaEvolution"
        },
        "handler": {
          "$ref": "#/x-alt-definitions/handler"
        }
      }
    },
    "Model58": {
      "type": "object",
      "description": "Deprecated",
      "properties": {
        "id": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "The handler type"
        },
        "dataSourceId": {
          "type": "integer",
          "description": "The ID of the data source to which this handler corresponds."
        },
        "metadata": {
          "$ref": "#/definitions/Model362",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/Model49"
            },
            {
              "$ref": "#/x-alt-definitions/Model50"
            },
            {
              "$ref": "#/x-alt-definitions/Model51"
            },
            {
              "$ref": "#/x-alt-definitions/Model52"
            },
            {
              "$ref": "#/x-alt-definitions/Model53"
            },
            {
              "$ref": "#/x-alt-definitions/Model54"
            },
            {
              "$ref": "#/x-alt-definitions/Model55"
            }
          ]
        },
        "dbms": {
          "$ref": "#/x-alt-definitions/dbms"
        },
        "connectionString": {
          "type": "string"
        },
        "remoteTableDescription": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "policyHandler": {
          "$ref": "#/x-alt-definitions/policyHandler"
        }
      },
      "required": [
        "dataSourceId",
        "metadata"
      ]
    },
    "Model59": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "native": {
          "$ref": "#/x-alt-definitions/native"
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represent as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model60": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "hostname",
        "port"
      ]
    },
    "Model61": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "accessKey",
          "enum": [
            "none",
            "accessKey",
            "instanceRole"
          ]
        },
        "region": {
          "type": "string",
          "description": "The AWS region in which the Amazon Athena database exists and where the query results will be saved."
        },
        "queryResultLocationBucket": {
          "type": "string",
          "description": "The AWS S3 bucket where the query results will be stored."
        },
        "queryResultLocationDirectory": {
          "type": "string",
          "description": "The path where the query results will be stored within the specified S3 bucket.",
          "default": "/"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "region",
        "queryResultLocationBucket"
      ]
    },
    "Model62": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "default": "keyFile",
          "enum": [
            "keyFile"
          ]
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "sid": {
          "type": "string",
          "description": "The catalog / BigQuery Project used to build the connection string."
        },
        "hostname": {
          "type": "string"
        },
        "partitioning": {
          "$ref": "#/x-alt-definitions/partitioning"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        }
      },
      "required": [
        "bodataTableName",
        "database"
      ]
    },
    "Model63": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password",
          "enum": [
            "userPassword",
            "accessKey",
            "okta"
          ]
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "dbUser": {
          "type": "string",
          "description": "Redshift option that corresponds to a pg_user entry"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "authenticationMethod",
        "port",
        "hostname",
        "dbUser"
      ]
    },
    "Model64": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password",
          "enum": [
            "userPassword",
            "accessKey",
            "okta"
          ]
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "idpHost": {
          "type": "string",
          "description": "Okta IdP host"
        },
        "appID": {
          "type": "string",
          "description": "Okta application ID"
        },
        "role": {
          "type": "string",
          "description": "Okta's preferred role"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "authenticationMethod",
        "port",
        "hostname",
        "idpHost",
        "appID",
        "role"
      ]
    },
    "Model65": {
      "type": "object",
      "properties": {
        "blobId": {
          "type": "string"
        },
        "eventTime": {
          "type": "string",
          "description": "The column which signifies the time for the record."
        },
        "highCardinality": {
          "type": "string",
          "description": "The column used when applying minimization and some differential privacy policies."
        },
        "bodataSchemaName": {
          "type": "string",
          "description": "The name of the schema associated with this data source that will be created in Postgres.",
          "default": "immuta",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "bodataTableName": {
          "type": "string",
          "description": "The name of the table associated with this data source that will be created in Postgres.",
          "maxLength": 255,
          "pattern": "^[a-z0-9_]*$"
        },
        "format": {
          "type": "string"
        },
        "disableClassify": {
          "type": "boolean",
          "description": "If Sensitive Data Discovery is enabled, it can be turned off on a per data source basis here."
        },
        "staleDataTolerance": {
          "type": "number",
          "description": "Deprecated field which no longer serves a purpose. Previously used to specify length in seconds that data from this handler can be cached."
        },
        "dataSourceName": {
          "type": "string",
          "description": "The name of the data source to which this handler corresponds."
        },
        "schemaProjectName": {
          "type": "string",
          "description": "The name of the schema project that will be created to include this data source."
        },
        "username": {
          "type": "string",
          "description": "The username used to connect to the remote database"
        },
        "password": {
          "type": "string",
          "description": "The password used to connect to the remote database"
        },
        "ssl": {
          "type": "boolean",
          "description": "Set to true to enable SSL communication with the remote database"
        },
        "database": {
          "type": "string",
          "description": "The database in the remote database that corresponds to this handler."
        },
        "schema": {
          "type": "string",
          "description": "The schema in the remote database that corresponds to this handler."
        },
        "table": {
          "type": "string",
          "description": "The table in the remote database that corresponds to this handler."
        },
        "tableType": {
          "type": "string",
          "description": "The type of table (base, temporary, or view) that this data source is pointing to"
        },
        "query": {
          "type": "string",
          "description": "The query that represents the data source. This query will be run to fetch blobs, stats, and the catalog for this data source."
        },
        "columns": {
          "$ref": "#/x-alt-definitions/columns"
        },
        "columnsNormalized": {
          "type": "boolean",
          "description": "Whether or not the columns were normalized when stored in the FDW"
        },
        "columnEvolutionEnabled": {
          "type": "string"
        },
        "nativeWorkspaceName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the workspace/database it is in."
        },
        "nativeSchemaName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the schema it is in."
        },
        "nativeViewName": {
          "type": "string",
          "description": "If the data source is represented in a native integration, the view representing the data source."
        },
        "authenticationMethod": {
          "type": "string",
          "description": "Some data sources support different auth methods other than username/password"
        },
        "hostname": {
          "type": "string",
          "description": "The hostname of the remote database instance"
        },
        "port": {
          "type": "integer",
          "description": "The port of the remote database instance"
        },
        "sid": {
          "type": "string",
          "description": "SID/Database from Oracle TSN used to build connection string"
        },
        "connectionStringOptions": {
          "type": "string",
          "description": "Additional connection string options to be used when connecting to the remote database."
        },
        "paths": {
          "$ref": "#/x-alt-definitions/paths"
        },
        "clusterName": {
          "type": "string",
          "description": "For HDFS backed ODBC data sources, the name for the remote Hadoop cluster. Defaults to the NameNode host name. This must match the hostname in your Hadoop cluster's \"fs.defaultFS\" property or the optional \"immuta.cluster.name\" property."
        },
        "pathUris": {
          "$ref": "#/x-alt-definitions/pathUris"
        },
        "metastoreTables": {
          "$ref": "#/x-alt-definitions/metastoreTables"
        },
        "scheme": {
          "type": "string",
          "description": "For ODBC data sources that are backed by HDFS or S3 (eg. Hive, Impala), this is the scheme extracted from the source path URI."
        },
        "providers": {
          "type": "string"
        },
        "ephemeral": {
          "type": "boolean",
          "description": "True if this the data source is an ephemeral hive cluster (determined by the scheme)"
        },
        "httpPath": {
          "type": "string",
          "description": "The HTTP Path for ODBC drivers that need that parameter to connect (ex. Databricks)"
        },
        "userFiles": {
          "$ref": "#/x-alt-definitions/userFiles"
        },
        "warehouse": {
          "type": "string",
          "description": "Warehouse for Snowflake data sources"
        },
        "workspaceId": {
          "type": "integer",
          "description": "The ID of the workspace that this handler is configured with."
        },
        "authDB": {
          "type": "string",
          "description": "The database to authenticate against for Mongo data sources"
        },
        "directory": {
          "type": "string",
          "description": "The workspace directory containing the data."
        },
        "secureNativeView": {
          "type": "boolean",
          "description": "Whether or not the native view should be represented as a secure view or not"
        },
        "audience": {
          "type": "string",
          "description": "The audience for the OAuth Client Credential token request"
        },
        "clientId": {
          "type": "string",
          "description": "The client id to use when generating the JWT for the OAuth Client Credential request"
        },
        "resource": {
          "type": "string",
          "description": "The resource to set as part of the OAuth Client Credential token request"
        },
        "certificateThumbprint": {
          "type": "string",
          "description": "The certificate thumbprint to use to generate the JWT for the OAuth Client Credential request"
        }
      },
      "required": [
        "bodataTableName",
        "database",
        "hostname",
        "port",
        "audience",
        "clientId",
        "certificateThumbprint"
      ]
    },
    "Model66": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "The handler type"
        },
        "dataSourceId": {
          "type": "integer",
          "description": "The ID of the data source to which this handler corresponds."
        },
        "metadata": {
          "$ref": "#/definitions/Model379",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/Model59"
            },
            {
              "$ref": "#/x-alt-definitions/Model60"
            },
            {
              "$ref": "#/x-alt-definitions/Model61"
            },
            {
              "$ref": "#/x-alt-definitions/Model62"
            },
            {
              "$ref": "#/x-alt-definitions/Model63"
            },
            {
              "$ref": "#/x-alt-definitions/Model64"
            },
            {
              "$ref": "#/x-alt-definitions/Model65"
            }
          ]
        },
        "dbms": {
          "$ref": "#/x-alt-definitions/dbms"
        },
        "connectionString": {
          "type": "string"
        },
        "remoteTableDescription": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "policyHandler": {
          "$ref": "#/x-alt-definitions/policyHandler"
        }
      },
      "required": [
        "dataSourceId",
        "metadata"
      ]
    },
    "Model67": {
      "type": "object",
      "properties": {
        "schemaEvolution": {
          "$ref": "#/x-alt-definitions/schemaEvolution"
        },
        "handler": {
          "$ref": "#/x-alt-definitions/Model66"
        }
      }
    },
    "Model68": {
      "type": "object",
      "description": "Deprecated",
      "properties": {
        "id": {
          "type": "integer"
        },
        "type": {
          "type": "string",
          "description": "The handler type"
        },
        "dataSourceId": {
          "type": "integer",
          "description": "The ID of the data source to which this handler corresponds."
        },
        "metadata": {
          "$ref": "#/definitions/Model379",
          "x-alternatives": [
            {
              "$ref": "#/x-alt-definitions/Model59"
            },
            {
              "$ref": "#/x-alt-definitions/Model60"
            },
            {
              "$ref": "#/x-alt-definitions/Model61"
            },
            {
              "$ref": "#/x-alt-definitions/Model62"
            },
            {
              "$ref": "#/x-alt-definitions/Model63"
            },
            {
              "$ref": "#/x-alt-definitions/Model64"
            },
            {
              "$ref": "#/x-alt-definitions/Model65"
            }
          ]
        },
        "dbms": {
          "$ref": "#/x-alt-definitions/dbms"
        },
        "connectionString": {
          "type": "string"
        },
        "remoteTableDescription": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date"
        },
        "updatedAt": {
          "type": "string",
          "format": "date"
        },
        "policyHandler": {
          "$ref": "#/x-alt-definitions/policyHandler"
        }
      },
      "required": [
        "dataSourceId",
        "metadata"
      ]
    }
  }
}